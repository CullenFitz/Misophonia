
Misophonia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009390  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800962c  0800962c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009634  08009634  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009638  08009638  00019638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800963c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000850  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e0  200008e0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e60  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d21  00000000  00000000  00037f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  0003bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  0003cf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026442  00000000  00000000  0003e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fbb  00000000  00000000  000644da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d952d  00000000  00000000  0007e495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001579c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005758  00000000  00000000  00157a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009500 	.word	0x08009500

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009500 	.word	0x08009500

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fec3 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f833 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f981 	bl	80007e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f8eb 	bl	80006b8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e2:	f000 f917 	bl	8000714 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 f945 	bl	8000774 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ea:	f007 fc9d 	bl	8007e28 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004ee:	f000 f891 	bl	8000614 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char* wavFileName = "audio_samples/Sample1.wav";
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <main+0x6c>)
 80004f4:	617b      	str	r3, [r7, #20]

  // Example WAV file parameters
  uint32_t samplingRate = 44100;  // 44.1 kHz
 80004f6:	f64a 4344 	movw	r3, #44100	; 0xac44
 80004fa:	613b      	str	r3, [r7, #16]
  uint16_t bitDepth = 16;         // 16 bits
 80004fc:	2310      	movs	r3, #16
 80004fe:	81fb      	strh	r3, [r7, #14]
  uint16_t numChannels = 1;       // Stereo
 8000500:	2301      	movs	r3, #1
 8000502:	81bb      	strh	r3, [r7, #12]
  uint32_t durationSeconds = 10;  // Duration of audio in seconds
 8000504:	230a      	movs	r3, #10
 8000506:	60bb      	str	r3, [r7, #8]

  uint16_t bufferSize = calculateBufferSize(samplingRate, bitDepth, numChannels, durationSeconds);
 8000508:	89ba      	ldrh	r2, [r7, #12]
 800050a:	89f9      	ldrh	r1, [r7, #14]
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	6938      	ldr	r0, [r7, #16]
 8000510:	f000 fe8a 	bl	8001228 <calculateBufferSize>
 8000514:	4603      	mov	r3, r0
 8000516:	80fb      	strh	r3, [r7, #6]
  //int16_t filteredAudio[bufferSize];

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000518:	f007 fcac 	bl	8007e74 <MX_USB_HOST_Process>

    /* If blue button is pressed, playback audio with filter applied */
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 800051c:	2101      	movs	r1, #1
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0x70>)
 8000520:	f001 fc42 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d1f6      	bne.n	8000518 <main+0x4c>
    	processAudioFile(wavFileName, bufferSize);
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	4619      	mov	r1, r3
 800052e:	6978      	ldr	r0, [r7, #20]
 8000530:	f000 fe0a 	bl	8001148 <processAudioFile>
    MX_USB_HOST_Process();
 8000534:	e7f0      	b.n	8000518 <main+0x4c>
 8000536:	bf00      	nop
 8000538:	08009518 	.word	0x08009518
 800053c:	40020000 	.word	0x40020000

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f008 fc8a 	bl	8008e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005be:	2307      	movs	r3, #7
 80005c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fe0e 	bl	80041e8 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fa03 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2105      	movs	r1, #5
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 f86f 	bl	80046d8 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000600:	f000 f9ec 	bl	80009dc <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	; 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_ADC1_Init+0x98>)
 8000628:	4a21      	ldr	r2, [pc, #132]	; (80006b0 <MX_ADC1_Init+0x9c>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_ADC1_Init+0x98>)
 800062e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000632:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_ADC1_Init+0x98>)
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_ADC1_Init+0xa0>)
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_ADC1_Init+0x98>)
 8000662:	2201      	movs	r2, #1
 8000664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_ADC1_Init+0x98>)
 8000670:	2201      	movs	r2, #1
 8000672:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <MX_ADC1_Init+0x98>)
 8000676:	f000 fe87 	bl	8001388 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000680:	f000 f9ac 	bl	80009dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000684:	2302      	movs	r3, #2
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_ADC1_Init+0x98>)
 8000696:	f000 febb 	bl	8001410 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006a0:	f000 f99c 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000ac 	.word	0x200000ac
 80006b0:	40012000 	.word	0x40012000
 80006b4:	0f000001 	.word	0x0f000001

080006b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x50>)
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_I2C1_Init+0x54>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x50>)
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_I2C1_Init+0x58>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f6:	f002 ff93 	bl	8003620 <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 f96c 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000f4 	.word	0x200000f4
 800070c:	40005400 	.word	0x40005400
 8000710:	000186a0 	.word	0x000186a0

08000714 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2S3_Init+0x54>)
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <MX_I2S3_Init+0x58>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2S3_Init+0x54>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2S3_Init+0x54>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_I2S3_Init+0x54>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_I2S3_Init+0x54>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_I2S3_Init+0x54>)
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <MX_I2S3_Init+0x5c>)
 800073e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_I2S3_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_I2S3_Init+0x54>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_I2S3_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_I2S3_Init+0x54>)
 8000754:	f003 f8a8 	bl	80038a8 <HAL_I2S_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800075e:	f000 f93d 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000148 	.word	0x20000148
 800076c:	40003c00 	.word	0x40003c00
 8000770:	00017700 	.word	0x00017700

08000774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_SPI1_Init+0x64>)
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_SPI1_Init+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007c0:	220a      	movs	r2, #10
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007c6:	f004 fad3 	bl	8004d70 <HAL_SPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 f904 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000190 	.word	0x20000190
 80007dc:	40013000 	.word	0x40013000

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	4b72      	ldr	r3, [pc, #456]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a71      	ldr	r2, [pc, #452]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b6f      	ldr	r3, [pc, #444]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a6a      	ldr	r2, [pc, #424]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b68      	ldr	r3, [pc, #416]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b64      	ldr	r3, [pc, #400]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a63      	ldr	r2, [pc, #396]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b61      	ldr	r3, [pc, #388]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b5d      	ldr	r3, [pc, #372]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a5c      	ldr	r2, [pc, #368]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b5a      	ldr	r3, [pc, #360]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b56      	ldr	r3, [pc, #344]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a55      	ldr	r2, [pc, #340]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b4f      	ldr	r3, [pc, #316]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a4e      	ldr	r2, [pc, #312]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b4c      	ldr	r3, [pc, #304]	; (80009c4 <MX_GPIO_Init+0x1e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	4849      	ldr	r0, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x1e8>)
 80008a4:	f001 fa98 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4847      	ldr	r0, [pc, #284]	; (80009cc <MX_GPIO_Init+0x1ec>)
 80008ae:	f001 fa93 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b2:	2200      	movs	r2, #0
 80008b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b8:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x1f0>)
 80008ba:	f001 fa8d 	bl	8001dd8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	483c      	ldr	r0, [pc, #240]	; (80009c8 <MX_GPIO_Init+0x1e8>)
 80008d6:	f001 f8cb 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008da:	2301      	movs	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4836      	ldr	r0, [pc, #216]	; (80009cc <MX_GPIO_Init+0x1ec>)
 80008f2:	f001 f8bd 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f6:	2308      	movs	r3, #8
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	482e      	ldr	r0, [pc, #184]	; (80009cc <MX_GPIO_Init+0x1ec>)
 8000912:	f001 f8ad 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	482a      	ldr	r0, [pc, #168]	; (80009d4 <MX_GPIO_Init+0x1f4>)
 800092c:	f001 f8a0 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000930:	2304      	movs	r3, #4
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x1f8>)
 8000944:	f001 f894 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095a:	2305      	movs	r3, #5
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x1f8>)
 8000966:	f001 f883 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800096a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_GPIO_Init+0x1f0>)
 8000984:	f001 f874 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000988:	2320      	movs	r3, #32
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <MX_GPIO_Init+0x1f0>)
 800099c:	f001 f868 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x1e8>)
 80009b6:	f001 f85b 	bl	8001a70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a26:	2007      	movs	r0, #7
 8000a28:	f000 ffe0 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_ADC_MspInit+0x7c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d127      	bne.n	8000aaa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a92:	2304      	movs	r3, #4
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_ADC_MspInit+0x84>)
 8000aa6:	f000 ffe3 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012000 	.word	0x40012000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000

08000ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <HAL_I2C_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12c      	bne.n	8000b3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000afe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b10:	2304      	movs	r3, #4
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <HAL_I2C_MspInit+0x8c>)
 8000b1c:	f000 ffa8 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_I2C_MspInit+0x88>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400

08000b50 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_I2S_MspInit+0xf0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d15a      	bne.n	8000c36 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b84:	23c0      	movs	r3, #192	; 0xc0
 8000b86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 ffad 	bl	8004af0 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b9c:	f7ff ff1e 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_I2S_MspInit+0xf4>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c04:	2306      	movs	r3, #6
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <HAL_I2S_MspInit+0xf8>)
 8000c10:	f000 ff2e 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c26:	2306      	movs	r3, #6
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	; (8000c4c <HAL_I2S_MspInit+0xfc>)
 8000c32:	f000 ff1d 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3738      	adds	r7, #56	; 0x38
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40003c00 	.word	0x40003c00
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020800 	.word	0x40020800

08000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_SPI_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12b      	bne.n	8000cca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_SPI_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000caa:	23e0      	movs	r3, #224	; 0xe0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_SPI_MspInit+0x8c>)
 8000cc6:	f000 fed3 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40013000 	.word	0x40013000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 fae8 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <OTG_FS_IRQHandler+0x10>)
 8000d3a:	f001 fad1 	bl	80022e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200005cc 	.word	0x200005cc

08000d48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
  }

  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e009      	b.n	8000da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf1      	blt.n	8000d94 <_write+0x12>
  }
  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de2:	605a      	str	r2, [r3, #4]
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_isatty>:

int _isatty(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_open>:

int _open(char *path, int flags, ...)
{
 8000e22:	b40e      	push	{r1, r2, r3}
 8000e24:	b480      	push	{r7}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	b003      	add	sp, #12
 8000e3c:	4770      	bx	lr
	...

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f007 fae2 	bl	8008438 <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20020000 	.word	0x20020000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	200001e8 	.word	0x200001e8
 8000ea8:	200008e0 	.word	0x200008e0

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SystemInit+0x20>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <SystemInit+0x20>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ed6:	490e      	ldr	r1, [pc, #56]	; (8000f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eec:	4c0b      	ldr	r4, [pc, #44]	; (8000f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efa:	f7ff ffd7 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f007 ff07 	bl	8008d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fae3 	bl	80004cc <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f14:	0800963c 	.word	0x0800963c
  ldr r2, =_sbss
 8000f18:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f1c:	200008e0 	.word	0x200008e0

08000f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
	...

08000f24 <readWavFile>:

/*
 * Read in data from the audio sample. Store this in the audio buffer
 */

void readWavFile(const char* filename, int16_t* audioBuffer, size_t bufferSize){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	FILE* file = fopen(filename, "rb");
 8000f30:	490d      	ldr	r1, [pc, #52]	; (8000f68 <readWavFile+0x44>)
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f007 fcf8 	bl	8008928 <fopen>
 8000f38:	6178      	str	r0, [r7, #20]

	if(file == NULL){
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00e      	beq.n	8000f5e <readWavFile+0x3a>
		return;
	}

	fseek(file, 44, SEEK_SET); /* First 44 bytes of WAV are header. Skip these */
 8000f40:	2200      	movs	r2, #0
 8000f42:	212c      	movs	r1, #44	; 0x2c
 8000f44:	6978      	ldr	r0, [r7, #20]
 8000f46:	f007 fd7b 	bl	8008a40 <fseek>

	fread(audioBuffer, sizeof(int16_t), bufferSize, file);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	2102      	movs	r1, #2
 8000f50:	68b8      	ldr	r0, [r7, #8]
 8000f52:	f007 fd65 	bl	8008a20 <fread>

	fclose(file);
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f007 fae0 	bl	800851c <fclose>
 8000f5c:	e000      	b.n	8000f60 <readWavFile+0x3c>
		return;
 8000f5e:	bf00      	nop
}
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	08009534 	.word	0x08009534

08000f6c <writeWavFile>:

void writeWavFile(const char* filename, const int16_t* audioData, size_t dataSize) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
    FILE* file = fopen(filename, "wb");
 8000f78:	493d      	ldr	r1, [pc, #244]	; (8001070 <writeWavFile+0x104>)
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f007 fcd4 	bl	8008928 <fopen>
 8000f80:	6278      	str	r0, [r7, #36]	; 0x24
    if (file == NULL) {
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d06e      	beq.n	8001066 <writeWavFile+0xfa>
        return;
    }

    // Write WAV header (assuming PCM format, 44.1 kHz, 16-bit)
    // You might need to adjust these values based on your actual data
    fprintf(file, "RIFF");
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4839      	ldr	r0, [pc, #228]	; (8001074 <writeWavFile+0x108>)
 8000f90:	f007 feb0 	bl	8008cf4 <fwrite>
    fwrite(&dataSize, sizeof(uint32_t), 1, file);  // File size excluding header
 8000f94:	1d38      	adds	r0, r7, #4
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	f007 feaa 	bl	8008cf4 <fwrite>
    fprintf(file, "WAVEfmt ");
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4834      	ldr	r0, [pc, #208]	; (8001078 <writeWavFile+0x10c>)
 8000fa8:	f007 fea4 	bl	8008cf4 <fwrite>
    uint32_t formatSize = 16;
 8000fac:	2310      	movs	r3, #16
 8000fae:	623b      	str	r3, [r7, #32]
    fwrite(&formatSize, sizeof(uint32_t), 1, file);
 8000fb0:	f107 0020 	add.w	r0, r7, #32
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2104      	movs	r1, #4
 8000fba:	f007 fe9b 	bl	8008cf4 <fwrite>
    uint16_t audioFormat = 1;  // PCM format
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	83fb      	strh	r3, [r7, #30]
    uint16_t numChannels = 1;  // Mono
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	83bb      	strh	r3, [r7, #28]
    uint32_t sampleRate = 44100;
 8000fc6:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000fca:	61bb      	str	r3, [r7, #24]
    uint32_t byteRate = sampleRate * sizeof(int16_t) * numChannels;
 8000fcc:	8bbb      	ldrh	r3, [r7, #28]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    uint16_t blockAlign = sizeof(int16_t) * numChannels;
 8000fda:	8bbb      	ldrh	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	827b      	strh	r3, [r7, #18]
    uint16_t bitsPerSample = 16;  // 16-bit
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	823b      	strh	r3, [r7, #16]
    fwrite(&audioFormat, sizeof(uint16_t), 1, file);
 8000fe6:	f107 001e 	add.w	r0, r7, #30
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	2201      	movs	r2, #1
 8000fee:	2102      	movs	r1, #2
 8000ff0:	f007 fe80 	bl	8008cf4 <fwrite>
    fwrite(&numChannels, sizeof(uint16_t), 1, file);
 8000ff4:	f107 001c 	add.w	r0, r7, #28
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	f007 fe79 	bl	8008cf4 <fwrite>
    fwrite(&sampleRate, sizeof(uint32_t), 1, file);
 8001002:	f107 0018 	add.w	r0, r7, #24
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	2201      	movs	r2, #1
 800100a:	2104      	movs	r1, #4
 800100c:	f007 fe72 	bl	8008cf4 <fwrite>
    fwrite(&byteRate, sizeof(uint32_t), 1, file);
 8001010:	f107 0014 	add.w	r0, r7, #20
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	2201      	movs	r2, #1
 8001018:	2104      	movs	r1, #4
 800101a:	f007 fe6b 	bl	8008cf4 <fwrite>
    fwrite(&blockAlign, sizeof(uint16_t), 1, file);
 800101e:	f107 0012 	add.w	r0, r7, #18
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	2201      	movs	r2, #1
 8001026:	2102      	movs	r1, #2
 8001028:	f007 fe64 	bl	8008cf4 <fwrite>
    fwrite(&bitsPerSample, sizeof(uint16_t), 1, file);
 800102c:	f107 0010 	add.w	r0, r7, #16
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	2201      	movs	r2, #1
 8001034:	2102      	movs	r1, #2
 8001036:	f007 fe5d 	bl	8008cf4 <fwrite>
    fprintf(file, "data");
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	2204      	movs	r2, #4
 800103e:	2101      	movs	r1, #1
 8001040:	480e      	ldr	r0, [pc, #56]	; (800107c <writeWavFile+0x110>)
 8001042:	f007 fe57 	bl	8008cf4 <fwrite>
    fwrite(&dataSize, sizeof(uint32_t), 1, file);  // Data size
 8001046:	1d38      	adds	r0, r7, #4
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	2201      	movs	r2, #1
 800104c:	2104      	movs	r1, #4
 800104e:	f007 fe51 	bl	8008cf4 <fwrite>

    // Write audio data
    fwrite(audioData, sizeof(int16_t), dataSize, file);
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	2102      	movs	r1, #2
 8001058:	68b8      	ldr	r0, [r7, #8]
 800105a:	f007 fe4b 	bl	8008cf4 <fwrite>

    fclose(file);
 800105e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001060:	f007 fa5c 	bl	800851c <fclose>
 8001064:	e000      	b.n	8001068 <writeWavFile+0xfc>
        return;
 8001066:	bf00      	nop
}
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08009538 	.word	0x08009538
 8001074:	0800953c 	.word	0x0800953c
 8001078:	08009544 	.word	0x08009544
 800107c:	08009550 	.word	0x08009550

08001080 <applyLowPassFIRFilter>:

/*
 * Function to apply a Finite Impulse Response filter
 */

void applyLowPassFIRFilter(const int16_t* input, int16_t* output, size_t dataSize){
 8001080:	b4b0      	push	{r4, r5, r7}
 8001082:	b097      	sub	sp, #92	; 0x5c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]

	float firCoefficients[FIR_FILTER_SIZE] = {
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <applyLowPassFIRFilter+0xc4>)
 800108e:	f107 0410 	add.w	r4, r7, #16
 8001092:	461d      	mov	r5, r3
 8001094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.25, 0.2,
	    0.15, 0.1, 0.05, 0, 0, 0, 0, 0
	};

	for (size_t i = 0; i < dataSize; ++i) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	657b      	str	r3, [r7, #84]	; 0x54
 80010ac:	e040      	b.n	8001130 <applyLowPassFIRFilter+0xb0>
	        output[i] = 0;
 80010ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4413      	add	r3, r2
 80010b6:	2200      	movs	r2, #0
 80010b8:	801a      	strh	r2, [r3, #0]

	        // Apply filter coefficients
	        for (size_t j = 0; j < FIR_FILTER_SIZE; ++j) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	653b      	str	r3, [r7, #80]	; 0x50
 80010be:	e031      	b.n	8001124 <applyLowPassFIRFilter+0xa4>
	            if (i >= j) {
 80010c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d32a      	bcc.n	800111e <applyLowPassFIRFilter+0x9e>
	                output[i] += input[i - j] * firCoefficients[j];
 80010c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	3358      	adds	r3, #88	; 0x58
 80010fa:	443b      	add	r3, r7
 80010fc:	3b48      	subs	r3, #72	; 0x48
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001116:	ee17 2a90 	vmov	r2, s15
 800111a:	b212      	sxth	r2, r2
 800111c:	801a      	strh	r2, [r3, #0]
	        for (size_t j = 0; j < FIR_FILTER_SIZE; ++j) {
 800111e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001120:	3301      	adds	r3, #1
 8001122:	653b      	str	r3, [r7, #80]	; 0x50
 8001124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001126:	2b0f      	cmp	r3, #15
 8001128:	d9ca      	bls.n	80010c0 <applyLowPassFIRFilter+0x40>
	for (size_t i = 0; i < dataSize; ++i) {
 800112a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800112c:	3301      	adds	r3, #1
 800112e:	657b      	str	r3, [r7, #84]	; 0x54
 8001130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ba      	bcc.n	80010ae <applyLowPassFIRFilter+0x2e>
	            }
	        }
	    }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	375c      	adds	r7, #92	; 0x5c
 800113e:	46bd      	mov	sp, r7
 8001140:	bcb0      	pop	{r4, r5, r7}
 8001142:	4770      	bx	lr
 8001144:	08009558 	.word	0x08009558

08001148 <processAudioFile>:

/*
 * Read data from audio file and apply filter
 */

void processAudioFile(const char* filename, size_t bufferSize){
 8001148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114c:	b089      	sub	sp, #36	; 0x24
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	466b      	mov	r3, sp
 8001156:	461e      	mov	r6, r3
	// Allocate buffers for audio data
	int16_t audioBuffer[bufferSize];
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	460b      	mov	r3, r1
 800115c:	3b01      	subs	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	2300      	movs	r3, #0
 8001162:	6039      	str	r1, [r7, #0]
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	0103      	lsls	r3, r0, #4
 8001172:	6838      	ldr	r0, [r7, #0]
 8001174:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	0102      	lsls	r2, r0, #4
 800117c:	2300      	movs	r3, #0
 800117e:	468a      	mov	sl, r1
 8001180:	469b      	mov	fp, r3
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800118e:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001192:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001196:	004b      	lsls	r3, r1, #1
 8001198:	3307      	adds	r3, #7
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	ebad 0d03 	sub.w	sp, sp, r3
 80011a2:	466b      	mov	r3, sp
 80011a4:	3301      	adds	r3, #1
 80011a6:	085b      	lsrs	r3, r3, #1
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
	int16_t filteredAudio[bufferSize];
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	460b      	mov	r3, r1
 80011b0:	3b01      	subs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	2300      	movs	r3, #0
 80011b6:	4688      	mov	r8, r1
 80011b8:	4699      	mov	r9, r3
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80011c6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80011ca:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80011ce:	2300      	movs	r3, #0
 80011d0:	460c      	mov	r4, r1
 80011d2:	461d      	mov	r5, r3
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	012b      	lsls	r3, r5, #4
 80011de:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80011e2:	0122      	lsls	r2, r4, #4
 80011e4:	004b      	lsls	r3, r1, #1
 80011e6:	3307      	adds	r3, #7
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	ebad 0d03 	sub.w	sp, sp, r3
 80011f0:	466b      	mov	r3, sp
 80011f2:	3301      	adds	r3, #1
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	613b      	str	r3, [r7, #16]

	// Read audio data from the file
	readWavFile(filename, audioBuffer, bufferSize);
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	69b9      	ldr	r1, [r7, #24]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fe90 	bl	8000f24 <readWavFile>

	// Apply low-pass filter
	applyLowPassFIRFilter(audioBuffer, filteredAudio, bufferSize);
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	6939      	ldr	r1, [r7, #16]
 8001208:	69b8      	ldr	r0, [r7, #24]
 800120a:	f7ff ff39 	bl	8001080 <applyLowPassFIRFilter>

	// Write filtered audio data to a new WAV file
	writeWavFile("filtered_output.wav", filteredAudio, bufferSize);
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	6939      	ldr	r1, [r7, #16]
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <processAudioFile+0xdc>)
 8001214:	f7ff feaa 	bl	8000f6c <writeWavFile>
 8001218:	46b5      	mov	sp, r6
}
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001224:	08009598 	.word	0x08009598

08001228 <calculateBufferSize>:

/*
 * Calculate buffer size of input wav file
 */
size_t calculateBufferSize(uint32_t samplingRate, uint16_t bitDepth, uint16_t numChannels, uint32_t durationSeconds) {
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	817b      	strh	r3, [r7, #10]
 8001236:	4613      	mov	r3, r2
 8001238:	813b      	strh	r3, [r7, #8]
    return (size_t)(samplingRate * bitDepth / 8 * numChannels * durationSeconds);
 800123a:	897b      	ldrh	r3, [r7, #10]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	08db      	lsrs	r3, r3, #3
 8001244:	893a      	ldrh	r2, [r7, #8]
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	fb02 f303 	mul.w	r3, r2, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 fbb1 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fbaa 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fbc9 	bl	8001a56 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012dc:	f000 fb91 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	200001ec 	.word	0x200001ec

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200001ec 	.word	0x200001ec

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e033      	b.n	8001406 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fb46 	bl	8000a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f93a 	bl	8001654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
 80013f6:	e001      	b.n	80013fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x1c>
 8001428:	2302      	movs	r3, #2
 800142a:	e105      	b.n	8001638 <HAL_ADC_ConfigChannel+0x228>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b09      	cmp	r3, #9
 800143a:	d925      	bls.n	8001488 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68d9      	ldr	r1, [r3, #12]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	3b1e      	subs	r3, #30
 8001452:	2207      	movs	r2, #7
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43da      	mvns	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	400a      	ands	r2, r1
 8001460:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68d9      	ldr	r1, [r3, #12]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	4603      	mov	r3, r0
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4403      	add	r3, r0
 800147a:	3b1e      	subs	r3, #30
 800147c:	409a      	lsls	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	e022      	b.n	80014ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6919      	ldr	r1, [r3, #16]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	2207      	movs	r2, #7
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6919      	ldr	r1, [r3, #16]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4403      	add	r3, r0
 80014c4:	409a      	lsls	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d824      	bhi.n	8001520 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b05      	subs	r3, #5
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	400a      	ands	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b05      	subs	r3, #5
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
 800151e:	e04c      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d824      	bhi.n	8001572 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	3b23      	subs	r3, #35	; 0x23
 800153a:	221f      	movs	r2, #31
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43da      	mvns	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	400a      	ands	r2, r1
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	3b23      	subs	r3, #35	; 0x23
 8001564:	fa00 f203 	lsl.w	r2, r0, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
 8001570:	e023      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b41      	subs	r3, #65	; 0x41
 8001584:	221f      	movs	r2, #31
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	400a      	ands	r2, r1
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3b41      	subs	r3, #65	; 0x41
 80015ae:	fa00 f203 	lsl.w	r2, r0, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_ADC_ConfigChannel+0x234>)
 80015bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a21      	ldr	r2, [pc, #132]	; (8001648 <HAL_ADC_ConfigChannel+0x238>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d109      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1cc>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b12      	cmp	r3, #18
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_ADC_ConfigChannel+0x238>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d123      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d003      	beq.n	80015f6 <HAL_ADC_ConfigChannel+0x1e6>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b11      	cmp	r3, #17
 80015f4:	d11b      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d111      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_ADC_ConfigChannel+0x23c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_ADC_ConfigChannel+0x240>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9a      	lsrs	r2, r3, #18
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001620:	e002      	b.n	8001628 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f9      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40012300 	.word	0x40012300
 8001648:	40012000 	.word	0x40012000
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800165c:	4b79      	ldr	r3, [pc, #484]	; (8001844 <ADC_Init+0x1f0>)
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	431a      	orrs	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	4a58      	ldr	r2, [pc, #352]	; (8001848 <ADC_Init+0x1f4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800171c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e00f      	b.n	8001752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0202 	bic.w	r2, r2, #2
 8001760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	005a      	lsls	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800179e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	3b01      	subs	r3, #1
 80017ac:	035a      	lsls	r2, r3, #13
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	e007      	b.n	80017c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	051a      	lsls	r2, r3, #20
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800180a:	025a      	lsls	r2, r3, #9
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	029a      	lsls	r2, r3, #10
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40012300 	.word	0x40012300
 8001848:	0f000001 	.word	0x0f000001

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e16b      	b.n	8001d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 815a 	bne.w	8001d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80b4 	beq.w	8001d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a5b      	ldr	r2, [pc, #364]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_GPIO_Init+0x314>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_GPIO_Init+0x318>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x31c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4e      	ldr	r2, [pc, #312]	; (8001d94 <HAL_GPIO_Init+0x324>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae90 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0c:	b08f      	sub	sp, #60	; 0x3c
 8001e0e:	af0a      	add	r7, sp, #40	; 0x28
 8001e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e054      	b.n	8001ec6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f006 f854 	bl	8007ee4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 f883 	bl	8004f66 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	687e      	ldr	r6, [r7, #4]
 8001e68:	466d      	mov	r5, sp
 8001e6a:	f106 0410 	add.w	r4, r6, #16
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7e:	1d33      	adds	r3, r6, #4
 8001e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f002 fffd 	bl	8004e82 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 f87a 	bl	8004f88 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	687e      	ldr	r6, [r7, #4]
 8001e9c:	466d      	mov	r5, sp
 8001e9e:	f106 0410 	add.w	r4, r6, #16
 8001ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb2:	1d33      	adds	r3, r6, #4
 8001eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb6:	6838      	ldr	r0, [r7, #0]
 8001eb8:	f003 fa02 	bl	80052c0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ece <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ece:	b590      	push	{r4, r7, lr}
 8001ed0:	b089      	sub	sp, #36	; 0x24
 8001ed2:	af04      	add	r7, sp, #16
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	4608      	mov	r0, r1
 8001ed8:	4611      	mov	r1, r2
 8001eda:	461a      	mov	r2, r3
 8001edc:	4603      	mov	r3, r0
 8001ede:	70fb      	strb	r3, [r7, #3]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70bb      	strb	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_HCD_HC_Init+0x28>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e076      	b.n	8001fe4 <HAL_HCD_HC_Init+0x116>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	212c      	movs	r1, #44	; 0x2c
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	333d      	adds	r3, #61	; 0x3d
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3338      	adds	r3, #56	; 0x38
 8001f1e:	787a      	ldrb	r2, [r7, #1]
 8001f20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	212c      	movs	r1, #44	; 0x2c
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3340      	adds	r3, #64	; 0x40
 8001f30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f32:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3339      	adds	r3, #57	; 0x39
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	333f      	adds	r3, #63	; 0x3f
 8001f54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	78ba      	ldrb	r2, [r7, #2]
 8001f5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f62:	b2d0      	uxtb	r0, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	333a      	adds	r3, #58	; 0x3a
 8001f70:	4602      	mov	r2, r0
 8001f72:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	da09      	bge.n	8001f90 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	333b      	adds	r3, #59	; 0x3b
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e008      	b.n	8001fa2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	333b      	adds	r3, #59	; 0x3b
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	333c      	adds	r3, #60	; 0x3c
 8001fb0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fb4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	787c      	ldrb	r4, [r7, #1]
 8001fbc:	78ba      	ldrb	r2, [r7, #2]
 8001fbe:	78f9      	ldrb	r1, [r7, #3]
 8001fc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	f003 fafb 	bl	80055cc <USB_HC_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_HCD_HC_Halt+0x1e>
 8002006:	2302      	movs	r3, #2
 8002008:	e00f      	b.n	800202a <HAL_HCD_HC_Halt+0x3e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fd4b 	bl	8005ab6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4603      	mov	r3, r0
 8002044:	70fb      	strb	r3, [r7, #3]
 8002046:	460b      	mov	r3, r1
 8002048:	70bb      	strb	r3, [r7, #2]
 800204a:	4613      	mov	r3, r2
 800204c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	333b      	adds	r3, #59	; 0x3b
 800205c:	78ba      	ldrb	r2, [r7, #2]
 800205e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	212c      	movs	r1, #44	; 0x2c
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	333f      	adds	r3, #63	; 0x3f
 800206e:	787a      	ldrb	r2, [r7, #1]
 8002070:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002072:	7c3b      	ldrb	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3342      	adds	r3, #66	; 0x42
 8002086:	2203      	movs	r2, #3
 8002088:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	333d      	adds	r3, #61	; 0x3d
 8002098:	7f3a      	ldrb	r2, [r7, #28]
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e008      	b.n	80020b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3342      	adds	r3, #66	; 0x42
 80020ac:	2202      	movs	r2, #2
 80020ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	f200 80c6 	bhi.w	8002244 <HAL_HCD_HC_SubmitRequest+0x210>
 80020b8:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80020ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	08002231 	.word	0x08002231
 80020c8:	08002135 	.word	0x08002135
 80020cc:	080021b3 	.word	0x080021b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020d0:	7c3b      	ldrb	r3, [r7, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	f040 80b8 	bne.w	8002248 <HAL_HCD_HC_SubmitRequest+0x214>
 80020d8:	78bb      	ldrb	r3, [r7, #2]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 80b4 	bne.w	8002248 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020e0:	8b3b      	ldrh	r3, [r7, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d108      	bne.n	80020f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	212c      	movs	r1, #44	; 0x2c
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	3355      	adds	r3, #85	; 0x55
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3355      	adds	r3, #85	; 0x55
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3342      	adds	r3, #66	; 0x42
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800211e:	e093      	b.n	8002248 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3342      	adds	r3, #66	; 0x42
 800212e:	2202      	movs	r2, #2
 8002130:	701a      	strb	r2, [r3, #0]
      break;
 8002132:	e089      	b.n	8002248 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002134:	78bb      	ldrb	r3, [r7, #2]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11d      	bne.n	8002176 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3355      	adds	r3, #85	; 0x55
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3342      	adds	r3, #66	; 0x42
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002160:	e073      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3342      	adds	r3, #66	; 0x42
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
      break;
 8002174:	e069      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3354      	adds	r3, #84	; 0x54
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3342      	adds	r3, #66	; 0x42
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
      break;
 800219c:	e055      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3342      	adds	r3, #66	; 0x42
 80021ac:	2202      	movs	r2, #2
 80021ae:	701a      	strb	r2, [r3, #0]
      break;
 80021b0:	e04b      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021b2:	78bb      	ldrb	r3, [r7, #2]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d11d      	bne.n	80021f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3355      	adds	r3, #85	; 0x55
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3342      	adds	r3, #66	; 0x42
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021de:	e034      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3342      	adds	r3, #66	; 0x42
 80021ee:	2202      	movs	r2, #2
 80021f0:	701a      	strb	r2, [r3, #0]
      break;
 80021f2:	e02a      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3354      	adds	r3, #84	; 0x54
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3342      	adds	r3, #66	; 0x42
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
      break;
 800221a:	e016      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3342      	adds	r3, #66	; 0x42
 800222a:	2202      	movs	r2, #2
 800222c:	701a      	strb	r2, [r3, #0]
      break;
 800222e:	e00c      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3342      	adds	r3, #66	; 0x42
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
      break;
 8002242:	e002      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002248:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	212c      	movs	r1, #44	; 0x2c
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	3344      	adds	r3, #68	; 0x44
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	8b3a      	ldrh	r2, [r7, #24]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	202c      	movs	r0, #44	; 0x2c
 8002264:	fb00 f303 	mul.w	r3, r0, r3
 8002268:	440b      	add	r3, r1
 800226a:	334c      	adds	r3, #76	; 0x4c
 800226c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3360      	adds	r3, #96	; 0x60
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3350      	adds	r3, #80	; 0x50
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3339      	adds	r3, #57	; 0x39
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	3361      	adds	r3, #97	; 0x61
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	222c      	movs	r2, #44	; 0x2c
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	3338      	adds	r3, #56	; 0x38
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	18d1      	adds	r1, r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	f003 fa9e 	bl	8005810 <USB_HC_StartXfer>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop

080022e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 ff9f 	bl	800523a <USB_GetMode>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	f040 80f6 	bne.w	80024f0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f002 ff83 	bl	8005214 <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80ec 	beq.w	80024ee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 ff7a 	bl	8005214 <USB_ReadInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800232a:	d104      	bne.n	8002336 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002334:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f002 ff6a 	bl	8005214 <USB_ReadInterrupts>
 8002340:	4603      	mov	r3, r0
 8002342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800234a:	d104      	bne.n	8002356 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002354:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f002 ff5a 	bl	8005214 <USB_ReadInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800236a:	d104      	bne.n	8002376 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002374:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f002 ff4a 	bl	8005214 <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d103      	bne.n	8002392 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2202      	movs	r2, #2
 8002390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f002 ff3c 	bl	8005214 <USB_ReadInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023a6:	d11c      	bne.n	80023e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023c2:	2110      	movs	r1, #16
 80023c4:	6938      	ldr	r0, [r7, #16]
 80023c6:	f002 fe2b 	bl	8005020 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023ca:	6938      	ldr	r0, [r7, #16]
 80023cc:	f002 fe5c 	bl	8005088 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2101      	movs	r1, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 f832 	bl	8005440 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 fdff 	bl	8007fe0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 ff14 	bl	8005214 <USB_ReadInterrupts>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f6:	d102      	bne.n	80023fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f001 f89e 	bl	800353a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f002 ff06 	bl	8005214 <USB_ReadInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b08      	cmp	r3, #8
 8002410:	d106      	bne.n	8002420 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f005 fdc8 	bl	8007fa8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2208      	movs	r2, #8
 800241e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fef5 	bl	8005214 <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b10      	cmp	r3, #16
 8002432:	d101      	bne.n	8002438 <HAL_HCD_IRQHandler+0x158>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_HCD_IRQHandler+0x15a>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0210 	bic.w	r2, r2, #16
 800244c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 ffa1 	bl	8003396 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0210 	orr.w	r2, r2, #16
 8002462:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f002 fed3 	bl	8005214 <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002478:	d13a      	bne.n	80024f0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fb08 	bl	8005a94 <USB_HC_ReadInterrupt>
 8002484:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e025      	b.n	80024d8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d018      	beq.n	80024d2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b6:	d106      	bne.n	80024c6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8ab 	bl	800261a <HCD_HC_IN_IRQHandler>
 80024c4:	e005      	b.n	80024d2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fbf9 	bl	8002cc4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3d4      	bcc.n	800248c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ea:	615a      	str	r2, [r3, #20]
 80024ec:	e000      	b.n	80024f0 <HAL_HCD_IRQHandler+0x210>
      return;
 80024ee:	bf00      	nop
    }
  }
}
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_HCD_Start+0x16>
 8002508:	2302      	movs	r3, #2
 800250a:	e013      	b.n	8002534 <HAL_HCD_Start+0x3e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fff4 	bl	8005508 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f002 fd0d 	bl	8004f44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_HCD_Stop+0x16>
 800254e:	2302      	movs	r3, #2
 8002550:	e00d      	b.n	800256e <HAL_HCD_Stop+0x32>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fbe2 	bl	8005d28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f002 ff96 	bl	80054b4 <USB_ResetPort>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	781b      	ldrb	r3, [r3, #0]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3350      	adds	r3, #80	; 0x50
 80025d4:	681b      	ldr	r3, [r3, #0]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 ffda 	bl	80055a8 <USB_GetCurrentFrame>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f002 ffb5 	bl	800557a <USB_GetHostSpeed>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b04      	cmp	r3, #4
 8002648:	d11a      	bne.n	8002680 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	2304      	movs	r3, #4
 800265a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3361      	adds	r3, #97	; 0x61
 800266a:	2206      	movs	r2, #6
 800266c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fa1c 	bl	8005ab6 <USB_HC_Halt>
 800267e:	e0af      	b.n	80027e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002696:	d11b      	bne.n	80026d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	461a      	mov	r2, r3
 80026a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3361      	adds	r3, #97	; 0x61
 80026ba:	2207      	movs	r2, #7
 80026bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 f9f4 	bl	8005ab6 <USB_HC_Halt>
 80026ce:	e087      	b.n	80027e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d109      	bne.n	80026fa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	461a      	mov	r2, r3
 80026f4:	2320      	movs	r3, #32
 80026f6:	6093      	str	r3, [r2, #8]
 80026f8:	e072      	b.n	80027e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b08      	cmp	r3, #8
 800270e:	d11a      	bne.n	8002746 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	461a      	mov	r2, r3
 800271e:	2308      	movs	r3, #8
 8002720:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3361      	adds	r3, #97	; 0x61
 8002730:	2205      	movs	r2, #5
 8002732:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f9b9 	bl	8005ab6 <USB_HC_Halt>
 8002744:	e04c      	b.n	80027e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275c:	d11b      	bne.n	8002796 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002770:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3361      	adds	r3, #97	; 0x61
 8002780:	2208      	movs	r2, #8
 8002782:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f003 f991 	bl	8005ab6 <USB_HC_Halt>
 8002794:	e024      	b.n	80027e0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d119      	bne.n	80027e0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	461a      	mov	r2, r3
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3361      	adds	r3, #97	; 0x61
 80027cc:	2206      	movs	r2, #6
 80027ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 f96b 	bl	8005ab6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f6:	d112      	bne.n	800281e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f957 	bl	8005ab6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	461a      	mov	r2, r3
 8002816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800281a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800281c:	e24e      	b.n	8002cbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	f040 80df 	bne.w	80029f4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d019      	beq.n	8002872 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3348      	adds	r3, #72	; 0x48
 800284c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	0159      	lsls	r1, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	440b      	add	r3, r1
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002860:	1ad2      	subs	r2, r2, r3
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	202c      	movs	r0, #44	; 0x2c
 8002868:	fb00 f303 	mul.w	r3, r0, r3
 800286c:	440b      	add	r3, r1
 800286e:	3350      	adds	r3, #80	; 0x50
 8002870:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3361      	adds	r3, #97	; 0x61
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	335c      	adds	r3, #92	; 0x5c
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	333f      	adds	r3, #63	; 0x3f
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d111      	bne.n	80028f4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 f8eb 	bl	8005ab6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	461a      	mov	r2, r3
 80028ee:	2310      	movs	r3, #16
 80028f0:	6093      	str	r3, [r2, #8]
 80028f2:	e03a      	b.n	800296a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	333f      	adds	r3, #63	; 0x3f
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d009      	beq.n	800291c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	333f      	adds	r3, #63	; 0x3f
 8002916:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002918:	2b01      	cmp	r3, #1
 800291a:	d126      	bne.n	800296a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	0151      	lsls	r1, r2, #5
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	440a      	add	r2, r1
 8002932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800293a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3360      	adds	r3, #96	; 0x60
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	b2d9      	uxtb	r1, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	202c      	movs	r0, #44	; 0x2c
 8002958:	fb00 f303 	mul.w	r3, r0, r3
 800295c:	4413      	add	r3, r2
 800295e:	3360      	adds	r3, #96	; 0x60
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f005 fb49 	bl	8007ffc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d12b      	bne.n	80029ca <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3348      	adds	r3, #72	; 0x48
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	202c      	movs	r0, #44	; 0x2c
 8002988:	fb00 f202 	mul.w	r2, r0, r2
 800298c:	440a      	add	r2, r1
 800298e:	3240      	adds	r2, #64	; 0x40
 8002990:	8812      	ldrh	r2, [r2, #0]
 8002992:	fbb3 f3f2 	udiv	r3, r3, r2
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 818e 	beq.w	8002cbc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3354      	adds	r3, #84	; 0x54
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2d8      	uxtb	r0, r3
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3354      	adds	r3, #84	; 0x54
 80029c4:	4602      	mov	r2, r0
 80029c6:	701a      	strb	r2, [r3, #0]
}
 80029c8:	e178      	b.n	8002cbc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3354      	adds	r3, #84	; 0x54
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	f083 0301 	eor.w	r3, r3, #1
 80029de:	b2d8      	uxtb	r0, r3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3354      	adds	r3, #84	; 0x54
 80029ee:	4602      	mov	r2, r0
 80029f0:	701a      	strb	r2, [r3, #0]
}
 80029f2:	e163      	b.n	8002cbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	f040 80f6 	bne.w	8002bf8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3361      	adds	r3, #97	; 0x61
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d109      	bne.n	8002a34 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3360      	adds	r3, #96	; 0x60
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e0c9      	b.n	8002bc8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3361      	adds	r3, #97	; 0x61
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d109      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3360      	adds	r3, #96	; 0x60
 8002a56:	2205      	movs	r2, #5
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e0b5      	b.n	8002bc8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3361      	adds	r3, #97	; 0x61
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d009      	beq.n	8002a84 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3361      	adds	r3, #97	; 0x61
 8002a7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d150      	bne.n	8002b26 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	335c      	adds	r3, #92	; 0x5c
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	202c      	movs	r0, #44	; 0x2c
 8002a9c:	fb00 f303 	mul.w	r3, r0, r3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	335c      	adds	r3, #92	; 0x5c
 8002aa4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	335c      	adds	r3, #92	; 0x5c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d912      	bls.n	8002ae0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	335c      	adds	r3, #92	; 0x5c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3360      	adds	r3, #96	; 0x60
 8002ada:	2204      	movs	r2, #4
 8002adc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ade:	e073      	b.n	8002bc8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3360      	adds	r3, #96	; 0x60
 8002aee:	2202      	movs	r2, #2
 8002af0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b08:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b10:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b24:	e050      	b.n	8002bc8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3361      	adds	r3, #97	; 0x61
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d122      	bne.n	8002b80 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3360      	adds	r3, #96	; 0x60
 8002b48:	2202      	movs	r2, #2
 8002b4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e023      	b.n	8002bc8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3361      	adds	r3, #97	; 0x61
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b07      	cmp	r3, #7
 8002b92:	d119      	bne.n	8002bc8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	335c      	adds	r3, #92	; 0x5c
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	202c      	movs	r0, #44	; 0x2c
 8002bac:	fb00 f303 	mul.w	r3, r0, r3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	335c      	adds	r3, #92	; 0x5c
 8002bb4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3360      	adds	r3, #96	; 0x60
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b2d9      	uxtb	r1, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	202c      	movs	r0, #44	; 0x2c
 8002be4:	fb00 f303 	mul.w	r3, r0, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f005 fa03 	bl	8007ffc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bf6:	e061      	b.n	8002cbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d156      	bne.n	8002cbc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	333f      	adds	r3, #63	; 0x3f
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d111      	bne.n	8002c46 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	335c      	adds	r3, #92	; 0x5c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 ff39 	bl	8005ab6 <USB_HC_Halt>
 8002c44:	e031      	b.n	8002caa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	333f      	adds	r3, #63	; 0x3f
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	333f      	adds	r3, #63	; 0x3f
 8002c68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d11d      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	335c      	adds	r3, #92	; 0x5c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d110      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3361      	adds	r3, #97	; 0x61
 8002c96:	2203      	movs	r2, #3
 8002c98:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 ff06 	bl	8005ab6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2310      	movs	r3, #16
 8002cba:	6093      	str	r3, [r2, #8]
}
 8002cbc:	bf00      	nop
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d11a      	bne.n	8002d2a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	461a      	mov	r2, r3
 8002d02:	2304      	movs	r3, #4
 8002d04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3361      	adds	r3, #97	; 0x61
 8002d14:	2206      	movs	r2, #6
 8002d16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fec7 	bl	8005ab6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d28:	e331      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d12e      	bne.n	8002d9e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2320      	movs	r3, #32
 8002d50:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	333d      	adds	r3, #61	; 0x3d
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	f040 8313 	bne.w	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	333d      	adds	r3, #61	; 0x3d
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3360      	adds	r3, #96	; 0x60
 8002d88:	2202      	movs	r2, #2
 8002d8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f002 fe8d 	bl	8005ab6 <USB_HC_Halt>
}
 8002d9c:	e2f7      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db4:	d112      	bne.n	8002ddc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dc8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f002 fe6e 	bl	8005ab6 <USB_HC_Halt>
}
 8002dda:	e2d8      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d140      	bne.n	8002e74 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	335c      	adds	r3, #92	; 0x5c
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d111      	bne.n	8002e3e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	333d      	adds	r3, #61	; 0x3d
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2340      	movs	r3, #64	; 0x40
 8002e3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3361      	adds	r3, #97	; 0x61
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fe22 	bl	8005ab6 <USB_HC_Halt>
}
 8002e72:	e28c      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d12c      	bne.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3361      	adds	r3, #97	; 0x61
 8002e98:	2204      	movs	r2, #4
 8002e9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	333d      	adds	r3, #61	; 0x3d
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	335c      	adds	r3, #92	; 0x5c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 fdf3 	bl	8005ab6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	461a      	mov	r2, r3
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	6093      	str	r3, [r2, #8]
}
 8002ee2:	e254      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11a      	bne.n	8002f30 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	461a      	mov	r2, r3
 8002f08:	2308      	movs	r3, #8
 8002f0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	3361      	adds	r3, #97	; 0x61
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fdc4 	bl	8005ab6 <USB_HC_Halt>
}
 8002f2e:	e22e      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d140      	bne.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	335c      	adds	r3, #92	; 0x5c
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3361      	adds	r3, #97	; 0x61
 8002f66:	2203      	movs	r2, #3
 8002f68:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	333d      	adds	r3, #61	; 0x3d
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d112      	bne.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	333c      	adds	r3, #60	; 0x3c
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d108      	bne.n	8002fa4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	333d      	adds	r3, #61	; 0x3d
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fd81 	bl	8005ab6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	6093      	str	r3, [r2, #8]
}
 8002fc6:	e1e2      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b80      	cmp	r3, #128	; 0x80
 8002fdc:	d164      	bne.n	80030a8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d111      	bne.n	800300a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3361      	adds	r3, #97	; 0x61
 8002ff4:	2206      	movs	r2, #6
 8002ff6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f002 fd57 	bl	8005ab6 <USB_HC_Halt>
 8003008:	e044      	b.n	8003094 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	335c      	adds	r3, #92	; 0x5c
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	202c      	movs	r0, #44	; 0x2c
 8003022:	fb00 f303 	mul.w	r3, r0, r3
 8003026:	440b      	add	r3, r1
 8003028:	335c      	adds	r3, #92	; 0x5c
 800302a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	335c      	adds	r3, #92	; 0x5c
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d920      	bls.n	8003082 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	335c      	adds	r3, #92	; 0x5c
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3360      	adds	r3, #96	; 0x60
 8003060:	2204      	movs	r2, #4
 8003062:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	b2d9      	uxtb	r1, r3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	202c      	movs	r0, #44	; 0x2c
 800306e:	fb00 f303 	mul.w	r3, r0, r3
 8003072:	4413      	add	r3, r2
 8003074:	3360      	adds	r3, #96	; 0x60
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f004 ffbe 	bl	8007ffc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003080:	e008      	b.n	8003094 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3360      	adds	r3, #96	; 0x60
 8003090:	2202      	movs	r2, #2
 8003092:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	461a      	mov	r2, r3
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	6093      	str	r3, [r2, #8]
}
 80030a6:	e172      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d11b      	bne.n	80030f8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3361      	adds	r3, #97	; 0x61
 80030ce:	2208      	movs	r2, #8
 80030d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f002 fcea 	bl	8005ab6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f4:	6093      	str	r3, [r2, #8]
}
 80030f6:	e14a      	b.n	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	f040 813f 	bne.w	800338e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	3361      	adds	r3, #97	; 0x61
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d17d      	bne.n	8003220 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3360      	adds	r3, #96	; 0x60
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	333f      	adds	r3, #63	; 0x3f
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d00a      	beq.n	8003160 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	333f      	adds	r3, #63	; 0x3f
 8003158:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800315a:	2b03      	cmp	r3, #3
 800315c:	f040 8100 	bne.w	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d113      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3355      	adds	r3, #85	; 0x55
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2d8      	uxtb	r0, r3
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3355      	adds	r3, #85	; 0x55
 800318c:	4602      	mov	r2, r0
 800318e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80e3 	bne.w	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	334c      	adds	r3, #76	; 0x4c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80d8 	beq.w	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	334c      	adds	r3, #76	; 0x4c
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	202c      	movs	r0, #44	; 0x2c
 80031c6:	fb00 f202 	mul.w	r2, r0, r2
 80031ca:	440a      	add	r2, r1
 80031cc:	3240      	adds	r2, #64	; 0x40
 80031ce:	8812      	ldrh	r2, [r2, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	3b01      	subs	r3, #1
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	202c      	movs	r0, #44	; 0x2c
 80031da:	fb00 f202 	mul.w	r2, r0, r2
 80031de:	440a      	add	r2, r1
 80031e0:	3240      	adds	r2, #64	; 0x40
 80031e2:	8812      	ldrh	r2, [r2, #0]
 80031e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80b5 	beq.w	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3355      	adds	r3, #85	; 0x55
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	f083 0301 	eor.w	r3, r3, #1
 800320a:	b2d8      	uxtb	r0, r3
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3355      	adds	r3, #85	; 0x55
 800321a:	4602      	mov	r2, r0
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e09f      	b.n	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3361      	adds	r3, #97	; 0x61
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d109      	bne.n	8003248 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3360      	adds	r3, #96	; 0x60
 8003242:	2202      	movs	r2, #2
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e08b      	b.n	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3361      	adds	r3, #97	; 0x61
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d109      	bne.n	8003270 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3360      	adds	r3, #96	; 0x60
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e077      	b.n	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3361      	adds	r3, #97	; 0x61
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d109      	bne.n	8003298 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3360      	adds	r3, #96	; 0x60
 8003292:	2205      	movs	r2, #5
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e063      	b.n	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3361      	adds	r3, #97	; 0x61
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d009      	beq.n	80032c0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3361      	adds	r3, #97	; 0x61
 80032ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d14f      	bne.n	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	335c      	adds	r3, #92	; 0x5c
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	202c      	movs	r0, #44	; 0x2c
 80032d8:	fb00 f303 	mul.w	r3, r0, r3
 80032dc:	440b      	add	r3, r1
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	335c      	adds	r3, #92	; 0x5c
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d912      	bls.n	800331c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	335c      	adds	r3, #92	; 0x5c
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3360      	adds	r3, #96	; 0x60
 8003316:	2204      	movs	r2, #4
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e021      	b.n	8003360 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3360      	adds	r3, #96	; 0x60
 800332a:	2202      	movs	r2, #2
 800332c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003344:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800334c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335a:	461a      	mov	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2302      	movs	r3, #2
 8003370:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	b2d9      	uxtb	r1, r3
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	202c      	movs	r0, #44	; 0x2c
 800337c:	fb00 f303 	mul.w	r3, r0, r3
 8003380:	4413      	add	r3, r2
 8003382:	3360      	adds	r3, #96	; 0x60
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f004 fe37 	bl	8007ffc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800338e:	bf00      	nop
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b08a      	sub	sp, #40	; 0x28
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	0c5b      	lsrs	r3, r3, #17
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d004      	beq.n	80033dc <HCD_RXQLVL_IRQHandler+0x46>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	f000 80a9 	beq.w	800352c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033da:	e0aa      	b.n	8003532 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a6 	beq.w	8003530 <HCD_RXQLVL_IRQHandler+0x19a>
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3344      	adds	r3, #68	; 0x44
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 809b 	beq.w	8003530 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3350      	adds	r3, #80	; 0x50
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	441a      	add	r2, r3
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	202c      	movs	r0, #44	; 0x2c
 8003414:	fb00 f303 	mul.w	r3, r0, r3
 8003418:	440b      	add	r3, r1
 800341a:	334c      	adds	r3, #76	; 0x4c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d87a      	bhi.n	8003518 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	3344      	adds	r3, #68	; 0x44
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	b292      	uxth	r2, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f001 fe92 	bl	8005164 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3344      	adds	r3, #68	; 0x44
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	441a      	add	r2, r3
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	202c      	movs	r0, #44	; 0x2c
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	440b      	add	r3, r1
 8003460:	3344      	adds	r3, #68	; 0x44
 8003462:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3350      	adds	r3, #80	; 0x50
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	441a      	add	r2, r3
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	202c      	movs	r0, #44	; 0x2c
 800347e:	fb00 f303 	mul.w	r3, r0, r3
 8003482:	440b      	add	r3, r1
 8003484:	3350      	adds	r3, #80	; 0x50
 8003486:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	0cdb      	lsrs	r3, r3, #19
 8003498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3340      	adds	r3, #64	; 0x40
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d13c      	bne.n	8003530 <HCD_RXQLVL_IRQHandler+0x19a>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d039      	beq.n	8003530 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034da:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3354      	adds	r3, #84	; 0x54
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2d8      	uxtb	r0, r3
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	212c      	movs	r1, #44	; 0x2c
 800350a:	fb01 f303 	mul.w	r3, r1, r3
 800350e:	4413      	add	r3, r2
 8003510:	3354      	adds	r3, #84	; 0x54
 8003512:	4602      	mov	r2, r0
 8003514:	701a      	strb	r2, [r3, #0]
      break;
 8003516:	e00b      	b.n	8003530 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3360      	adds	r3, #96	; 0x60
 8003526:	2204      	movs	r2, #4
 8003528:	701a      	strb	r2, [r3, #0]
      break;
 800352a:	e001      	b.n	8003530 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003530:	bf00      	nop
  }
}
 8003532:	bf00      	nop
 8003534:	3728      	adds	r7, #40	; 0x28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003566:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d10b      	bne.n	800358a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d102      	bne.n	8003582 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f004 fd21 	bl	8007fc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b08      	cmp	r3, #8
 8003592:	d132      	bne.n	80035fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f043 0308 	orr.w	r3, r3, #8
 800359a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d126      	bne.n	80035f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d113      	bne.n	80035d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035b8:	d106      	bne.n	80035c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2102      	movs	r1, #2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 ff3d 	bl	8005440 <USB_InitFSLSPClkSel>
 80035c6:	e011      	b.n	80035ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2101      	movs	r1, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 ff36 	bl	8005440 <USB_InitFSLSPClkSel>
 80035d4:	e00a      	b.n	80035ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d106      	bne.n	80035ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035e4:	461a      	mov	r2, r3
 80035e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f004 fd13 	bl	8008018 <HAL_HCD_PortEnabled_Callback>
 80035f2:	e002      	b.n	80035fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f004 fd1d 	bl	8008034 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d103      	bne.n	800360c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f043 0320 	orr.w	r3, r3, #32
 800360a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003612:	461a      	mov	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e12b      	b.n	800388a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fd fa3a 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2224      	movs	r2, #36	; 0x24
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003682:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003684:	f001 fa20 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 8003688:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a81      	ldr	r2, [pc, #516]	; (8003894 <HAL_I2C_Init+0x274>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d807      	bhi.n	80036a4 <HAL_I2C_Init+0x84>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a80      	ldr	r2, [pc, #512]	; (8003898 <HAL_I2C_Init+0x278>)
 8003698:	4293      	cmp	r3, r2
 800369a:	bf94      	ite	ls
 800369c:	2301      	movls	r3, #1
 800369e:	2300      	movhi	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e006      	b.n	80036b2 <HAL_I2C_Init+0x92>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a7d      	ldr	r2, [pc, #500]	; (800389c <HAL_I2C_Init+0x27c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e0e7      	b.n	800388a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a78      	ldr	r2, [pc, #480]	; (80038a0 <HAL_I2C_Init+0x280>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a6a      	ldr	r2, [pc, #424]	; (8003894 <HAL_I2C_Init+0x274>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d802      	bhi.n	80036f4 <HAL_I2C_Init+0xd4>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3301      	adds	r3, #1
 80036f2:	e009      	b.n	8003708 <HAL_I2C_Init+0xe8>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	4a69      	ldr	r2, [pc, #420]	; (80038a4 <HAL_I2C_Init+0x284>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	3301      	adds	r3, #1
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	430b      	orrs	r3, r1
 800370e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800371a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	495c      	ldr	r1, [pc, #368]	; (8003894 <HAL_I2C_Init+0x274>)
 8003724:	428b      	cmp	r3, r1
 8003726:	d819      	bhi.n	800375c <HAL_I2C_Init+0x13c>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1e59      	subs	r1, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fbb1 f3f3 	udiv	r3, r1, r3
 8003736:	1c59      	adds	r1, r3, #1
 8003738:	f640 73fc 	movw	r3, #4092	; 0xffc
 800373c:	400b      	ands	r3, r1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_I2C_Init+0x138>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1e59      	subs	r1, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003750:	3301      	adds	r3, #1
 8003752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003756:	e051      	b.n	80037fc <HAL_I2C_Init+0x1dc>
 8003758:	2304      	movs	r3, #4
 800375a:	e04f      	b.n	80037fc <HAL_I2C_Init+0x1dc>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d111      	bne.n	8003788 <HAL_I2C_Init+0x168>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1e58      	subs	r0, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	440b      	add	r3, r1
 8003772:	fbb0 f3f3 	udiv	r3, r0, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e012      	b.n	80037ae <HAL_I2C_Init+0x18e>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e58      	subs	r0, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	0099      	lsls	r1, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	fbb0 f3f3 	udiv	r3, r0, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_Init+0x196>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e022      	b.n	80037fc <HAL_I2C_Init+0x1dc>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10e      	bne.n	80037dc <HAL_I2C_Init+0x1bc>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1e58      	subs	r0, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	440b      	add	r3, r1
 80037cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037da:	e00f      	b.n	80037fc <HAL_I2C_Init+0x1dc>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e58      	subs	r0, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	0099      	lsls	r1, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	6809      	ldr	r1, [r1, #0]
 8003800:	4313      	orrs	r3, r2
 8003802:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800382a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6911      	ldr	r1, [r2, #16]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68d2      	ldr	r2, [r2, #12]
 8003836:	4311      	orrs	r1, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	430b      	orrs	r3, r1
 800383e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	000186a0 	.word	0x000186a0
 8003898:	001e847f 	.word	0x001e847f
 800389c:	003d08ff 	.word	0x003d08ff
 80038a0:	431bde83 	.word	0x431bde83
 80038a4:	10624dd3 	.word	0x10624dd3

080038a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e128      	b.n	8003b0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a90      	ldr	r2, [pc, #576]	; (8003b14 <HAL_I2S_Init+0x26c>)
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fd f93b 	bl	8000b50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038f0:	f023 030f 	bic.w	r3, r3, #15
 80038f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2202      	movs	r2, #2
 80038fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d060      	beq.n	80039c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800390e:	2310      	movs	r3, #16
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e001      	b.n	8003918 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003914:	2320      	movs	r3, #32
 8003916:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b20      	cmp	r3, #32
 800391e:	d802      	bhi.n	8003926 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003926:	2001      	movs	r0, #1
 8003928:	f001 f9c4 	bl	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq>
 800392c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003936:	d125      	bne.n	8003984 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	fbb2 f2f3 	udiv	r2, r2, r3
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	461a      	mov	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	3305      	adds	r3, #5
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	e01f      	b.n	80039a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	fbb2 f2f3 	udiv	r2, r2, r3
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	3305      	adds	r3, #5
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	e00e      	b.n	80039a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	fbb2 f2f3 	udiv	r2, r2, r3
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	461a      	mov	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	3305      	adds	r3, #5
 80039a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4a5c      	ldr	r2, [pc, #368]	; (8003b18 <HAL_I2S_Init+0x270>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	08db      	lsrs	r3, r3, #3
 80039ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e003      	b.n	80039d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039c8:	2302      	movs	r3, #2
 80039ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d902      	bls.n	80039dc <HAL_I2S_Init+0x134>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2bff      	cmp	r3, #255	; 0xff
 80039da:	d907      	bls.n	80039ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f043 0210 	orr.w	r2, r3, #16
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e08f      	b.n	8003b0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	ea42 0103 	orr.w	r1, r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a0a:	f023 030f 	bic.w	r3, r3, #15
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6851      	ldr	r1, [r2, #4]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68d2      	ldr	r2, [r2, #12]
 8003a1c:	4311      	orrs	r1, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6992      	ldr	r2, [r2, #24]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d161      	bne.n	8003afc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a38      	ldr	r2, [pc, #224]	; (8003b1c <HAL_I2S_Init+0x274>)
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a37      	ldr	r2, [pc, #220]	; (8003b20 <HAL_I2S_Init+0x278>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d101      	bne.n	8003a4c <HAL_I2S_Init+0x1a4>
 8003a48:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <HAL_I2S_Init+0x27c>)
 8003a4a:	e001      	b.n	8003a50 <HAL_I2S_Init+0x1a8>
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	4932      	ldr	r1, [pc, #200]	; (8003b20 <HAL_I2S_Init+0x278>)
 8003a58:	428a      	cmp	r2, r1
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2S_Init+0x1b8>
 8003a5c:	4a31      	ldr	r2, [pc, #196]	; (8003b24 <HAL_I2S_Init+0x27c>)
 8003a5e:	e001      	b.n	8003a64 <HAL_I2S_Init+0x1bc>
 8003a60:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a68:	f023 030f 	bic.w	r3, r3, #15
 8003a6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2b      	ldr	r2, [pc, #172]	; (8003b20 <HAL_I2S_Init+0x278>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_I2S_Init+0x1d4>
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_I2S_Init+0x27c>)
 8003a7a:	e001      	b.n	8003a80 <HAL_I2S_Init+0x1d8>
 8003a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a80:	2202      	movs	r2, #2
 8003a82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <HAL_I2S_Init+0x278>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d101      	bne.n	8003a92 <HAL_I2S_Init+0x1ea>
 8003a8e:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_I2S_Init+0x27c>)
 8003a90:	e001      	b.n	8003a96 <HAL_I2S_Init+0x1ee>
 8003a92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa2:	d003      	beq.n	8003aac <HAL_I2S_Init+0x204>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	e001      	b.n	8003ab8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	897b      	ldrh	r3, [r7, #10]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ae4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <HAL_I2S_Init+0x278>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_I2S_Init+0x24c>
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <HAL_I2S_Init+0x27c>)
 8003af2:	e001      	b.n	8003af8 <HAL_I2S_Init+0x250>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af8:	897a      	ldrh	r2, [r7, #10]
 8003afa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	08003c1f 	.word	0x08003c1f
 8003b18:	cccccccd 	.word	0xcccccccd
 8003b1c:	08003d35 	.word	0x08003d35
 8003b20:	40003800 	.word	0x40003800
 8003b24:	40003400 	.word	0x40003400

08003b28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10e      	bne.n	8003bb8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffb8 	bl	8003b28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10e      	bne.n	8003c16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff93 	bl	8003b3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d13a      	bne.n	8003cb0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d109      	bne.n	8003c58 <I2S_IRQHandler+0x3a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d102      	bne.n	8003c58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffb4 	bl	8003bc0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d126      	bne.n	8003cb0 <I2S_IRQHandler+0x92>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d11f      	bne.n	8003cb0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	f043 0202 	orr.w	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ff50 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d136      	bne.n	8003d2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d109      	bne.n	8003cda <I2S_IRQHandler+0xbc>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd0:	2b80      	cmp	r3, #128	; 0x80
 8003cd2:	d102      	bne.n	8003cda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff45 	bl	8003b64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d122      	bne.n	8003d2a <I2S_IRQHandler+0x10c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d11b      	bne.n	8003d2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f043 0204 	orr.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff13 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a92      	ldr	r2, [pc, #584]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d4e:	4b92      	ldr	r3, [pc, #584]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d50:	e001      	b.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a8b      	ldr	r2, [pc, #556]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d6c:	4b8a      	ldr	r3, [pc, #552]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d6e:	e001      	b.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d80:	d004      	beq.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8099 	bne.w	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d107      	bne.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f925 	bl	8003ff0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9c8 	bl	8004150 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d13a      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d035      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dde:	4b6e      	ldr	r3, [pc, #440]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de0:	e001      	b.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4969      	ldr	r1, [pc, #420]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dee:	428b      	cmp	r3, r1
 8003df0:	d101      	bne.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003df2:	4b69      	ldr	r3, [pc, #420]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df4:	e001      	b.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fe88 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	f040 80c3 	bne.w	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80bd 	beq.w	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a49      	ldr	r2, [pc, #292]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e72:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4944      	ldr	r1, [pc, #272]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e86:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fe4a 	bl	8003b50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ebc:	e089      	b.n	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d107      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8be 	bl	8004054 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f8fd 	bl	80040ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d12f      	bne.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02a      	beq.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f20:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f22:	e001      	b.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4919      	ldr	r1, [pc, #100]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f36:	e001      	b.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f043 0202 	orr.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fdfa 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d136      	bne.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d031      	beq.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f7a:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4902      	ldr	r1, [pc, #8]	; (8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8a:	428b      	cmp	r3, r1
 8003f8c:	d106      	bne.n	8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f8e:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f90:	e006      	b.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f92:	bf00      	nop
 8003f94:	40003800 	.word	0x40003800
 8003f98:	40003400 	.word	0x40003400
 8003f9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fa4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f043 0204 	orr.w	r2, r3, #4
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fdc0 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fd2:	bf00      	nop
}
 8003fd4:	bf00      	nop
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	1c99      	adds	r1, r3, #2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6251      	str	r1, [r2, #36]	; 0x24
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d113      	bne.n	800404a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004030:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ffc9 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c99      	adds	r1, r3, #2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6251      	str	r1, [r2, #36]	; 0x24
 8004066:	8819      	ldrh	r1, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <I2SEx_TxISR_I2SExt+0x22>
 8004072:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 8004074:	e001      	b.n	800407a <I2SEx_TxISR_I2SExt+0x26>
 8004076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407a:	460a      	mov	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d121      	bne.n	80040da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <I2SEx_TxISR_I2SExt+0x50>
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 80040a2:	e001      	b.n	80040a8 <I2SEx_TxISR_I2SExt+0x54>
 80040a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	490d      	ldr	r1, [pc, #52]	; (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d101      	bne.n	80040b8 <I2SEx_TxISR_I2SExt+0x64>
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 80040b6:	e001      	b.n	80040bc <I2SEx_TxISR_I2SExt+0x68>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d106      	bne.n	80040da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff81 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40003800 	.word	0x40003800
 80040e8:	40003400 	.word	0x40003400

080040ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68d8      	ldr	r0, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	1c99      	adds	r1, r3, #2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004104:	b282      	uxth	r2, r0
 8004106:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d113      	bne.n	8004148 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800412e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ff4a 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <I2SEx_RxISR_I2SExt+0x16>
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 8004164:	e001      	b.n	800416a <I2SEx_RxISR_I2SExt+0x1a>
 8004166:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800416a:	68d8      	ldr	r0, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	1c99      	adds	r1, r3, #2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004176:	b282      	uxth	r2, r0
 8004178:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d121      	bne.n	80041d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a12      	ldr	r2, [pc, #72]	; (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <I2SEx_RxISR_I2SExt+0x50>
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 800419e:	e001      	b.n	80041a4 <I2SEx_RxISR_I2SExt+0x54>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	490d      	ldr	r1, [pc, #52]	; (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d101      	bne.n	80041b4 <I2SEx_RxISR_I2SExt+0x64>
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 80041b2:	e001      	b.n	80041b8 <I2SEx_RxISR_I2SExt+0x68>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff03 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40003800 	.word	0x40003800
 80041e4:	40003400 	.word	0x40003400

080041e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e267      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d075      	beq.n	80042f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004206:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b04      	cmp	r3, #4
 8004210:	d00c      	beq.n	800422c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004212:	4b85      	ldr	r3, [pc, #532]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421a:	2b08      	cmp	r3, #8
 800421c:	d112      	bne.n	8004244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421e:	4b82      	ldr	r3, [pc, #520]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422a:	d10b      	bne.n	8004244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	4b7e      	ldr	r3, [pc, #504]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d05b      	beq.n	80042f0 <HAL_RCC_OscConfig+0x108>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d157      	bne.n	80042f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e242      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x74>
 800424e:	4b76      	ldr	r3, [pc, #472]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a75      	ldr	r2, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e01d      	b.n	8004298 <HAL_RCC_OscConfig+0xb0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x98>
 8004266:	4b70      	ldr	r3, [pc, #448]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a6f      	ldr	r2, [pc, #444]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800426c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b6d      	ldr	r3, [pc, #436]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6c      	ldr	r2, [pc, #432]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0xb0>
 8004280:	4b69      	ldr	r3, [pc, #420]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a68      	ldr	r2, [pc, #416]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b66      	ldr	r3, [pc, #408]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a65      	ldr	r2, [pc, #404]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fd f842 	bl	8001328 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fd f83e 	bl	8001328 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e207      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0xc0>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fd f82e 	bl	8001328 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d0:	f7fd f82a 	bl	8001328 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1f3      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	4b51      	ldr	r3, [pc, #324]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0xe8>
 80042ee:	e000      	b.n	80042f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d063      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042fe:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004312:	2b08      	cmp	r3, #8
 8004314:	d11c      	bne.n	8004350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004316:	4b44      	ldr	r3, [pc, #272]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d116      	bne.n	8004350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_RCC_OscConfig+0x152>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d001      	beq.n	800433a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e1c7      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4937      	ldr	r1, [pc, #220]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434e:	e03a      	b.n	80043c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d020      	beq.n	800439a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004358:	4b34      	ldr	r3, [pc, #208]	; (800442c <HAL_RCC_OscConfig+0x244>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fc ffe3 	bl	8001328 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004366:	f7fc ffdf 	bl	8001328 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e1a8      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b28      	ldr	r3, [pc, #160]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4925      	ldr	r1, [pc, #148]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]
 8004398:	e015      	b.n	80043c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439a:	4b24      	ldr	r3, [pc, #144]	; (800442c <HAL_RCC_OscConfig+0x244>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fc ffc2 	bl	8001328 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a8:	f7fc ffbe 	bl	8001328 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e187      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d036      	beq.n	8004440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d016      	beq.n	8004408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <HAL_RCC_OscConfig+0x248>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fc ffa2 	bl	8001328 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fc ff9e 	bl	8001328 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e167      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_OscConfig+0x240>)
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x200>
 8004406:	e01b      	b.n	8004440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_OscConfig+0x248>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fc ff8b 	bl	8001328 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	e00e      	b.n	8004434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004416:	f7fc ff87 	bl	8001328 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d907      	bls.n	8004434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e150      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
 8004428:	40023800 	.word	0x40023800
 800442c:	42470000 	.word	0x42470000
 8004430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	4b88      	ldr	r3, [pc, #544]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ea      	bne.n	8004416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8097 	beq.w	800457c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004452:	4b81      	ldr	r3, [pc, #516]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10f      	bne.n	800447e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	4b7d      	ldr	r3, [pc, #500]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	4a7c      	ldr	r2, [pc, #496]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446c:	6413      	str	r3, [r2, #64]	; 0x40
 800446e:	4b7a      	ldr	r3, [pc, #488]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	60bb      	str	r3, [r7, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447a:	2301      	movs	r3, #1
 800447c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447e:	4b77      	ldr	r3, [pc, #476]	; (800465c <HAL_RCC_OscConfig+0x474>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d118      	bne.n	80044bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448a:	4b74      	ldr	r3, [pc, #464]	; (800465c <HAL_RCC_OscConfig+0x474>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a73      	ldr	r2, [pc, #460]	; (800465c <HAL_RCC_OscConfig+0x474>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004496:	f7fc ff47 	bl	8001328 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449e:	f7fc ff43 	bl	8001328 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e10c      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_RCC_OscConfig+0x474>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2ea>
 80044c4:	4b64      	ldr	r3, [pc, #400]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a63      	ldr	r2, [pc, #396]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
 80044d0:	e01c      	b.n	800450c <HAL_RCC_OscConfig+0x324>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b05      	cmp	r3, #5
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x30c>
 80044da:	4b5f      	ldr	r3, [pc, #380]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	4a5e      	ldr	r2, [pc, #376]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	6713      	str	r3, [r2, #112]	; 0x70
 80044e6:	4b5c      	ldr	r3, [pc, #368]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a5b      	ldr	r2, [pc, #364]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0x324>
 80044f4:	4b58      	ldr	r3, [pc, #352]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a57      	ldr	r2, [pc, #348]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	4b55      	ldr	r3, [pc, #340]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a54      	ldr	r2, [pc, #336]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004506:	f023 0304 	bic.w	r3, r3, #4
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fc ff08 	bl	8001328 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fc ff04 	bl	8001328 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0cb      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004532:	4b49      	ldr	r3, [pc, #292]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0ee      	beq.n	800451c <HAL_RCC_OscConfig+0x334>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004540:	f7fc fef2 	bl	8001328 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004546:	e00a      	b.n	800455e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fc feee 	bl	8001328 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e0b5      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455e:	4b3e      	ldr	r3, [pc, #248]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ee      	bne.n	8004548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004570:	4b39      	ldr	r3, [pc, #228]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	4a38      	ldr	r2, [pc, #224]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a1 	beq.w	80046c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004586:	4b34      	ldr	r3, [pc, #208]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b08      	cmp	r3, #8
 8004590:	d05c      	beq.n	800464c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d141      	bne.n	800461e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <HAL_RCC_OscConfig+0x478>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fc fec2 	bl	8001328 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fc febe 	bl	8001328 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e087      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	4b27      	ldr	r3, [pc, #156]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	019b      	lsls	r3, r3, #6
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	3b01      	subs	r3, #1
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	061b      	lsls	r3, r3, #24
 80045ea:	491b      	ldr	r1, [pc, #108]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x478>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fc fe97 	bl	8001328 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fc fe93 	bl	8001328 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e05c      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x416>
 800461c:	e054      	b.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCC_OscConfig+0x478>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fc fe80 	bl	8001328 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800462c:	f7fc fe7c 	bl	8001328 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e045      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_RCC_OscConfig+0x470>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x444>
 800464a:	e03d      	b.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e038      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
 8004658:	40023800 	.word	0x40023800
 800465c:	40007000 	.word	0x40007000
 8004660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004664:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <HAL_RCC_OscConfig+0x4ec>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d028      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d121      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d11a      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800469a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	3b01      	subs	r3, #1
 80046ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800

080046d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0cc      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046ec:	4b68      	ldr	r3, [pc, #416]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d90c      	bls.n	8004714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b65      	ldr	r3, [pc, #404]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b63      	ldr	r3, [pc, #396]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0b8      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800472c:	4b59      	ldr	r3, [pc, #356]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a58      	ldr	r2, [pc, #352]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004744:	4b53      	ldr	r3, [pc, #332]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4a52      	ldr	r2, [pc, #328]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800474e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004750:	4b50      	ldr	r3, [pc, #320]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	494d      	ldr	r1, [pc, #308]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d044      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b47      	ldr	r3, [pc, #284]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d119      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004792:	2b03      	cmp	r3, #3
 8004794:	d107      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004796:	4b3f      	ldr	r3, [pc, #252]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e06f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e067      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b6:	4b37      	ldr	r3, [pc, #220]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f023 0203 	bic.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4934      	ldr	r1, [pc, #208]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c8:	f7fc fdae 	bl	8001328 <HAL_GetTick>
 80047cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d0:	f7fc fdaa 	bl	8001328 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e04f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 020c 	and.w	r2, r3, #12
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d1eb      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d20c      	bcs.n	8004820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004806:	4b22      	ldr	r3, [pc, #136]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e032      	b.n	8004886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800482c:	4b19      	ldr	r3, [pc, #100]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4916      	ldr	r1, [pc, #88]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	490e      	ldr	r1, [pc, #56]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800485e:	f000 f821 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 8004862:	4602      	mov	r2, r0
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	490a      	ldr	r1, [pc, #40]	; (8004898 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a09      	ldr	r2, [pc, #36]	; (800489c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1c8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fc fd0e 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023c00 	.word	0x40023c00
 8004894:	40023800 	.word	0x40023800
 8004898:	080095b0 	.word	0x080095b0
 800489c:	20000000 	.word	0x20000000
 80048a0:	20000004 	.word	0x20000004

080048a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a8:	b094      	sub	sp, #80	; 0x50
 80048aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44
 80048b0:	2300      	movs	r3, #0
 80048b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b4:	2300      	movs	r3, #0
 80048b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048bc:	4b79      	ldr	r3, [pc, #484]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d00d      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x40>
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	f200 80e1 	bhi.w	8004a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x34>
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d003      	beq.n	80048de <HAL_RCC_GetSysClockFreq+0x3a>
 80048d6:	e0db      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d8:	4b73      	ldr	r3, [pc, #460]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048dc:	e0db      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048de:	4b73      	ldr	r3, [pc, #460]	; (8004aac <HAL_RCC_GetSysClockFreq+0x208>)
 80048e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e2:	e0d8      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e4:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ee:	4b6d      	ldr	r3, [pc, #436]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d063      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b6a      	ldr	r3, [pc, #424]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	2200      	movs	r2, #0
 8004902:	63bb      	str	r3, [r7, #56]	; 0x38
 8004904:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	633b      	str	r3, [r7, #48]	; 0x30
 800490e:	2300      	movs	r3, #0
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
 8004912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	0159      	lsls	r1, r3, #5
 8004924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004928:	0150      	lsls	r0, r2, #5
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4621      	mov	r1, r4
 8004930:	1a51      	subs	r1, r2, r1
 8004932:	6139      	str	r1, [r7, #16]
 8004934:	4629      	mov	r1, r5
 8004936:	eb63 0301 	sbc.w	r3, r3, r1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004948:	4659      	mov	r1, fp
 800494a:	018b      	lsls	r3, r1, #6
 800494c:	4651      	mov	r1, sl
 800494e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004952:	4651      	mov	r1, sl
 8004954:	018a      	lsls	r2, r1, #6
 8004956:	4651      	mov	r1, sl
 8004958:	ebb2 0801 	subs.w	r8, r2, r1
 800495c:	4659      	mov	r1, fp
 800495e:	eb63 0901 	sbc.w	r9, r3, r1
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004976:	4690      	mov	r8, r2
 8004978:	4699      	mov	r9, r3
 800497a:	4623      	mov	r3, r4
 800497c:	eb18 0303 	adds.w	r3, r8, r3
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	462b      	mov	r3, r5
 8004984:	eb49 0303 	adc.w	r3, r9, r3
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004996:	4629      	mov	r1, r5
 8004998:	024b      	lsls	r3, r1, #9
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a0:	4621      	mov	r1, r4
 80049a2:	024a      	lsls	r2, r1, #9
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049aa:	2200      	movs	r2, #0
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b4:	f7fb fc08 	bl	80001c8 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	e058      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b38      	ldr	r3, [pc, #224]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	2200      	movs	r2, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	4611      	mov	r1, r2
 80049ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049d2:	623b      	str	r3, [r7, #32]
 80049d4:	2300      	movs	r3, #0
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
 80049d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049dc:	4642      	mov	r2, r8
 80049de:	464b      	mov	r3, r9
 80049e0:	f04f 0000 	mov.w	r0, #0
 80049e4:	f04f 0100 	mov.w	r1, #0
 80049e8:	0159      	lsls	r1, r3, #5
 80049ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ee:	0150      	lsls	r0, r2, #5
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4641      	mov	r1, r8
 80049f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049fa:	4649      	mov	r1, r9
 80049fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a14:	ebb2 040a 	subs.w	r4, r2, sl
 8004a18:	eb63 050b 	sbc.w	r5, r3, fp
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	00eb      	lsls	r3, r5, #3
 8004a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2a:	00e2      	lsls	r2, r4, #3
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	461d      	mov	r5, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	18e3      	adds	r3, r4, r3
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	464b      	mov	r3, r9
 8004a38:	eb45 0303 	adc.w	r3, r5, r3
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	028b      	lsls	r3, r1, #10
 8004a4e:	4621      	mov	r1, r4
 8004a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a54:	4621      	mov	r1, r4
 8004a56:	028a      	lsls	r2, r1, #10
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	61fa      	str	r2, [r7, #28]
 8004a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a68:	f7fb fbae 	bl	80001c8 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3750      	adds	r7, #80	; 0x50
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	007a1200 	.word	0x007a1200

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000000 	.word	0x20000000

08004ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004acc:	f7ff fff0 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0a9b      	lsrs	r3, r3, #10
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	080095c0 	.word	0x080095c0

08004af0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d105      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d035      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b18:	4b62      	ldr	r3, [pc, #392]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1e:	f7fc fc03 	bl	8001328 <HAL_GetTick>
 8004b22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b26:	f7fc fbff 	bl	8001328 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e0b0      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b38:	4b5b      	ldr	r3, [pc, #364]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	019a      	lsls	r2, r3, #6
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	071b      	lsls	r3, r3, #28
 8004b50:	4955      	ldr	r1, [pc, #340]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b58:	4b52      	ldr	r3, [pc, #328]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5e:	f7fc fbe3 	bl	8001328 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b66:	f7fc fbdf 	bl	8001328 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e090      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b78:	4b4b      	ldr	r3, [pc, #300]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8083 	beq.w	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	4b44      	ldr	r3, [pc, #272]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	4a43      	ldr	r2, [pc, #268]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba2:	4b41      	ldr	r3, [pc, #260]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bae:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a3e      	ldr	r2, [pc, #248]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bba:	f7fc fbb5 	bl	8001328 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bc2:	f7fc fbb1 	bl	8001328 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e062      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bd4:	4b35      	ldr	r3, [pc, #212]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004be0:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02f      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d028      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c08:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0e:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c1a:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d114      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c26:	f7fc fb7f 	bl	8001328 <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2c:	e00a      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c2e:	f7fc fb7b 	bl	8001328 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e02a      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0ee      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5c:	d10d      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c72:	490d      	ldr	r1, [pc, #52]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	608b      	str	r3, [r1, #8]
 8004c78:	e005      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c84:	6093      	str	r3, [r2, #8]
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c92:	4905      	ldr	r1, [pc, #20]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	42470068 	.word	0x42470068
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	42470e40 	.word	0x42470e40

08004cb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d13e      	bne.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d12f      	bne.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cea:	617b      	str	r3, [r7, #20]
          break;
 8004cec:	e02f      	b.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cee:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfa:	d108      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cfc:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d04:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	e007      	b.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d24:	099b      	lsrs	r3, r3, #6
 8004d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	fb02 f303 	mul.w	r3, r2, r3
 8004d30:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d38:	0f1b      	lsrs	r3, r3, #28
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]
          break;
 8004d46:	e002      	b.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
          break;
 8004d4c:	bf00      	nop
        }
      }
      break;
 8004d4e:	bf00      	nop
    }
  }
  return frequency;
 8004d50:	697b      	ldr	r3, [r7, #20]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800
 8004d64:	00bb8000 	.word	0x00bb8000
 8004d68:	007a1200 	.word	0x007a1200
 8004d6c:	00f42400 	.word	0x00f42400

08004d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07b      	b.n	8004e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d92:	d009      	beq.n	8004da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	61da      	str	r2, [r3, #28]
 8004d9a:	e005      	b.n	8004da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb ff44 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2c:	ea42 0103 	orr.w	r1, r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0104 	and.w	r1, r3, #4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f003 0210 	and.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e82:	b084      	sub	sp, #16
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	f107 001c 	add.w	r0, r7, #28
 8004e90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d122      	bne.n	8004ee0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d105      	bne.n	8004ed4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f9bf 	bl	8005258 <USB_CoreReset>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	e01a      	b.n	8004f16 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f9b3 	bl	8005258 <USB_CoreReset>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	639a      	str	r2, [r3, #56]	; 0x38
 8004f08:	e005      	b.n	8004f16 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d10b      	bne.n	8004f34 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f043 0206 	orr.w	r2, r3, #6
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f40:	b004      	add	sp, #16
 8004f42:	4770      	bx	lr

08004f44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f043 0201 	orr.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d115      	bne.n	8004fd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f7fc f9c2 	bl	8001340 <HAL_Delay>
      ms++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f939 	bl	800523a <USB_GetMode>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d01e      	beq.n	800500c <USB_SetCurrentMode+0x84>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b31      	cmp	r3, #49	; 0x31
 8004fd2:	d9f0      	bls.n	8004fb6 <USB_SetCurrentMode+0x2e>
 8004fd4:	e01a      	b.n	800500c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d115      	bne.n	8005008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f7fc f9a9 	bl	8001340 <HAL_Delay>
      ms++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f920 	bl	800523a <USB_GetMode>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <USB_SetCurrentMode+0x84>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b31      	cmp	r3, #49	; 0x31
 8005004:	d9f0      	bls.n	8004fe8 <USB_SetCurrentMode+0x60>
 8005006:	e001      	b.n	800500c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e005      	b.n	8005018 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b32      	cmp	r3, #50	; 0x32
 8005010:	d101      	bne.n	8005016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a13      	ldr	r2, [pc, #76]	; (8005084 <USB_FlushTxFifo+0x64>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e01b      	b.n	8005078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	daf2      	bge.n	800502e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	019b      	lsls	r3, r3, #6
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a08      	ldr	r2, [pc, #32]	; (8005084 <USB_FlushTxFifo+0x64>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e006      	b.n	8005078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b20      	cmp	r3, #32
 8005074:	d0f0      	beq.n	8005058 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	00030d40 	.word	0x00030d40

08005088 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <USB_FlushRxFifo+0x5c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e018      	b.n	80050d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	daf2      	bge.n	8005094 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2210      	movs	r2, #16
 80050b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <USB_FlushRxFifo+0x5c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e006      	b.n	80050d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	d0f0      	beq.n	80050b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	00030d40 	.word	0x00030d40

080050e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b089      	sub	sp, #36	; 0x24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	460b      	mov	r3, r1
 80050f8:	71fb      	strb	r3, [r7, #7]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d123      	bne.n	8005156 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800510e:	88bb      	ldrh	r3, [r7, #4]
 8005110:	3303      	adds	r3, #3
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e018      	b.n	800514e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	031a      	lsls	r2, r3, #12
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005128:	461a      	mov	r2, r3
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	3301      	adds	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3301      	adds	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	3301      	adds	r3, #1
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	429a      	cmp	r2, r3
 8005154:	d3e2      	bcc.n	800511c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3724      	adds	r7, #36	; 0x24
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005164:	b480      	push	{r7}
 8005166:	b08b      	sub	sp, #44	; 0x2c
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	089b      	lsrs	r3, r3, #2
 800517e:	b29b      	uxth	r3, r3
 8005180:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800518a:	2300      	movs	r3, #0
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	e014      	b.n	80051ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	601a      	str	r2, [r3, #0]
    pDest++;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	3301      	adds	r3, #1
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	3301      	adds	r3, #1
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	3301      	adds	r3, #1
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	3301      	adds	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	3301      	adds	r3, #1
 80051b8:	623b      	str	r3, [r7, #32]
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d3e6      	bcc.n	8005190 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051c2:	8bfb      	ldrh	r3, [r7, #30]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01e      	beq.n	8005206 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d2:	461a      	mov	r2, r3
 80051d4:	f107 0310 	add.w	r3, r7, #16
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	701a      	strb	r2, [r3, #0]
      i++;
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	3301      	adds	r3, #1
 80051f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	3301      	adds	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051fa:	8bfb      	ldrh	r3, [r7, #30]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005200:	8bfb      	ldrh	r3, [r7, #30]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ea      	bne.n	80051dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005208:	4618      	mov	r0, r3
 800520a:	372c      	adds	r7, #44	; 0x2c
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4013      	ands	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800522c:	68fb      	ldr	r3, [r7, #12]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0301 	and.w	r3, r3, #1
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <USB_CoreReset+0x64>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e01b      	b.n	80052ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	daf2      	bge.n	8005264 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3301      	adds	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <USB_CoreReset+0x64>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d901      	bls.n	80052a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d0f0      	beq.n	800528e <USB_CoreReset+0x36>

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	00030d40 	.word	0x00030d40

080052c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052c0:	b084      	sub	sp, #16
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b086      	sub	sp, #24
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052e0:	461a      	mov	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d018      	beq.n	8005348 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10a      	bne.n	8005332 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800532a:	f043 0304 	orr.w	r3, r3, #4
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e014      	b.n	800535c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e009      	b.n	800535c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005356:	f023 0304 	bic.w	r3, r3, #4
 800535a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800535c:	2110      	movs	r1, #16
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fe5e 	bl	8005020 <USB_FlushTxFifo>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fe8a 	bl	8005088 <USB_FlushRxFifo>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	e015      	b.n	80053b0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	461a      	mov	r2, r3
 8005392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005396:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	461a      	mov	r2, r3
 80053a6:	2300      	movs	r3, #0
 80053a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3301      	adds	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d3e5      	bcc.n	8005384 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a13      	ldr	r2, [pc, #76]	; (800542c <USB_HostInit+0x16c>)
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a13      	ldr	r2, [pc, #76]	; (8005430 <USB_HostInit+0x170>)
 80053e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053e8:	e009      	b.n	80053fe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a10      	ldr	r2, [pc, #64]	; (8005434 <USB_HostInit+0x174>)
 80053f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a0f      	ldr	r2, [pc, #60]	; (8005438 <USB_HostInit+0x178>)
 80053fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f043 0210 	orr.w	r2, r3, #16
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699a      	ldr	r2, [r3, #24]
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <USB_HostInit+0x17c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800541c:	7dfb      	ldrb	r3, [r7, #23]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005428:	b004      	add	sp, #16
 800542a:	4770      	bx	lr
 800542c:	01000200 	.word	0x01000200
 8005430:	00e00300 	.word	0x00e00300
 8005434:	00600080 	.word	0x00600080
 8005438:	004000e0 	.word	0x004000e0
 800543c:	a3200008 	.word	0xa3200008

08005440 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	68f9      	ldr	r1, [r7, #12]
 8005474:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d107      	bne.n	8005492 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005488:	461a      	mov	r2, r3
 800548a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800548e:	6053      	str	r3, [r2, #4]
 8005490:	e009      	b.n	80054a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d106      	bne.n	80054a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800549e:	461a      	mov	r2, r3
 80054a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80054a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054e4:	2064      	movs	r0, #100	; 0x64
 80054e6:	f7fb ff2b 	bl	8001340 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054f8:	200a      	movs	r0, #10
 80054fa:	f7fb ff21 	bl	8001340 <HAL_Delay>

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800552c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <USB_DriveVbus+0x44>
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d106      	bne.n	800554c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800554a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d109      	bne.n	800556c <USB_DriveVbus+0x64>
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800556a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	0c5b      	lsrs	r3, r3, #17
 8005598:	f003 0303 	and.w	r3, r3, #3
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	b29b      	uxth	r3, r3
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	70fb      	strb	r3, [r7, #3]
 80055de:	460b      	mov	r3, r1
 80055e0:	70bb      	strb	r3, [r7, #2]
 80055e2:	4613      	mov	r3, r2
 80055e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fa:	461a      	mov	r2, r3
 80055fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005600:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005602:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005606:	2b03      	cmp	r3, #3
 8005608:	d87e      	bhi.n	8005708 <USB_HC_Init+0x13c>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <USB_HC_Init+0x44>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005621 	.word	0x08005621
 8005614:	080056cb 	.word	0x080056cb
 8005618:	08005621 	.word	0x08005621
 800561c:	0800568d 	.word	0x0800568d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562c:	461a      	mov	r2, r3
 800562e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005632:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005634:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005638:	2b00      	cmp	r3, #0
 800563a:	da10      	bge.n	800565e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	0151      	lsls	r1, r2, #5
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	440a      	add	r2, r1
 8005652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800565c:	e057      	b.n	800570e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d051      	beq.n	800570e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4413      	add	r3, r2
 8005672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	440a      	add	r2, r1
 8005680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005684:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005688:	60d3      	str	r3, [r2, #12]
      break;
 800568a:	e040      	b.n	800570e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005698:	461a      	mov	r2, r3
 800569a:	f240 639d 	movw	r3, #1693	; 0x69d
 800569e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da34      	bge.n	8005712 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056c8:	e023      	b.n	8005712 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d6:	461a      	mov	r2, r3
 80056d8:	f240 2325 	movw	r3, #549	; 0x225
 80056dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	da17      	bge.n	8005716 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	78fa      	ldrb	r2, [r7, #3]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005700:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005704:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005706:	e006      	b.n	8005716 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	77fb      	strb	r3, [r7, #31]
      break;
 800570c:	e004      	b.n	8005718 <USB_HC_Init+0x14c>
      break;
 800570e:	bf00      	nop
 8005710:	e002      	b.n	8005718 <USB_HC_Init+0x14c>
      break;
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <USB_HC_Init+0x14c>
      break;
 8005716:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	440a      	add	r2, r1
 800572e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005732:	f043 0302 	orr.w	r3, r3, #2
 8005736:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	2101      	movs	r1, #1
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	6939      	ldr	r1, [r7, #16]
 800574e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005752:	4313      	orrs	r3, r2
 8005754:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005762:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005766:	2b00      	cmp	r3, #0
 8005768:	da03      	bge.n	8005772 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800576a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e001      	b.n	8005776 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff feff 	bl	800557a <USB_GetHostSpeed>
 800577c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800577e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005782:	2b02      	cmp	r3, #2
 8005784:	d106      	bne.n	8005794 <USB_HC_Init+0x1c8>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d003      	beq.n	8005794 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800578c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e001      	b.n	8005798 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005798:	787b      	ldrb	r3, [r7, #1]
 800579a:	059b      	lsls	r3, r3, #22
 800579c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057a0:	78bb      	ldrb	r3, [r7, #2]
 80057a2:	02db      	lsls	r3, r3, #11
 80057a4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ae:	049b      	lsls	r3, r3, #18
 80057b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	0159      	lsls	r1, r3, #5
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	440b      	add	r3, r1
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057d4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d003      	beq.n	80057e6 <USB_HC_Init+0x21a>
 80057de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d10f      	bne.n	8005806 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005800:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005804:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005806:	7ffb      	ldrb	r3, [r7, #31]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	; 0x30
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	785b      	ldrb	r3, [r3, #1]
 8005826:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800582c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d02d      	beq.n	8005896 <USB_HC_StartXfer+0x86>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	791b      	ldrb	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d129      	bne.n	8005896 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d117      	bne.n	8005878 <USB_HC_StartXfer+0x68>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	79db      	ldrb	r3, [r3, #7]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <USB_HC_StartXfer+0x48>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	79db      	ldrb	r3, [r3, #7]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d10f      	bne.n	8005878 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	4413      	add	r3, r2
 8005860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	6a3a      	ldr	r2, [r7, #32]
 800586c:	440a      	add	r2, r1
 800586e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <USB_HC_StartXfer+0x86>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	795b      	ldrb	r3, [r3, #5]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d107      	bne.n	8005896 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	4619      	mov	r1, r3
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fa0f 	bl	8005cb0 <USB_DoPing>
      return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e0f8      	b.n	8005a88 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	8912      	ldrh	r2, [r2, #8]
 80058a6:	4413      	add	r3, r2
 80058a8:	3b01      	subs	r3, #1
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	8912      	ldrh	r2, [r2, #8]
 80058ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80058b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80058b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058b6:	8b7b      	ldrh	r3, [r7, #26]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d90b      	bls.n	80058d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80058bc:	8b7b      	ldrh	r3, [r7, #26]
 80058be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	8912      	ldrh	r2, [r2, #8]
 80058c6:	fb03 f202 	mul.w	r2, r3, r2
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	611a      	str	r2, [r3, #16]
 80058ce:	e001      	b.n	80058d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80058d0:	2301      	movs	r3, #1
 80058d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	78db      	ldrb	r3, [r3, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d007      	beq.n	80058ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	8912      	ldrh	r2, [r2, #8]
 80058e2:	fb03 f202 	mul.w	r2, r3, r2
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	611a      	str	r2, [r3, #16]
 80058ea:	e003      	b.n	80058f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058fe:	04d9      	lsls	r1, r3, #19
 8005900:	4b63      	ldr	r3, [pc, #396]	; (8005a90 <USB_HC_StartXfer+0x280>)
 8005902:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005904:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	7a9b      	ldrb	r3, [r3, #10]
 800590a:	075b      	lsls	r3, r3, #29
 800590c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	0148      	lsls	r0, r1, #5
 8005914:	6a39      	ldr	r1, [r7, #32]
 8005916:	4401      	add	r1, r0
 8005918:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800591c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800591e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	68d9      	ldr	r1, [r3, #12]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	460a      	mov	r2, r1
 8005938:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf0c      	ite	eq
 800594a:	2301      	moveq	r3, #1
 800594c:	2300      	movne	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	440a      	add	r2, r1
 8005968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005970:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	7e7b      	ldrb	r3, [r7, #25]
 8005982:	075b      	lsls	r3, r3, #29
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	0148      	lsls	r0, r1, #5
 8005988:	6a39      	ldr	r1, [r7, #32]
 800598a:	4401      	add	r1, r0
 800598c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005990:	4313      	orrs	r3, r2
 8005992:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059aa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	78db      	ldrb	r3, [r3, #3]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	e003      	b.n	80059c6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059c4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059cc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059da:	461a      	mov	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e04e      	b.n	8005a88 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	78db      	ldrb	r3, [r3, #3]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d149      	bne.n	8005a86 <USB_HC_StartXfer+0x276>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d045      	beq.n	8005a86 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	79db      	ldrb	r3, [r3, #7]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d830      	bhi.n	8005a64 <USB_HC_StartXfer+0x254>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <USB_HC_StartXfer+0x1f8>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a19 	.word	0x08005a19
 8005a0c:	08005a3d 	.word	0x08005a3d
 8005a10:	08005a19 	.word	0x08005a19
 8005a14:	08005a3d 	.word	0x08005a3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a22:	8afa      	ldrh	r2, [r7, #22]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d91c      	bls.n	8005a68 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a3a:	e015      	b.n	8005a68 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	3303      	adds	r3, #3
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a46:	8afa      	ldrh	r2, [r7, #22]
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d90a      	bls.n	8005a6c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a62:	e003      	b.n	8005a6c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <USB_HC_StartXfer+0x25e>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <USB_HC_StartXfer+0x25e>
        break;
 8005a6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	68d9      	ldr	r1, [r3, #12]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	785a      	ldrb	r2, [r3, #1]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	9000      	str	r0, [sp, #0]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff fb31 	bl	80050e8 <USB_WritePacket>
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3728      	adds	r7, #40	; 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	1ff80000 	.word	0x1ff80000

08005a94 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	b29b      	uxth	r3, r3
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b089      	sub	sp, #36	; 0x24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	0c9b      	lsrs	r3, r3, #18
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	0fdb      	lsrs	r3, r3, #31
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d104      	bne.n	8005b10 <USB_HC_Halt+0x5a>
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e0c8      	b.n	8005ca2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <USB_HC_Halt+0x66>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d163      	bne.n	8005be4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	0151      	lsls	r1, r2, #5
 8005b2e:	69fa      	ldr	r2, [r7, #28]
 8005b30:	440a      	add	r2, r1
 8005b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f040 80ab 	bne.w	8005ca0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d133      	bne.n	8005bbe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba2:	d81d      	bhi.n	8005be0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bba:	d0ec      	beq.n	8005b96 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bbc:	e070      	b.n	8005ca0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bdc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bde:	e05f      	b.n	8005ca0 <USB_HC_Halt+0x1ea>
            break;
 8005be0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005be2:	e05d      	b.n	8005ca0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c02:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d133      	bne.n	8005c7c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c52:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c60:	d81d      	bhi.n	8005c9e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c78:	d0ec      	beq.n	8005c54 <USB_HC_Halt+0x19e>
 8005c7a:	e011      	b.n	8005ca0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	e000      	b.n	8005ca0 <USB_HC_Halt+0x1ea>
          break;
 8005c9e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3724      	adds	r7, #36	; 0x24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	04da      	lsls	r2, r3, #19
 8005ccc:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <USB_DoPing+0x74>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cf8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	1ff80000 	.word	0x1ff80000

08005d28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff f912 	bl	8004f66 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d42:	2110      	movs	r1, #16
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff f96b 	bl	8005020 <USB_FlushTxFifo>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff f997 	bl	8005088 <USB_FlushRxFifo>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d64:	2300      	movs	r3, #0
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	e01f      	b.n	8005daa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	461a      	mov	r2, r3
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	3301      	adds	r3, #1
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b0f      	cmp	r3, #15
 8005dae:	d9dc      	bls.n	8005d6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	e034      	b.n	8005e20 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dcc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ddc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	461a      	mov	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dfc:	d80c      	bhi.n	8005e18 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e14:	d0ec      	beq.n	8005df0 <USB_StopHost+0xc8>
 8005e16:	e000      	b.n	8005e1a <USB_StopHost+0xf2>
        break;
 8005e18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b0f      	cmp	r3, #15
 8005e24:	d9c7      	bls.n	8005db6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff f881 	bl	8004f44 <USB_EnableGlobalInt>

  return ret;
 8005e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e4c:	b590      	push	{r4, r7, lr}
 8005e4e:	b089      	sub	sp, #36	; 0x24
 8005e50:	af04      	add	r7, sp, #16
 8005e52:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e54:	2301      	movs	r3, #1
 8005e56:	2202      	movs	r2, #2
 8005e58:	2102      	movs	r1, #2
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fc66 	bl	800672c <USBH_FindInterface>
 8005e60:	4603      	mov	r3, r0
 8005e62:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	2bff      	cmp	r3, #255	; 0xff
 8005e68:	d002      	beq.n	8005e70 <USBH_CDC_InterfaceInit+0x24>
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d901      	bls.n	8005e74 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e70:	2302      	movs	r3, #2
 8005e72:	e13d      	b.n	80060f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fc3b 	bl	80066f4 <USBH_SelectInterface>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e131      	b.n	80060f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e92:	2050      	movs	r0, #80	; 0x50
 8005e94:	f002 ffca 	bl	8008e2c <malloc>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005eac:	2302      	movs	r3, #2
 8005eae:	e11f      	b.n	80060f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005eb0:	2250      	movs	r2, #80	; 0x50
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	68b8      	ldr	r0, [r7, #8]
 8005eb6:	f002 ffd7 	bl	8008e68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	211a      	movs	r1, #26
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b25b      	sxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da15      	bge.n	8005efe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	211a      	movs	r1, #26
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ee2:	781a      	ldrb	r2, [r3, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	211a      	movs	r1, #26
 8005eee:	fb01 f303 	mul.w	r3, r1, r3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ef8:	881a      	ldrh	r2, [r3, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 ff2c 	bl	8007d62 <USBH_AllocPipe>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	7858      	ldrb	r0, [r3, #1]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	8952      	ldrh	r2, [r2, #10]
 8005f2a:	9202      	str	r2, [sp, #8]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	9201      	str	r2, [sp, #4]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	4623      	mov	r3, r4
 8005f34:	4602      	mov	r2, r0
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fee4 	bl	8007d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2200      	movs	r2, #0
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 f9f3 	bl	8008330 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	210a      	movs	r1, #10
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fbeb 	bl	800672c <USBH_FindInterface>
 8005f56:	4603      	mov	r3, r0
 8005f58:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	2bff      	cmp	r3, #255	; 0xff
 8005f5e:	d002      	beq.n	8005f66 <USBH_CDC_InterfaceInit+0x11a>
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d901      	bls.n	8005f6a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f66:	2302      	movs	r3, #2
 8005f68:	e0c2      	b.n	80060f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	211a      	movs	r1, #26
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	da16      	bge.n	8005fb0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	211a      	movs	r1, #26
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f92:	781a      	ldrb	r2, [r3, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	211a      	movs	r1, #26
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fa8:	881a      	ldrh	r2, [r3, #0]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	835a      	strh	r2, [r3, #26]
 8005fae:	e015      	b.n	8005fdc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	211a      	movs	r1, #26
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	211a      	movs	r1, #26
 8005fcc:	fb01 f303 	mul.w	r3, r1, r3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	211a      	movs	r1, #26
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	b25b      	sxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da16      	bge.n	8006022 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	211a      	movs	r1, #26
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	211a      	movs	r1, #26
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	4413      	add	r3, r2
 8006016:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800601a:	881a      	ldrh	r2, [r3, #0]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	835a      	strh	r2, [r3, #26]
 8006020:	e015      	b.n	800604e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	211a      	movs	r1, #26
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	4413      	add	r3, r2
 800602e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	211a      	movs	r1, #26
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006048:	881a      	ldrh	r2, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	7b9b      	ldrb	r3, [r3, #14]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fe84 	bl	8007d62 <USBH_AllocPipe>
 800605a:	4603      	mov	r3, r0
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	7bdb      	ldrb	r3, [r3, #15]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fe7a 	bl	8007d62 <USBH_AllocPipe>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	7b59      	ldrb	r1, [r3, #13]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	7b98      	ldrb	r0, [r3, #14]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	8b12      	ldrh	r2, [r2, #24]
 800608e:	9202      	str	r2, [sp, #8]
 8006090:	2202      	movs	r2, #2
 8006092:	9201      	str	r2, [sp, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	4623      	mov	r3, r4
 8006098:	4602      	mov	r2, r0
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fe32 	bl	8007d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	7b19      	ldrb	r1, [r3, #12]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	7bd8      	ldrb	r0, [r3, #15]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	8b52      	ldrh	r2, [r2, #26]
 80060b8:	9202      	str	r2, [sp, #8]
 80060ba:	2202      	movs	r2, #2
 80060bc:	9201      	str	r2, [sp, #4]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	4623      	mov	r3, r4
 80060c2:	4602      	mov	r2, r0
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fe1d 	bl	8007d04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	7b5b      	ldrb	r3, [r3, #13]
 80060d6:	2200      	movs	r2, #0
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f002 f928 	bl	8008330 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	7b1b      	ldrb	r3, [r3, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f002 f921 	bl	8008330 <USBH_LL_SetToggle>

  return USBH_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd90      	pop	{r4, r7, pc}

080060f8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00e      	beq.n	8006130 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fe12 	bl	8007d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 fe3d 	bl	8007da4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	7b1b      	ldrb	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00e      	beq.n	8006156 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	7b1b      	ldrb	r3, [r3, #12]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fdff 	bl	8007d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	7b1b      	ldrb	r3, [r3, #12]
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 fe2a 	bl	8007da4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	7b5b      	ldrb	r3, [r3, #13]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00e      	beq.n	800617c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	7b5b      	ldrb	r3, [r3, #13]
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fdec 	bl	8007d42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	7b5b      	ldrb	r3, [r3, #13]
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fe17 	bl	8007da4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	4618      	mov	r0, r3
 8006192:	f002 fe53 	bl	8008e3c <free>
    phost->pActiveClass->pData = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800619c:	2200      	movs	r2, #0
 800619e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3340      	adds	r3, #64	; 0x40
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8b1 	bl	800632a <GetLineCoding>
 80061c8:	4603      	mov	r3, r0
 80061ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061cc:	7afb      	ldrb	r3, [r7, #11]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d105      	bne.n	80061de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061d8:	2102      	movs	r1, #2
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061de:	7afb      	ldrb	r3, [r7, #11]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061f0:	2301      	movs	r3, #1
 80061f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006208:	2b04      	cmp	r3, #4
 800620a:	d877      	bhi.n	80062fc <USBH_CDC_Process+0x114>
 800620c:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <USBH_CDC_Process+0x2c>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006229 	.word	0x08006229
 8006218:	0800622f 	.word	0x0800622f
 800621c:	0800625f 	.word	0x0800625f
 8006220:	080062d3 	.word	0x080062d3
 8006224:	080062e1 	.word	0x080062e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]
      break;
 800622c:	e06d      	b.n	800630a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f897 	bl	8006368 <SetLineCoding>
 800623a:	4603      	mov	r3, r0
 800623c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800624c:	e058      	b.n	8006300 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d055      	beq.n	8006300 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2204      	movs	r2, #4
 8006258:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800625c:	e050      	b.n	8006300 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	3340      	adds	r3, #64	; 0x40
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f860 	bl	800632a <GetLineCoding>
 800626a:	4603      	mov	r3, r0
 800626c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d126      	bne.n	80062c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006286:	791b      	ldrb	r3, [r3, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d13b      	bne.n	8006304 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006296:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006298:	429a      	cmp	r2, r3
 800629a:	d133      	bne.n	8006304 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d12b      	bne.n	8006304 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d124      	bne.n	8006304 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f958 	bl	8006570 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062c0:	e020      	b.n	8006304 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d01d      	beq.n	8006304 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2204      	movs	r2, #4
 80062cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062d0:	e018      	b.n	8006304 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f867 	bl	80063a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f8da 	bl	8006492 <CDC_ProcessReception>
      break;
 80062de:	e014      	b.n	800630a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062e0:	2100      	movs	r1, #0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 ffef 	bl	80072c6 <USBH_ClrFeature>
 80062e8:	4603      	mov	r3, r0
 80062ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062ec:	7bbb      	ldrb	r3, [r7, #14]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062fa:	e005      	b.n	8006308 <USBH_CDC_Process+0x120>

    default:
      break;
 80062fc:	bf00      	nop
 80062fe:	e004      	b.n	800630a <USBH_CDC_Process+0x122>
      break;
 8006300:	bf00      	nop
 8006302:	e002      	b.n	800630a <USBH_CDC_Process+0x122>
      break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <USBH_CDC_Process+0x122>
      break;
 8006308:	bf00      	nop

  }

  return status;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	22a1      	movs	r2, #161	; 0xa1
 8006338:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2221      	movs	r2, #33	; 0x21
 800633e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2207      	movs	r2, #7
 8006350:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2207      	movs	r2, #7
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fa81 	bl	8007860 <USBH_CtlReq>
 800635e:	4603      	mov	r3, r0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2221      	movs	r2, #33	; 0x21
 8006376:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2207      	movs	r2, #7
 800638e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2207      	movs	r2, #7
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fa62 	bl	8007860 <USBH_CtlReq>
 800639c:	4603      	mov	r3, r0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af02      	add	r7, sp, #8
 80063ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d002      	beq.n	80063cc <CDC_ProcessTransmission+0x26>
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d023      	beq.n	8006412 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063ca:	e05e      	b.n	800648a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	8b12      	ldrh	r2, [r2, #24]
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d90b      	bls.n	80063f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	69d9      	ldr	r1, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8b1a      	ldrh	r2, [r3, #24]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	7b5b      	ldrb	r3, [r3, #13]
 80063e4:	2001      	movs	r0, #1
 80063e6:	9000      	str	r0, [sp, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 fc48 	bl	8007c7e <USBH_BulkSendData>
 80063ee:	e00b      	b.n	8006408 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	7b5b      	ldrb	r3, [r3, #13]
 80063fe:	2001      	movs	r0, #1
 8006400:	9000      	str	r0, [sp, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fc3b 	bl	8007c7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006410:	e03b      	b.n	800648a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	7b5b      	ldrb	r3, [r3, #13]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 ff5f 	bl	80082dc <USBH_LL_GetURBState>
 800641e:	4603      	mov	r3, r0
 8006420:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006422:	7afb      	ldrb	r3, [r7, #11]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d128      	bne.n	800647a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	8b12      	ldrh	r2, [r2, #24]
 8006430:	4293      	cmp	r3, r2
 8006432:	d90e      	bls.n	8006452 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	8b12      	ldrh	r2, [r2, #24]
 800643c:	1a9a      	subs	r2, r3, r2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	8b12      	ldrh	r2, [r2, #24]
 800644a:	441a      	add	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	61da      	str	r2, [r3, #28]
 8006450:	e002      	b.n	8006458 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006468:	e00e      	b.n	8006488 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f868 	bl	8006548 <USBH_CDC_TransmitCallback>
      break;
 8006478:	e006      	b.n	8006488 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d103      	bne.n	8006488 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006488:	bf00      	nop
  }
}
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b086      	sub	sp, #24
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064a4:	2300      	movs	r3, #0
 80064a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d002      	beq.n	80064b8 <CDC_ProcessReception+0x26>
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d00e      	beq.n	80064d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064b6:	e043      	b.n	8006540 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	6a19      	ldr	r1, [r3, #32]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	8b5a      	ldrh	r2, [r3, #26]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	7b1b      	ldrb	r3, [r3, #12]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 fbff 	bl	8007cc8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2204      	movs	r2, #4
 80064ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064d2:	e035      	b.n	8006540 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	7b1b      	ldrb	r3, [r3, #12]
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 fefe 	bl	80082dc <USBH_LL_GetURBState>
 80064e0:	4603      	mov	r3, r0
 80064e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d129      	bne.n	800653e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	7b1b      	ldrb	r3, [r3, #12]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 fe61 	bl	80081b8 <USBH_LL_GetLastXferSize>
 80064f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d016      	beq.n	8006530 <CDC_ProcessReception+0x9e>
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	8b5b      	ldrh	r3, [r3, #26]
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4293      	cmp	r3, r2
 800650c:	d910      	bls.n	8006530 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1ad2      	subs	r2, r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	6a1a      	ldr	r2, [r3, #32]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	441a      	add	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2203      	movs	r2, #3
 800652a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800652e:	e006      	b.n	800653e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f80f 	bl	800655c <USBH_CDC_ReceiveCallback>
      break;
 800653e:	bf00      	nop
  }
}
 8006540:	bf00      	nop
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006598:	2302      	movs	r3, #2
 800659a:	e029      	b.n	80065f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	79fa      	ldrb	r2, [r7, #7]
 80065a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f81f 	bl	80065f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f001 fd31 	bl	8008050 <USBH_LL_Init>

  return USBH_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e009      	b.n	800661e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	33e0      	adds	r3, #224	; 0xe0
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	2200      	movs	r2, #0
 8006616:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b0f      	cmp	r3, #15
 8006622:	d9f2      	bls.n	800660a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	e009      	b.n	800663e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006644:	d3f1      	bcc.n	800662a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2240      	movs	r2, #64	; 0x40
 800666a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d016      	beq.n	80066e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10e      	bne.n	80066dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066c4:	1c59      	adds	r1, r3, #1
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	33de      	adds	r3, #222	; 0xde
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
 80066da:	e004      	b.n	80066e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066dc:	2302      	movs	r3, #2
 80066de:	73fb      	strb	r3, [r7, #15]
 80066e0:	e001      	b.n	80066e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066e2:	2302      	movs	r3, #2
 80066e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	429a      	cmp	r2, r3
 800670e:	d204      	bcs.n	800671a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	78fa      	ldrb	r2, [r7, #3]
 8006714:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006718:	e001      	b.n	800671e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800671a:	2302      	movs	r3, #2
 800671c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	461a      	mov	r2, r3
 800673a:	4603      	mov	r3, r0
 800673c:	70fb      	strb	r3, [r7, #3]
 800673e:	460b      	mov	r3, r1
 8006740:	70bb      	strb	r3, [r7, #2]
 8006742:	4613      	mov	r3, r2
 8006744:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006754:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006756:	e025      	b.n	80067a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	221a      	movs	r2, #26
 800675c:	fb02 f303 	mul.w	r3, r2, r3
 8006760:	3308      	adds	r3, #8
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	3302      	adds	r3, #2
 8006768:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	795b      	ldrb	r3, [r3, #5]
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	429a      	cmp	r2, r3
 8006772:	d002      	beq.n	800677a <USBH_FindInterface+0x4e>
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	2bff      	cmp	r3, #255	; 0xff
 8006778:	d111      	bne.n	800679e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800677e:	78ba      	ldrb	r2, [r7, #2]
 8006780:	429a      	cmp	r2, r3
 8006782:	d002      	beq.n	800678a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006784:	78bb      	ldrb	r3, [r7, #2]
 8006786:	2bff      	cmp	r3, #255	; 0xff
 8006788:	d109      	bne.n	800679e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800678e:	787a      	ldrb	r2, [r7, #1]
 8006790:	429a      	cmp	r2, r3
 8006792:	d002      	beq.n	800679a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006794:	787b      	ldrb	r3, [r7, #1]
 8006796:	2bff      	cmp	r3, #255	; 0xff
 8006798:	d101      	bne.n	800679e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	e006      	b.n	80067ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	3301      	adds	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d9d6      	bls.n	8006758 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80067aa:	23ff      	movs	r3, #255	; 0xff
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fc81 	bl	80080c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80067c6:	2101      	movs	r1, #1
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fd9a 	bl	8008302 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af04      	add	r7, sp, #16
 80067de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067e0:	2302      	movs	r3, #2
 80067e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d102      	bne.n	80067fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2203      	movs	r2, #3
 80067f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b0b      	cmp	r3, #11
 8006802:	f200 81be 	bhi.w	8006b82 <USBH_Process+0x3aa>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBH_Process+0x34>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	0800683d 	.word	0x0800683d
 8006810:	0800686f 	.word	0x0800686f
 8006814:	080068d7 	.word	0x080068d7
 8006818:	08006b1d 	.word	0x08006b1d
 800681c:	08006b83 	.word	0x08006b83
 8006820:	0800697b 	.word	0x0800697b
 8006824:	08006ac3 	.word	0x08006ac3
 8006828:	080069b1 	.word	0x080069b1
 800682c:	080069d1 	.word	0x080069d1
 8006830:	080069f1 	.word	0x080069f1
 8006834:	08006a35 	.word	0x08006a35
 8006838:	08006b05 	.word	0x08006b05
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 819e 	beq.w	8006b86 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006850:	20c8      	movs	r0, #200	; 0xc8
 8006852:	f001 fd9d 	bl	8008390 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 fc93 	bl	8008182 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800686c:	e18b      	b.n	8006b86 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006874:	2b01      	cmp	r3, #1
 8006876:	d107      	bne.n	8006888 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006886:	e18d      	b.n	8006ba4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800688e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006892:	d914      	bls.n	80068be <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800689a:	3301      	adds	r3, #1
 800689c:	b2da      	uxtb	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d903      	bls.n	80068b6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	220d      	movs	r2, #13
 80068b2:	701a      	strb	r2, [r3, #0]
      break;
 80068b4:	e176      	b.n	8006ba4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
      break;
 80068bc:	e172      	b.n	8006ba4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068c4:	f103 020a 	add.w	r2, r3, #10
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80068ce:	200a      	movs	r0, #10
 80068d0:	f001 fd5e 	bl	8008390 <USBH_Delay>
      break;
 80068d4:	e166      	b.n	8006ba4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068e6:	2104      	movs	r1, #4
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068ec:	2064      	movs	r0, #100	; 0x64
 80068ee:	f001 fd4f 	bl	8008390 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fc1e 	bl	8008134 <USBH_LL_GetSpeed>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2205      	movs	r2, #5
 8006906:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006908:	2100      	movs	r1, #0
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fa29 	bl	8007d62 <USBH_AllocPipe>
 8006910:	4603      	mov	r3, r0
 8006912:	461a      	mov	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006918:	2180      	movs	r1, #128	; 0x80
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fa21 	bl	8007d62 <USBH_AllocPipe>
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	7919      	ldrb	r1, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800693c:	b292      	uxth	r2, r2
 800693e:	9202      	str	r2, [sp, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4603      	mov	r3, r0
 8006948:	2280      	movs	r2, #128	; 0x80
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 f9da 	bl	8007d04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7959      	ldrb	r1, [r3, #5]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006964:	b292      	uxth	r2, r2
 8006966:	9202      	str	r2, [sp, #8]
 8006968:	2200      	movs	r2, #0
 800696a:	9201      	str	r2, [sp, #4]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4603      	mov	r3, r0
 8006970:	2200      	movs	r2, #0
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f9c6 	bl	8007d04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006978:	e114      	b.n	8006ba4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f918 	bl	8006bb0 <USBH_HandleEnum>
 8006980:	4603      	mov	r3, r0
 8006982:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	f040 80fe 	bne.w	8006b8a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800699c:	2b01      	cmp	r3, #1
 800699e:	d103      	bne.n	80069a8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2208      	movs	r2, #8
 80069a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80069a6:	e0f0      	b.n	8006b8a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2207      	movs	r2, #7
 80069ac:	701a      	strb	r2, [r3, #0]
      break;
 80069ae:	e0ec      	b.n	8006b8a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80e9 	beq.w	8006b8e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069c2:	2101      	movs	r1, #1
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2208      	movs	r2, #8
 80069cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80069ce:	e0de      	b.n	8006b8e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fc2c 	bl	8007238 <USBH_SetCfg>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f040 80d5 	bne.w	8006b92 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2209      	movs	r2, #9
 80069ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069ee:	e0d0      	b.n	8006b92 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d016      	beq.n	8006a2c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80069fe:	2101      	movs	r1, #1
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fc3c 	bl	800727e <USBH_SetFeature>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	220a      	movs	r2, #10
 8006a16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a18:	e0bd      	b.n	8006b96 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	f040 80b9 	bne.w	8006b96 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	220a      	movs	r2, #10
 8006a28:	701a      	strb	r2, [r3, #0]
      break;
 8006a2a:	e0b4      	b.n	8006b96 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	220a      	movs	r2, #10
 8006a30:	701a      	strb	r2, [r3, #0]
      break;
 8006a32:	e0b0      	b.n	8006b96 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80ad 	beq.w	8006b9a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]
 8006a4c:	e016      	b.n	8006a7c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a4e:	7bfa      	ldrb	r2, [r7, #15]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	32de      	adds	r2, #222	; 0xde
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	791a      	ldrb	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d108      	bne.n	8006a76 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a64:	7bfa      	ldrb	r2, [r7, #15]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	32de      	adds	r2, #222	; 0xde
 8006a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a74:	e005      	b.n	8006a82 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0e5      	beq.n	8006a4e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d016      	beq.n	8006aba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2206      	movs	r2, #6
 8006aa2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aaa:	2103      	movs	r1, #3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ab0:	e073      	b.n	8006b9a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	220d      	movs	r2, #13
 8006ab6:	701a      	strb	r2, [r3, #0]
      break;
 8006ab8:	e06f      	b.n	8006b9a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	220d      	movs	r2, #13
 8006abe:	701a      	strb	r2, [r3, #0]
      break;
 8006ac0:	e06b      	b.n	8006b9a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d017      	beq.n	8006afc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	220b      	movs	r2, #11
 8006ae8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006aea:	e058      	b.n	8006b9e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006aec:	7bbb      	ldrb	r3, [r7, #14]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d154      	bne.n	8006b9e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	220d      	movs	r2, #13
 8006af8:	701a      	strb	r2, [r3, #0]
      break;
 8006afa:	e050      	b.n	8006b9e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	220d      	movs	r2, #13
 8006b00:	701a      	strb	r2, [r3, #0]
      break;
 8006b02:	e04c      	b.n	8006b9e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d049      	beq.n	8006ba2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
      }
      break;
 8006b1a:	e042      	b.n	8006ba2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fd67 	bl	80065f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d009      	beq.n	8006b48 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b58:	2105      	movs	r1, #5
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d107      	bne.n	8006b7a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fe20 	bl	80067b8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b78:	e014      	b.n	8006ba4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 faa4 	bl	80080c8 <USBH_LL_Start>
      break;
 8006b80:	e010      	b.n	8006ba4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b82:	bf00      	nop
 8006b84:	e00e      	b.n	8006ba4 <USBH_Process+0x3cc>
      break;
 8006b86:	bf00      	nop
 8006b88:	e00c      	b.n	8006ba4 <USBH_Process+0x3cc>
      break;
 8006b8a:	bf00      	nop
 8006b8c:	e00a      	b.n	8006ba4 <USBH_Process+0x3cc>
    break;
 8006b8e:	bf00      	nop
 8006b90:	e008      	b.n	8006ba4 <USBH_Process+0x3cc>
      break;
 8006b92:	bf00      	nop
 8006b94:	e006      	b.n	8006ba4 <USBH_Process+0x3cc>
      break;
 8006b96:	bf00      	nop
 8006b98:	e004      	b.n	8006ba4 <USBH_Process+0x3cc>
      break;
 8006b9a:	bf00      	nop
 8006b9c:	e002      	b.n	8006ba4 <USBH_Process+0x3cc>
      break;
 8006b9e:	bf00      	nop
 8006ba0:	e000      	b.n	8006ba4 <USBH_Process+0x3cc>
      break;
 8006ba2:	bf00      	nop
  }
  return USBH_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop

08006bb0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af04      	add	r7, sp, #16
 8006bb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	785b      	ldrb	r3, [r3, #1]
 8006bc4:	2b07      	cmp	r3, #7
 8006bc6:	f200 81c1 	bhi.w	8006f4c <USBH_HandleEnum+0x39c>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <USBH_HandleEnum+0x20>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006bf1 	.word	0x08006bf1
 8006bd4:	08006caf 	.word	0x08006caf
 8006bd8:	08006d19 	.word	0x08006d19
 8006bdc:	08006da7 	.word	0x08006da7
 8006be0:	08006e11 	.word	0x08006e11
 8006be4:	08006e81 	.word	0x08006e81
 8006be8:	08006ec7 	.word	0x08006ec7
 8006bec:	08006f0d 	.word	0x08006f0d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bf0:	2108      	movs	r1, #8
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa50 	bl	8007098 <USBH_Get_DevDesc>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d130      	bne.n	8006c64 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	7919      	ldrb	r1, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c26:	b292      	uxth	r2, r2
 8006c28:	9202      	str	r2, [sp, #8]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	9201      	str	r2, [sp, #4]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	2280      	movs	r2, #128	; 0x80
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 f865 	bl	8007d04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	7959      	ldrb	r1, [r3, #5]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c4e:	b292      	uxth	r2, r2
 8006c50:	9202      	str	r2, [sp, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	9201      	str	r2, [sp, #4]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 f851 	bl	8007d04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c62:	e175      	b.n	8006f50 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	f040 8172 	bne.w	8006f50 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c72:	3301      	adds	r3, #1
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d903      	bls.n	8006c8e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	220d      	movs	r2, #13
 8006c8a:	701a      	strb	r2, [r3, #0]
      break;
 8006c8c:	e160      	b.n	8006f50 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	795b      	ldrb	r3, [r3, #5]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 f885 	bl	8007da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	791b      	ldrb	r3, [r3, #4]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 f87f 	bl	8007da4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
      break;
 8006cac:	e150      	b.n	8006f50 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006cae:	2112      	movs	r1, #18
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f9f1 	bl	8007098 <USBH_Get_DevDesc>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d103      	bne.n	8006cc8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cc6:	e145      	b.n	8006f54 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	f040 8142 	bne.w	8006f54 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d903      	bls.n	8006cf2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	220d      	movs	r2, #13
 8006cee:	701a      	strb	r2, [r3, #0]
      break;
 8006cf0:	e130      	b.n	8006f54 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	795b      	ldrb	r3, [r3, #5]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 f853 	bl	8007da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	791b      	ldrb	r3, [r3, #4]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f84d 	bl	8007da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
      break;
 8006d16:	e11d      	b.n	8006f54 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d18:	2101      	movs	r1, #1
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa68 	bl	80071f0 <USBH_SetAddress>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d132      	bne.n	8006d90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d2a:	2002      	movs	r0, #2
 8006d2c:	f001 fb30 	bl	8008390 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7919      	ldrb	r1, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d52:	b292      	uxth	r2, r2
 8006d54:	9202      	str	r2, [sp, #8]
 8006d56:	2200      	movs	r2, #0
 8006d58:	9201      	str	r2, [sp, #4]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2280      	movs	r2, #128	; 0x80
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 ffcf 	bl	8007d04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	7959      	ldrb	r1, [r3, #5]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d7a:	b292      	uxth	r2, r2
 8006d7c:	9202      	str	r2, [sp, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	9201      	str	r2, [sp, #4]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	4603      	mov	r3, r0
 8006d86:	2200      	movs	r2, #0
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 ffbb 	bl	8007d04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d8e:	e0e3      	b.n	8006f58 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	f040 80e0 	bne.w	8006f58 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	220d      	movs	r2, #13
 8006d9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	705a      	strb	r2, [r3, #1]
      break;
 8006da4:	e0d8      	b.n	8006f58 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006da6:	2109      	movs	r1, #9
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f99d 	bl	80070e8 <USBH_Get_CfgDesc>
 8006dae:	4603      	mov	r3, r0
 8006db0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d103      	bne.n	8006dc0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2204      	movs	r2, #4
 8006dbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dbe:	e0cd      	b.n	8006f5c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dc0:	7bbb      	ldrb	r3, [r7, #14]
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	f040 80ca 	bne.w	8006f5c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dce:	3301      	adds	r3, #1
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d903      	bls.n	8006dea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	220d      	movs	r2, #13
 8006de6:	701a      	strb	r2, [r3, #0]
      break;
 8006de8:	e0b8      	b.n	8006f5c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	795b      	ldrb	r3, [r3, #5]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 ffd7 	bl	8007da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	791b      	ldrb	r3, [r3, #4]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 ffd1 	bl	8007da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
      break;
 8006e0e:	e0a5      	b.n	8006f5c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f965 	bl	80070e8 <USBH_Get_CfgDesc>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d103      	bne.n	8006e30 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2205      	movs	r2, #5
 8006e2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e2e:	e097      	b.n	8006f60 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	f040 8094 	bne.w	8006f60 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e3e:	3301      	adds	r3, #1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d903      	bls.n	8006e5a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	220d      	movs	r2, #13
 8006e56:	701a      	strb	r2, [r3, #0]
      break;
 8006e58:	e082      	b.n	8006f60 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	795b      	ldrb	r3, [r3, #5]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 ff9f 	bl	8007da4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	791b      	ldrb	r3, [r3, #4]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 ff99 	bl	8007da4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
      break;
 8006e7e:	e06f      	b.n	8006f60 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d019      	beq.n	8006ebe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e96:	23ff      	movs	r3, #255	; 0xff
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f949 	bl	8007130 <USBH_Get_StringDesc>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d103      	bne.n	8006eb0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2206      	movs	r2, #6
 8006eac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006eae:	e059      	b.n	8006f64 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d156      	bne.n	8006f64 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2206      	movs	r2, #6
 8006eba:	705a      	strb	r2, [r3, #1]
      break;
 8006ebc:	e052      	b.n	8006f64 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2206      	movs	r2, #6
 8006ec2:	705a      	strb	r2, [r3, #1]
      break;
 8006ec4:	e04e      	b.n	8006f64 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d019      	beq.n	8006f04 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006edc:	23ff      	movs	r3, #255	; 0xff
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f926 	bl	8007130 <USBH_Get_StringDesc>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d103      	bne.n	8006ef6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ef4:	e038      	b.n	8006f68 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d135      	bne.n	8006f68 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2207      	movs	r2, #7
 8006f00:	705a      	strb	r2, [r3, #1]
      break;
 8006f02:	e031      	b.n	8006f68 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2207      	movs	r2, #7
 8006f08:	705a      	strb	r2, [r3, #1]
      break;
 8006f0a:	e02d      	b.n	8006f68 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d017      	beq.n	8006f46 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f22:	23ff      	movs	r3, #255	; 0xff
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f903 	bl	8007130 <USBH_Get_StringDesc>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d102      	bne.n	8006f3a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f38:	e018      	b.n	8006f6c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d115      	bne.n	8006f6c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
      break;
 8006f44:	e012      	b.n	8006f6c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4a:	e00f      	b.n	8006f6c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f4c:	bf00      	nop
 8006f4e:	e00e      	b.n	8006f6e <USBH_HandleEnum+0x3be>
      break;
 8006f50:	bf00      	nop
 8006f52:	e00c      	b.n	8006f6e <USBH_HandleEnum+0x3be>
      break;
 8006f54:	bf00      	nop
 8006f56:	e00a      	b.n	8006f6e <USBH_HandleEnum+0x3be>
      break;
 8006f58:	bf00      	nop
 8006f5a:	e008      	b.n	8006f6e <USBH_HandleEnum+0x3be>
      break;
 8006f5c:	bf00      	nop
 8006f5e:	e006      	b.n	8006f6e <USBH_HandleEnum+0x3be>
      break;
 8006f60:	bf00      	nop
 8006f62:	e004      	b.n	8006f6e <USBH_HandleEnum+0x3be>
      break;
 8006f64:	bf00      	nop
 8006f66:	e002      	b.n	8006f6e <USBH_HandleEnum+0x3be>
      break;
 8006f68:	bf00      	nop
 8006f6a:	e000      	b.n	8006f6e <USBH_HandleEnum+0x3be>
      break;
 8006f6c:	bf00      	nop
  }
  return Status;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f804 	bl	8006fba <USBH_HandleSof>
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b0b      	cmp	r3, #11
 8006fca:	d10a      	bne.n	8006fe2 <USBH_HandleSof+0x28>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006ffa:	bf00      	nop
}
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007016:	bf00      	nop
}
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 f844 	bl	80080fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fe91 	bl	8007da4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	795b      	ldrb	r3, [r3, #5]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fe8b 	bl	8007da4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af02      	add	r7, sp, #8
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	4613      	mov	r3, r2
 80070b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070b6:	2100      	movs	r1, #0
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f864 	bl	8007186 <USBH_GetDescriptor>
 80070be:	4603      	mov	r3, r0
 80070c0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	b292      	uxth	r2, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f000 f918 	bl	800730e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	331c      	adds	r3, #28
 80070f8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070fa:	887b      	ldrh	r3, [r7, #2]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007104:	2100      	movs	r1, #0
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f83d 	bl	8007186 <USBH_GetDescriptor>
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d107      	bne.n	8007126 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007116:	887b      	ldrh	r3, [r7, #2]
 8007118:	461a      	mov	r2, r3
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f987 	bl	8007430 <USBH_ParseCfgDesc>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	461a      	mov	r2, r3
 800713c:	460b      	mov	r3, r1
 800713e:	72fb      	strb	r3, [r7, #11]
 8007140:	4613      	mov	r3, r2
 8007142:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	b29b      	uxth	r3, r3
 8007148:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800714c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007154:	893b      	ldrh	r3, [r7, #8]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	460b      	mov	r3, r1
 800715a:	2100      	movs	r1, #0
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f812 	bl	8007186 <USBH_GetDescriptor>
 8007162:	4603      	mov	r3, r0
 8007164:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d107      	bne.n	800717c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007172:	893a      	ldrh	r2, [r7, #8]
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fb24 	bl	80077c4 <USBH_ParseStringDesc>
  }

  return status;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	72fb      	strb	r3, [r7, #11]
 8007194:	4613      	mov	r3, r2
 8007196:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	789b      	ldrb	r3, [r3, #2]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d11c      	bne.n	80071da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2206      	movs	r2, #6
 80071b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	893a      	ldrh	r2, [r7, #8]
 80071b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80071b8:	893b      	ldrh	r3, [r7, #8]
 80071ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071c2:	d104      	bne.n	80071ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f240 4209 	movw	r2, #1033	; 0x409
 80071ca:	829a      	strh	r2, [r3, #20]
 80071cc:	e002      	b.n	80071d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8b3a      	ldrh	r2, [r7, #24]
 80071d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80071da:	8b3b      	ldrh	r3, [r7, #24]
 80071dc:	461a      	mov	r2, r3
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 fb3d 	bl	8007860 <USBH_CtlReq>
 80071e6:	4603      	mov	r3, r0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	789b      	ldrb	r3, [r3, #2]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d10f      	bne.n	8007224 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2205      	movs	r2, #5
 800720e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	b29a      	uxth	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007224:	2200      	movs	r2, #0
 8007226:	2100      	movs	r1, #0
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fb19 	bl	8007860 <USBH_CtlReq>
 800722e:	4603      	mov	r3, r0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	789b      	ldrb	r3, [r3, #2]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d10e      	bne.n	800726a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2209      	movs	r2, #9
 8007256:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	887a      	ldrh	r2, [r7, #2]
 800725c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800726a:	2200      	movs	r2, #0
 800726c:	2100      	movs	r1, #0
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 faf6 	bl	8007860 <USBH_CtlReq>
 8007274:	4603      	mov	r3, r0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	789b      	ldrb	r3, [r3, #2]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d10f      	bne.n	80072b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2203      	movs	r2, #3
 800729c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80072b2:	2200      	movs	r2, #0
 80072b4:	2100      	movs	r1, #0
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fad2 	bl	8007860 <USBH_CtlReq>
 80072bc:	4603      	mov	r3, r0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	460b      	mov	r3, r1
 80072d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	789b      	ldrb	r3, [r3, #2]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d10f      	bne.n	80072fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 faae 	bl	8007860 <USBH_CtlReq>
 8007304:	4603      	mov	r3, r0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	4613      	mov	r3, r2
 800731a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	781a      	ldrb	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	785a      	ldrb	r2, [r3, #1]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	3302      	adds	r3, #2
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	b29a      	uxth	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3303      	adds	r3, #3
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	b29b      	uxth	r3, r3
 8007340:	4313      	orrs	r3, r2
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	791a      	ldrb	r2, [r3, #4]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	795a      	ldrb	r2, [r3, #5]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	799a      	ldrb	r2, [r3, #6]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	79da      	ldrb	r2, [r3, #7]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	79db      	ldrb	r3, [r3, #7]
 800736c:	2b20      	cmp	r3, #32
 800736e:	dc11      	bgt.n	8007394 <USBH_ParseDevDesc+0x86>
 8007370:	2b08      	cmp	r3, #8
 8007372:	db16      	blt.n	80073a2 <USBH_ParseDevDesc+0x94>
 8007374:	3b08      	subs	r3, #8
 8007376:	2201      	movs	r2, #1
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <USBH_ParseDevDesc+0x8a>
 8007392:	e006      	b.n	80073a2 <USBH_ParseDevDesc+0x94>
 8007394:	2b40      	cmp	r3, #64	; 0x40
 8007396:	d104      	bne.n	80073a2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	79da      	ldrb	r2, [r3, #7]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	71da      	strb	r2, [r3, #7]
      break;
 80073a0:	e003      	b.n	80073aa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2240      	movs	r2, #64	; 0x40
 80073a6:	71da      	strb	r2, [r3, #7]
      break;
 80073a8:	bf00      	nop
  }

  if (length > 8U)
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d939      	bls.n	8007424 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	3308      	adds	r3, #8
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3309      	adds	r3, #9
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	330a      	adds	r3, #10
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	330b      	adds	r3, #11
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	b29b      	uxth	r3, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	330c      	adds	r3, #12
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	330d      	adds	r3, #13
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4313      	orrs	r3, r2
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	7b9a      	ldrb	r2, [r3, #14]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	7bda      	ldrb	r2, [r3, #15]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	7c1a      	ldrb	r2, [r3, #16]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	7c5a      	ldrb	r2, [r3, #17]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	745a      	strb	r2, [r3, #17]
  }
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08c      	sub	sp, #48	; 0x30
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007444:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	781a      	ldrb	r2, [r3, #0]
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	785a      	ldrb	r2, [r3, #1]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	3302      	adds	r3, #2
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b29a      	uxth	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	3303      	adds	r3, #3
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	b29b      	uxth	r3, r3
 8007484:	4313      	orrs	r3, r2
 8007486:	b29b      	uxth	r3, r3
 8007488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748c:	bf28      	it	cs
 800748e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007492:	b29a      	uxth	r2, r3
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	791a      	ldrb	r2, [r3, #4]
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	795a      	ldrb	r2, [r3, #5]
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	799a      	ldrb	r2, [r3, #6]
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	79da      	ldrb	r2, [r3, #7]
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	7a1a      	ldrb	r2, [r3, #8]
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b09      	cmp	r3, #9
 80074c6:	d002      	beq.n	80074ce <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2209      	movs	r2, #9
 80074cc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	2b09      	cmp	r3, #9
 80074d2:	f240 809d 	bls.w	8007610 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80074d6:	2309      	movs	r3, #9
 80074d8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074de:	e081      	b.n	80075e4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074e0:	f107 0316 	add.w	r3, r7, #22
 80074e4:	4619      	mov	r1, r3
 80074e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e8:	f000 f99f 	bl	800782a <USBH_GetNextDesc>
 80074ec:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	785b      	ldrb	r3, [r3, #1]
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d176      	bne.n	80075e4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d002      	beq.n	8007504 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	2209      	movs	r2, #9
 8007502:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007508:	221a      	movs	r2, #26
 800750a:	fb02 f303 	mul.w	r3, r2, r3
 800750e:	3308      	adds	r3, #8
 8007510:	6a3a      	ldr	r2, [r7, #32]
 8007512:	4413      	add	r3, r2
 8007514:	3302      	adds	r3, #2
 8007516:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800751a:	69f8      	ldr	r0, [r7, #28]
 800751c:	f000 f87e 	bl	800761c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800752a:	e043      	b.n	80075b4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800752c:	f107 0316 	add.w	r3, r7, #22
 8007530:	4619      	mov	r1, r3
 8007532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007534:	f000 f979 	bl	800782a <USBH_GetNextDesc>
 8007538:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	785b      	ldrb	r3, [r3, #1]
 800753e:	2b05      	cmp	r3, #5
 8007540:	d138      	bne.n	80075b4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	795b      	ldrb	r3, [r3, #5]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d10f      	bne.n	800756a <USBH_ParseCfgDesc+0x13a>
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	799b      	ldrb	r3, [r3, #6]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d10b      	bne.n	800756a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	79db      	ldrb	r3, [r3, #7]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10f      	bne.n	800757a <USBH_ParseCfgDesc+0x14a>
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b09      	cmp	r3, #9
 8007560:	d00b      	beq.n	800757a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	2209      	movs	r2, #9
 8007566:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007568:	e007      	b.n	800757a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b07      	cmp	r3, #7
 8007570:	d004      	beq.n	800757c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	2207      	movs	r2, #7
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	e000      	b.n	800757c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800757a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800757c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007580:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007584:	3201      	adds	r2, #1
 8007586:	00d2      	lsls	r2, r2, #3
 8007588:	211a      	movs	r1, #26
 800758a:	fb01 f303 	mul.w	r3, r1, r3
 800758e:	4413      	add	r3, r2
 8007590:	3308      	adds	r3, #8
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	4413      	add	r3, r2
 8007596:	3304      	adds	r3, #4
 8007598:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800759a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759c:	69b9      	ldr	r1, [r7, #24]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f86b 	bl	800767a <USBH_ParseEPDesc>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80075aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075ae:	3301      	adds	r3, #1
 80075b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	791b      	ldrb	r3, [r3, #4]
 80075b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075bc:	429a      	cmp	r2, r3
 80075be:	d204      	bcs.n	80075ca <USBH_ParseCfgDesc+0x19a>
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	885a      	ldrh	r2, [r3, #2]
 80075c4:	8afb      	ldrh	r3, [r7, #22]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d8b0      	bhi.n	800752c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	791b      	ldrb	r3, [r3, #4]
 80075ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d201      	bcs.n	80075da <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e01c      	b.n	8007614 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80075da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075de:	3301      	adds	r3, #1
 80075e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d805      	bhi.n	80075f8 <USBH_ParseCfgDesc+0x1c8>
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	885a      	ldrh	r2, [r3, #2]
 80075f0:	8afb      	ldrh	r3, [r7, #22]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	f63f af74 	bhi.w	80074e0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	bf28      	it	cs
 8007600:	2302      	movcs	r3, #2
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007608:	429a      	cmp	r2, r3
 800760a:	d201      	bcs.n	8007610 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800760c:	2303      	movs	r3, #3
 800760e:	e001      	b.n	8007614 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007614:	4618      	mov	r0, r3
 8007616:	3730      	adds	r7, #48	; 0x30
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	785a      	ldrb	r2, [r3, #1]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	789a      	ldrb	r2, [r3, #2]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	78da      	ldrb	r2, [r3, #3]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	791a      	ldrb	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	795a      	ldrb	r2, [r3, #5]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	799a      	ldrb	r2, [r3, #6]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	79da      	ldrb	r2, [r3, #7]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	7a1a      	ldrb	r2, [r3, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	721a      	strb	r2, [r3, #8]
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800767a:	b480      	push	{r7}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	781a      	ldrb	r2, [r3, #0]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	785a      	ldrb	r2, [r3, #1]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	789a      	ldrb	r2, [r3, #2]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	78da      	ldrb	r2, [r3, #3]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3304      	adds	r3, #4
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3305      	adds	r3, #5
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4313      	orrs	r3, r2
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	799a      	ldrb	r2, [r3, #6]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	889b      	ldrh	r3, [r3, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d102      	bne.n	80076dc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80076d6:	2303      	movs	r3, #3
 80076d8:	75fb      	strb	r3, [r7, #23]
 80076da:	e033      	b.n	8007744 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	889b      	ldrh	r3, [r3, #4]
 80076e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076e4:	f023 0307 	bic.w	r3, r3, #7
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	889b      	ldrh	r3, [r3, #4]
 80076f2:	b21a      	sxth	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3304      	adds	r3, #4
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b299      	uxth	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3305      	adds	r3, #5
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	021b      	lsls	r3, r3, #8
 8007706:	b29b      	uxth	r3, r3
 8007708:	430b      	orrs	r3, r1
 800770a:	b29b      	uxth	r3, r3
 800770c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007710:	2b00      	cmp	r3, #0
 8007712:	d110      	bne.n	8007736 <USBH_ParseEPDesc+0xbc>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3304      	adds	r3, #4
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	b299      	uxth	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3305      	adds	r3, #5
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	b29b      	uxth	r3, r3
 8007728:	430b      	orrs	r3, r1
 800772a:	b29b      	uxth	r3, r3
 800772c:	b21b      	sxth	r3, r3
 800772e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007732:	b21b      	sxth	r3, r3
 8007734:	e001      	b.n	800773a <USBH_ParseEPDesc+0xc0>
 8007736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800773a:	4313      	orrs	r3, r2
 800773c:	b21b      	sxth	r3, r3
 800773e:	b29a      	uxth	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800774a:	2b00      	cmp	r3, #0
 800774c:	d116      	bne.n	800777c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	78db      	ldrb	r3, [r3, #3]
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d005      	beq.n	8007766 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	78db      	ldrb	r3, [r3, #3]
 800775e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007762:	2b03      	cmp	r3, #3
 8007764:	d127      	bne.n	80077b6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	799b      	ldrb	r3, [r3, #6]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <USBH_ParseEPDesc+0xfc>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	799b      	ldrb	r3, [r3, #6]
 8007772:	2b10      	cmp	r3, #16
 8007774:	d91f      	bls.n	80077b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007776:	2303      	movs	r3, #3
 8007778:	75fb      	strb	r3, [r7, #23]
 800777a:	e01c      	b.n	80077b6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	78db      	ldrb	r3, [r3, #3]
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	2b01      	cmp	r3, #1
 8007786:	d10a      	bne.n	800779e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	799b      	ldrb	r3, [r3, #6]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <USBH_ParseEPDesc+0x11e>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	799b      	ldrb	r3, [r3, #6]
 8007794:	2b10      	cmp	r3, #16
 8007796:	d90e      	bls.n	80077b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007798:	2303      	movs	r3, #3
 800779a:	75fb      	strb	r3, [r7, #23]
 800779c:	e00b      	b.n	80077b6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	78db      	ldrb	r3, [r3, #3]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d105      	bne.n	80077b6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	799b      	ldrb	r3, [r3, #6]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80077b2:	2303      	movs	r3, #3
 80077b4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4613      	mov	r3, r2
 80077d0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3301      	adds	r3, #1
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d120      	bne.n	800781e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	1e9a      	subs	r2, r3, #2
 80077e2:	88fb      	ldrh	r3, [r7, #6]
 80077e4:	4293      	cmp	r3, r2
 80077e6:	bf28      	it	cs
 80077e8:	4613      	movcs	r3, r2
 80077ea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3302      	adds	r3, #2
 80077f0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077f2:	2300      	movs	r3, #0
 80077f4:	82fb      	strh	r3, [r7, #22]
 80077f6:	e00b      	b.n	8007810 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077f8:	8afb      	ldrh	r3, [r7, #22]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	3301      	adds	r3, #1
 8007808:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800780a:	8afb      	ldrh	r3, [r7, #22]
 800780c:	3302      	adds	r3, #2
 800780e:	82fb      	strh	r3, [r7, #22]
 8007810:	8afa      	ldrh	r2, [r7, #22]
 8007812:	8abb      	ldrh	r3, [r7, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	d3ef      	bcc.n	80077f8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	701a      	strb	r2, [r3, #0]
  }
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800782a:	b480      	push	{r7}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	881a      	ldrh	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	4413      	add	r3, r2
 8007840:	b29a      	uxth	r2, r3
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4413      	add	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800786e:	2301      	movs	r3, #1
 8007870:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	789b      	ldrb	r3, [r3, #2]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d002      	beq.n	8007880 <USBH_CtlReq+0x20>
 800787a:	2b02      	cmp	r3, #2
 800787c:	d00f      	beq.n	800789e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800787e:	e027      	b.n	80078d0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2202      	movs	r2, #2
 8007896:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007898:	2301      	movs	r3, #1
 800789a:	75fb      	strb	r3, [r7, #23]
      break;
 800789c:	e018      	b.n	80078d0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f81c 	bl	80078dc <USBH_HandleControl>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <USBH_CtlReq+0x54>
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d106      	bne.n	80078c2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	761a      	strb	r2, [r3, #24]
      break;
 80078c0:	e005      	b.n	80078ce <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d102      	bne.n	80078ce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	709a      	strb	r2, [r3, #2]
      break;
 80078ce:	bf00      	nop
  }
  return status;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	7e1b      	ldrb	r3, [r3, #24]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	2b0a      	cmp	r3, #10
 80078f4:	f200 8156 	bhi.w	8007ba4 <USBH_HandleControl+0x2c8>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <USBH_HandleControl+0x24>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	0800792d 	.word	0x0800792d
 8007904:	08007947 	.word	0x08007947
 8007908:	080079b1 	.word	0x080079b1
 800790c:	080079d7 	.word	0x080079d7
 8007910:	08007a0f 	.word	0x08007a0f
 8007914:	08007a39 	.word	0x08007a39
 8007918:	08007a8b 	.word	0x08007a8b
 800791c:	08007aad 	.word	0x08007aad
 8007920:	08007ae9 	.word	0x08007ae9
 8007924:	08007b0f 	.word	0x08007b0f
 8007928:	08007b4d 	.word	0x08007b4d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f103 0110 	add.w	r1, r3, #16
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	795b      	ldrb	r3, [r3, #5]
 8007936:	461a      	mov	r2, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f943 	bl	8007bc4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2202      	movs	r2, #2
 8007942:	761a      	strb	r2, [r3, #24]
      break;
 8007944:	e139      	b.n	8007bba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	795b      	ldrb	r3, [r3, #5]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fcc5 	bl	80082dc <USBH_LL_GetURBState>
 8007952:	4603      	mov	r3, r0
 8007954:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d11e      	bne.n	800799a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7c1b      	ldrb	r3, [r3, #16]
 8007960:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007964:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	8adb      	ldrh	r3, [r3, #22]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800796e:	7b7b      	ldrb	r3, [r7, #13]
 8007970:	2b80      	cmp	r3, #128	; 0x80
 8007972:	d103      	bne.n	800797c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2203      	movs	r2, #3
 8007978:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800797a:	e115      	b.n	8007ba8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2205      	movs	r2, #5
 8007980:	761a      	strb	r2, [r3, #24]
      break;
 8007982:	e111      	b.n	8007ba8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007984:	7b7b      	ldrb	r3, [r7, #13]
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d103      	bne.n	8007992 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2209      	movs	r2, #9
 800798e:	761a      	strb	r2, [r3, #24]
      break;
 8007990:	e10a      	b.n	8007ba8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2207      	movs	r2, #7
 8007996:	761a      	strb	r2, [r3, #24]
      break;
 8007998:	e106      	b.n	8007ba8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b04      	cmp	r3, #4
 800799e:	d003      	beq.n	80079a8 <USBH_HandleControl+0xcc>
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	f040 8100 	bne.w	8007ba8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	220b      	movs	r2, #11
 80079ac:	761a      	strb	r2, [r3, #24]
      break;
 80079ae:	e0fb      	b.n	8007ba8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6899      	ldr	r1, [r3, #8]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	899a      	ldrh	r2, [r3, #12]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	791b      	ldrb	r3, [r3, #4]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f93a 	bl	8007c42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2204      	movs	r2, #4
 80079d2:	761a      	strb	r2, [r3, #24]
      break;
 80079d4:	e0f1      	b.n	8007bba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	791b      	ldrb	r3, [r3, #4]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fc7d 	bl	80082dc <USBH_LL_GetURBState>
 80079e2:	4603      	mov	r3, r0
 80079e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d102      	bne.n	80079f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2209      	movs	r2, #9
 80079f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b05      	cmp	r3, #5
 80079f6:	d102      	bne.n	80079fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079f8:	2303      	movs	r3, #3
 80079fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079fc:	e0d6      	b.n	8007bac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	f040 80d3 	bne.w	8007bac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	220b      	movs	r2, #11
 8007a0a:	761a      	strb	r2, [r3, #24]
      break;
 8007a0c:	e0ce      	b.n	8007bac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6899      	ldr	r1, [r3, #8]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	899a      	ldrh	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	795b      	ldrb	r3, [r3, #5]
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	9000      	str	r0, [sp, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f8ea 	bl	8007bf8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2206      	movs	r2, #6
 8007a34:	761a      	strb	r2, [r3, #24]
      break;
 8007a36:	e0c0      	b.n	8007bba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	795b      	ldrb	r3, [r3, #5]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fc4c 	bl	80082dc <USBH_LL_GetURBState>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d103      	bne.n	8007a56 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2207      	movs	r2, #7
 8007a52:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a54:	e0ac      	b.n	8007bb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	d105      	bne.n	8007a68 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	220c      	movs	r2, #12
 8007a60:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a62:	2303      	movs	r3, #3
 8007a64:	73fb      	strb	r3, [r7, #15]
      break;
 8007a66:	e0a3      	b.n	8007bb0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d103      	bne.n	8007a76 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2205      	movs	r2, #5
 8007a72:	761a      	strb	r2, [r3, #24]
      break;
 8007a74:	e09c      	b.n	8007bb0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	f040 8099 	bne.w	8007bb0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	220b      	movs	r2, #11
 8007a82:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a84:	2302      	movs	r3, #2
 8007a86:	73fb      	strb	r3, [r7, #15]
      break;
 8007a88:	e092      	b.n	8007bb0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f8d5 	bl	8007c42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	761a      	strb	r2, [r3, #24]

      break;
 8007aaa:	e086      	b.n	8007bba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	791b      	ldrb	r3, [r3, #4]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fc12 	bl	80082dc <USBH_LL_GetURBState>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d105      	bne.n	8007ace <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	220d      	movs	r2, #13
 8007ac6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007acc:	e072      	b.n	8007bb4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d103      	bne.n	8007adc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	220b      	movs	r2, #11
 8007ad8:	761a      	strb	r2, [r3, #24]
      break;
 8007ada:	e06b      	b.n	8007bb4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	d168      	bne.n	8007bb4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae6:	e065      	b.n	8007bb4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	795b      	ldrb	r3, [r3, #5]
 8007aec:	2201      	movs	r2, #1
 8007aee:	9200      	str	r2, [sp, #0]
 8007af0:	2200      	movs	r2, #0
 8007af2:	2100      	movs	r1, #0
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f87f 	bl	8007bf8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	220a      	movs	r2, #10
 8007b0a:	761a      	strb	r2, [r3, #24]
      break;
 8007b0c:	e055      	b.n	8007bba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	795b      	ldrb	r3, [r3, #5]
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fbe1 	bl	80082dc <USBH_LL_GetURBState>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d105      	bne.n	8007b30 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	220d      	movs	r2, #13
 8007b2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b2e:	e043      	b.n	8007bb8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d103      	bne.n	8007b3e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2209      	movs	r2, #9
 8007b3a:	761a      	strb	r2, [r3, #24]
      break;
 8007b3c:	e03c      	b.n	8007bb8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d139      	bne.n	8007bb8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	220b      	movs	r2, #11
 8007b48:	761a      	strb	r2, [r3, #24]
      break;
 8007b4a:	e035      	b.n	8007bb8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7e5b      	ldrb	r3, [r3, #25]
 8007b50:	3301      	adds	r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	765a      	strb	r2, [r3, #25]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7e5b      	ldrb	r3, [r3, #25]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d806      	bhi.n	8007b6e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b6c:	e025      	b.n	8007bba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b74:	2106      	movs	r1, #6
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	795b      	ldrb	r3, [r3, #5]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f90c 	bl	8007da4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	791b      	ldrb	r3, [r3, #4]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f906 	bl	8007da4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba2:	e00a      	b.n	8007bba <USBH_HandleControl+0x2de>

    default:
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e008      	b.n	8007bba <USBH_HandleControl+0x2de>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e006      	b.n	8007bba <USBH_HandleControl+0x2de>
      break;
 8007bac:	bf00      	nop
 8007bae:	e004      	b.n	8007bba <USBH_HandleControl+0x2de>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e002      	b.n	8007bba <USBH_HandleControl+0x2de>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <USBH_HandleControl+0x2de>
      break;
 8007bb8:	bf00      	nop
  }

  return status;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af04      	add	r7, sp, #16
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bd2:	79f9      	ldrb	r1, [r7, #7]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	2308      	movs	r3, #8
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	2300      	movs	r3, #0
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	2300      	movs	r3, #0
 8007be6:	2200      	movs	r2, #0
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fb46 	bl	800827a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af04      	add	r7, sp, #16
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4611      	mov	r1, r2
 8007c04:	461a      	mov	r2, r3
 8007c06:	460b      	mov	r3, r1
 8007c08:	80fb      	strh	r3, [r7, #6]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c1c:	7979      	ldrb	r1, [r7, #5]
 8007c1e:	7e3b      	ldrb	r3, [r7, #24]
 8007c20:	9303      	str	r3, [sp, #12]
 8007c22:	88fb      	ldrh	r3, [r7, #6]
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2200      	movs	r2, #0
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fb21 	bl	800827a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b088      	sub	sp, #32
 8007c46:	af04      	add	r7, sp, #16
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	460b      	mov	r3, r1
 8007c52:	80fb      	strh	r3, [r7, #6]
 8007c54:	4613      	mov	r3, r2
 8007c56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c58:	7979      	ldrb	r1, [r7, #5]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	9303      	str	r3, [sp, #12]
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	9302      	str	r3, [sp, #8]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	9301      	str	r3, [sp, #4]
 8007c66:	2301      	movs	r3, #1
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fb03 	bl	800827a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c74:	2300      	movs	r3, #0

}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b088      	sub	sp, #32
 8007c82:	af04      	add	r7, sp, #16
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	80fb      	strh	r3, [r7, #6]
 8007c90:	4613      	mov	r3, r2
 8007c92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ca2:	7979      	ldrb	r1, [r7, #5]
 8007ca4:	7e3b      	ldrb	r3, [r7, #24]
 8007ca6:	9303      	str	r3, [sp, #12]
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	9302      	str	r3, [sp, #8]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fade 	bl	800827a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af04      	add	r7, sp, #16
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	80fb      	strh	r3, [r7, #6]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cde:	7979      	ldrb	r1, [r7, #5]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9303      	str	r3, [sp, #12]
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	9302      	str	r3, [sp, #8]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	2301      	movs	r3, #1
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fac0 	bl	800827a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af04      	add	r7, sp, #16
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	461a      	mov	r2, r3
 8007d12:	4603      	mov	r3, r0
 8007d14:	70fb      	strb	r3, [r7, #3]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70bb      	strb	r3, [r7, #2]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d1e:	7878      	ldrb	r0, [r7, #1]
 8007d20:	78ba      	ldrb	r2, [r7, #2]
 8007d22:	78f9      	ldrb	r1, [r7, #3]
 8007d24:	8b3b      	ldrh	r3, [r7, #24]
 8007d26:	9302      	str	r3, [sp, #8]
 8007d28:	7d3b      	ldrb	r3, [r7, #20]
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	7c3b      	ldrb	r3, [r7, #16]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	4603      	mov	r3, r0
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa53 	bl	80081de <USBH_LL_OpenPipe>

  return USBH_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa72 	bl	800823c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f836 	bl	8007de0 <USBH_GetFreePipe>
 8007d74:	4603      	mov	r3, r0
 8007d76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d78:	89fb      	ldrh	r3, [r7, #14]
 8007d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00a      	beq.n	8007d98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d82:	78fa      	ldrb	r2, [r7, #3]
 8007d84:	89fb      	ldrh	r3, [r7, #14]
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	33e0      	adds	r3, #224	; 0xe0
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d98:	89fb      	ldrh	r3, [r7, #14]
 8007d9a:	b2db      	uxtb	r3, r3
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	2b0f      	cmp	r3, #15
 8007db4:	d80d      	bhi.n	8007dd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	33e0      	adds	r3, #224	; 0xe0
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	33e0      	adds	r3, #224	; 0xe0
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	440b      	add	r3, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]
 8007df0:	e00f      	b.n	8007e12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	33e0      	adds	r3, #224	; 0xe0
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	e007      	b.n	8007e1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	73fb      	strb	r3, [r7, #15]
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	2b0f      	cmp	r3, #15
 8007e16:	d9ec      	bls.n	8007df2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	490e      	ldr	r1, [pc, #56]	; (8007e68 <MX_USB_HOST_Init+0x40>)
 8007e30:	480e      	ldr	r0, [pc, #56]	; (8007e6c <MX_USB_HOST_Init+0x44>)
 8007e32:	f7fe fba7 	bl	8006584 <USBH_Init>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e3c:	f7f8 fdce 	bl	80009dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e40:	490b      	ldr	r1, [pc, #44]	; (8007e70 <MX_USB_HOST_Init+0x48>)
 8007e42:	480a      	ldr	r0, [pc, #40]	; (8007e6c <MX_USB_HOST_Init+0x44>)
 8007e44:	f7fe fc2c 	bl	80066a0 <USBH_RegisterClass>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e4e:	f7f8 fdc5 	bl	80009dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e52:	4806      	ldr	r0, [pc, #24]	; (8007e6c <MX_USB_HOST_Init+0x44>)
 8007e54:	f7fe fcb0 	bl	80067b8 <USBH_Start>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e5e:	f7f8 fdbd 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e62:	bf00      	nop
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	08007e89 	.word	0x08007e89
 8007e6c:	200001f0 	.word	0x200001f0
 8007e70:	2000000c 	.word	0x2000000c

08007e74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e78:	4802      	ldr	r0, [pc, #8]	; (8007e84 <MX_USB_HOST_Process+0x10>)
 8007e7a:	f7fe fcad 	bl	80067d8 <USBH_Process>
}
 8007e7e:	bf00      	nop
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	200001f0 	.word	0x200001f0

08007e88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	d819      	bhi.n	8007ed0 <USBH_UserProcess+0x48>
 8007e9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <USBH_UserProcess+0x1c>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007ed1 	.word	0x08007ed1
 8007ea8:	08007ec1 	.word	0x08007ec1
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007eb9 	.word	0x08007eb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007eb8:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <USBH_UserProcess+0x58>)
 8007eba:	2203      	movs	r2, #3
 8007ebc:	701a      	strb	r2, [r3, #0]
  break;
 8007ebe:	e008      	b.n	8007ed2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <USBH_UserProcess+0x58>)
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	701a      	strb	r2, [r3, #0]
  break;
 8007ec6:	e004      	b.n	8007ed2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <USBH_UserProcess+0x58>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
  break;
 8007ece:	e000      	b.n	8007ed2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ed0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	200005c8 	.word	0x200005c8

08007ee4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eec:	f107 0314 	add.w	r3, r7, #20
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	609a      	str	r2, [r3, #8]
 8007ef8:	60da      	str	r2, [r3, #12]
 8007efa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f04:	d147      	bne.n	8007f96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f06:	2300      	movs	r3, #0
 8007f08:	613b      	str	r3, [r7, #16]
 8007f0a:	4b25      	ldr	r3, [pc, #148]	; (8007fa0 <HAL_HCD_MspInit+0xbc>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	4a24      	ldr	r2, [pc, #144]	; (8007fa0 <HAL_HCD_MspInit+0xbc>)
 8007f10:	f043 0301 	orr.w	r3, r3, #1
 8007f14:	6313      	str	r3, [r2, #48]	; 0x30
 8007f16:	4b22      	ldr	r3, [pc, #136]	; (8007fa0 <HAL_HCD_MspInit+0xbc>)
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	4619      	mov	r1, r3
 8007f36:	481b      	ldr	r0, [pc, #108]	; (8007fa4 <HAL_HCD_MspInit+0xc0>)
 8007f38:	f7f9 fd9a 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f42:	2302      	movs	r3, #2
 8007f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f4e:	230a      	movs	r3, #10
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f52:	f107 0314 	add.w	r3, r7, #20
 8007f56:	4619      	mov	r1, r3
 8007f58:	4812      	ldr	r0, [pc, #72]	; (8007fa4 <HAL_HCD_MspInit+0xc0>)
 8007f5a:	f7f9 fd89 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f5e:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <HAL_HCD_MspInit+0xbc>)
 8007f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f62:	4a0f      	ldr	r2, [pc, #60]	; (8007fa0 <HAL_HCD_MspInit+0xbc>)
 8007f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f68:	6353      	str	r3, [r2, #52]	; 0x34
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <HAL_HCD_MspInit+0xbc>)
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	4a0b      	ldr	r2, [pc, #44]	; (8007fa0 <HAL_HCD_MspInit+0xbc>)
 8007f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f78:	6453      	str	r3, [r2, #68]	; 0x44
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_HCD_MspInit+0xbc>)
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2100      	movs	r1, #0
 8007f8a:	2043      	movs	r0, #67	; 0x43
 8007f8c:	f7f9 fd39 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f90:	2043      	movs	r0, #67	; 0x43
 8007f92:	f7f9 fd52 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f96:	bf00      	nop
 8007f98:	3728      	adds	r7, #40	; 0x28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	40020000 	.word	0x40020000

08007fa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fe ffed 	bl	8006f96 <USBH_LL_IncTimer>
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff f825 	bl	8007022 <USBH_LL_Connect>
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff f82e 	bl	8007050 <USBH_LL_Disconnect>
}
 8007ff4:	bf00      	nop
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
 8008008:	4613      	mov	r3, r2
 800800a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe ffdf 	bl	8006fea <USBH_LL_PortEnabled>
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe ffdf 	bl	8007006 <USBH_LL_PortDisabled>
}
 8008048:	bf00      	nop
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800805e:	2b01      	cmp	r3, #1
 8008060:	d12a      	bne.n	80080b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008062:	4a18      	ldr	r2, [pc, #96]	; (80080c4 <USBH_LL_Init+0x74>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a15      	ldr	r2, [pc, #84]	; (80080c4 <USBH_LL_Init+0x74>)
 800806e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008072:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <USBH_LL_Init+0x74>)
 8008074:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008078:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800807a:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <USBH_LL_Init+0x74>)
 800807c:	2208      	movs	r2, #8
 800807e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008080:	4b10      	ldr	r3, [pc, #64]	; (80080c4 <USBH_LL_Init+0x74>)
 8008082:	2201      	movs	r2, #1
 8008084:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008086:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <USBH_LL_Init+0x74>)
 8008088:	2200      	movs	r2, #0
 800808a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800808c:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <USBH_LL_Init+0x74>)
 800808e:	2202      	movs	r2, #2
 8008090:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008092:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <USBH_LL_Init+0x74>)
 8008094:	2200      	movs	r2, #0
 8008096:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008098:	480a      	ldr	r0, [pc, #40]	; (80080c4 <USBH_LL_Init+0x74>)
 800809a:	f7f9 feb6 	bl	8001e0a <HAL_HCD_Init>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80080a4:	f7f8 fc9a 	bl	80009dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80080a8:	4806      	ldr	r0, [pc, #24]	; (80080c4 <USBH_LL_Init+0x74>)
 80080aa:	f7fa fa9a 	bl	80025e2 <HAL_HCD_GetCurrentFrame>
 80080ae:	4603      	mov	r3, r0
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fe ff60 	bl	8006f78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	200005cc 	.word	0x200005cc

080080c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fa fa09 	bl	80024f6 <HAL_HCD_Start>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 f95c 	bl	80083a8 <USBH_Get_USB_Status>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008114:	4618      	mov	r0, r3
 8008116:	f7fa fa11 	bl	800253c <HAL_HCD_Stop>
 800811a:	4603      	mov	r3, r0
 800811c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	4618      	mov	r0, r3
 8008122:	f000 f941 	bl	80083a8 <USBH_Get_USB_Status>
 8008126:	4603      	mov	r3, r0
 8008128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800812a:	7bbb      	ldrb	r3, [r7, #14]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800813c:	2301      	movs	r3, #1
 800813e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008146:	4618      	mov	r0, r3
 8008148:	f7fa fa59 	bl	80025fe <HAL_HCD_GetCurrentSpeed>
 800814c:	4603      	mov	r3, r0
 800814e:	2b02      	cmp	r3, #2
 8008150:	d00c      	beq.n	800816c <USBH_LL_GetSpeed+0x38>
 8008152:	2b02      	cmp	r3, #2
 8008154:	d80d      	bhi.n	8008172 <USBH_LL_GetSpeed+0x3e>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <USBH_LL_GetSpeed+0x2c>
 800815a:	2b01      	cmp	r3, #1
 800815c:	d003      	beq.n	8008166 <USBH_LL_GetSpeed+0x32>
 800815e:	e008      	b.n	8008172 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
    break;
 8008164:	e008      	b.n	8008178 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008166:	2301      	movs	r3, #1
 8008168:	73fb      	strb	r3, [r7, #15]
    break;
 800816a:	e005      	b.n	8008178 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800816c:	2302      	movs	r3, #2
 800816e:	73fb      	strb	r3, [r7, #15]
    break;
 8008170:	e002      	b.n	8008178 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008172:	2301      	movs	r3, #1
 8008174:	73fb      	strb	r3, [r7, #15]
    break;
 8008176:	bf00      	nop
  }
  return  speed;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008198:	4618      	mov	r0, r3
 800819a:	f7fa f9ec 	bl	8002576 <HAL_HCD_ResetPort>
 800819e:	4603      	mov	r3, r0
 80081a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 f8ff 	bl	80083a8 <USBH_Get_USB_Status>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ca:	78fa      	ldrb	r2, [r7, #3]
 80081cc:	4611      	mov	r1, r2
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fa f9f3 	bl	80025ba <HAL_HCD_HC_GetXferCount>
 80081d4:	4603      	mov	r3, r0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081de:	b590      	push	{r4, r7, lr}
 80081e0:	b089      	sub	sp, #36	; 0x24
 80081e2:	af04      	add	r7, sp, #16
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	461a      	mov	r2, r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	70fb      	strb	r3, [r7, #3]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70bb      	strb	r3, [r7, #2]
 80081f4:	4613      	mov	r3, r2
 80081f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008206:	787c      	ldrb	r4, [r7, #1]
 8008208:	78ba      	ldrb	r2, [r7, #2]
 800820a:	78f9      	ldrb	r1, [r7, #3]
 800820c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800820e:	9302      	str	r3, [sp, #8]
 8008210:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	4623      	mov	r3, r4
 800821e:	f7f9 fe56 	bl	8001ece <HAL_HCD_HC_Init>
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f8bd 	bl	80083a8 <USBH_Get_USB_Status>
 800822e:	4603      	mov	r3, r0
 8008230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008232:	7bbb      	ldrb	r3, [r7, #14]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	bd90      	pop	{r4, r7, pc}

0800823c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	460b      	mov	r3, r1
 8008246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	4611      	mov	r1, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f7f9 fec6 	bl	8001fec <HAL_HCD_HC_Halt>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f89e 	bl	80083a8 <USBH_Get_USB_Status>
 800826c:	4603      	mov	r3, r0
 800826e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008270:	7bbb      	ldrb	r3, [r7, #14]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800827a:	b590      	push	{r4, r7, lr}
 800827c:	b089      	sub	sp, #36	; 0x24
 800827e:	af04      	add	r7, sp, #16
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	461a      	mov	r2, r3
 8008288:	4603      	mov	r3, r0
 800828a:	70fb      	strb	r3, [r7, #3]
 800828c:	460b      	mov	r3, r1
 800828e:	70bb      	strb	r3, [r7, #2]
 8008290:	4613      	mov	r3, r2
 8008292:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80082a2:	787c      	ldrb	r4, [r7, #1]
 80082a4:	78ba      	ldrb	r2, [r7, #2]
 80082a6:	78f9      	ldrb	r1, [r7, #3]
 80082a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082ac:	9303      	str	r3, [sp, #12]
 80082ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	4623      	mov	r3, r4
 80082be:	f7f9 feb9 	bl	8002034 <HAL_HCD_HC_SubmitRequest>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f86d 	bl	80083a8 <USBH_Get_USB_Status>
 80082ce:	4603      	mov	r3, r0
 80082d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd90      	pop	{r4, r7, pc}

080082dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fa f94d 	bl	8002592 <HAL_HCD_HC_GetURBState>
 80082f8:	4603      	mov	r3, r0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008314:	2b01      	cmp	r3, #1
 8008316:	d103      	bne.n	8008320 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 f870 	bl	8008400 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008320:	20c8      	movs	r0, #200	; 0xc8
 8008322:	f7f9 f80d 	bl	8001340 <HAL_Delay>
  return USBH_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
 800833c:	4613      	mov	r3, r2
 800833e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008346:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	212c      	movs	r1, #44	; 0x2c
 800834e:	fb01 f303 	mul.w	r3, r1, r3
 8008352:	4413      	add	r3, r2
 8008354:	333b      	adds	r3, #59	; 0x3b
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d009      	beq.n	8008370 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	212c      	movs	r1, #44	; 0x2c
 8008362:	fb01 f303 	mul.w	r3, r1, r3
 8008366:	4413      	add	r3, r2
 8008368:	3354      	adds	r3, #84	; 0x54
 800836a:	78ba      	ldrb	r2, [r7, #2]
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e008      	b.n	8008382 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	212c      	movs	r1, #44	; 0x2c
 8008376:	fb01 f303 	mul.w	r3, r1, r3
 800837a:	4413      	add	r3, r2
 800837c:	3355      	adds	r3, #85	; 0x55
 800837e:	78ba      	ldrb	r2, [r7, #2]
 8008380:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7f8 ffd1 	bl	8001340 <HAL_Delay>
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d817      	bhi.n	80083ec <USBH_Get_USB_Status+0x44>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <USBH_Get_USB_Status+0x1c>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083d5 	.word	0x080083d5
 80083c8:	080083db 	.word	0x080083db
 80083cc:	080083e1 	.word	0x080083e1
 80083d0:	080083e7 	.word	0x080083e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
    break;
 80083d8:	e00b      	b.n	80083f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083da:	2302      	movs	r3, #2
 80083dc:	73fb      	strb	r3, [r7, #15]
    break;
 80083de:	e008      	b.n	80083f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
    break;
 80083e4:	e005      	b.n	80083f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083e6:	2302      	movs	r3, #2
 80083e8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ea:	e002      	b.n	80083f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083ec:	2302      	movs	r3, #2
 80083ee:	73fb      	strb	r3, [r7, #15]
    break;
 80083f0:	bf00      	nop
  }
  return usb_status;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800840a:	79fb      	ldrb	r3, [r7, #7]
 800840c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
 8008418:	e001      	b.n	800841e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800841a:	2301      	movs	r3, #1
 800841c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	461a      	mov	r2, r3
 8008422:	2101      	movs	r1, #1
 8008424:	4803      	ldr	r0, [pc, #12]	; (8008434 <MX_DriverVbusFS+0x34>)
 8008426:	f7f9 fcd7 	bl	8001dd8 <HAL_GPIO_WritePin>
}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	40020800 	.word	0x40020800

08008438 <__errno>:
 8008438:	4b01      	ldr	r3, [pc, #4]	; (8008440 <__errno+0x8>)
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	2000002c 	.word	0x2000002c

08008444 <_fclose_r>:
 8008444:	b570      	push	{r4, r5, r6, lr}
 8008446:	4605      	mov	r5, r0
 8008448:	460c      	mov	r4, r1
 800844a:	b911      	cbnz	r1, 8008452 <_fclose_r+0xe>
 800844c:	2600      	movs	r6, #0
 800844e:	4630      	mov	r0, r6
 8008450:	bd70      	pop	{r4, r5, r6, pc}
 8008452:	b118      	cbz	r0, 800845c <_fclose_r+0x18>
 8008454:	6983      	ldr	r3, [r0, #24]
 8008456:	b90b      	cbnz	r3, 800845c <_fclose_r+0x18>
 8008458:	f000 f994 	bl	8008784 <__sinit>
 800845c:	4b2c      	ldr	r3, [pc, #176]	; (8008510 <_fclose_r+0xcc>)
 800845e:	429c      	cmp	r4, r3
 8008460:	d114      	bne.n	800848c <_fclose_r+0x48>
 8008462:	686c      	ldr	r4, [r5, #4]
 8008464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008466:	07d8      	lsls	r0, r3, #31
 8008468:	d405      	bmi.n	8008476 <_fclose_r+0x32>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	0599      	lsls	r1, r3, #22
 800846e:	d402      	bmi.n	8008476 <_fclose_r+0x32>
 8008470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008472:	f000 fc73 	bl	8008d5c <__retarget_lock_acquire_recursive>
 8008476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847a:	b98b      	cbnz	r3, 80084a0 <_fclose_r+0x5c>
 800847c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800847e:	f016 0601 	ands.w	r6, r6, #1
 8008482:	d1e3      	bne.n	800844c <_fclose_r+0x8>
 8008484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008486:	f000 fc6a 	bl	8008d5e <__retarget_lock_release_recursive>
 800848a:	e7e0      	b.n	800844e <_fclose_r+0xa>
 800848c:	4b21      	ldr	r3, [pc, #132]	; (8008514 <_fclose_r+0xd0>)
 800848e:	429c      	cmp	r4, r3
 8008490:	d101      	bne.n	8008496 <_fclose_r+0x52>
 8008492:	68ac      	ldr	r4, [r5, #8]
 8008494:	e7e6      	b.n	8008464 <_fclose_r+0x20>
 8008496:	4b20      	ldr	r3, [pc, #128]	; (8008518 <_fclose_r+0xd4>)
 8008498:	429c      	cmp	r4, r3
 800849a:	bf08      	it	eq
 800849c:	68ec      	ldreq	r4, [r5, #12]
 800849e:	e7e1      	b.n	8008464 <_fclose_r+0x20>
 80084a0:	4621      	mov	r1, r4
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 f842 	bl	800852c <__sflush_r>
 80084a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80084aa:	4606      	mov	r6, r0
 80084ac:	b133      	cbz	r3, 80084bc <_fclose_r+0x78>
 80084ae:	6a21      	ldr	r1, [r4, #32]
 80084b0:	4628      	mov	r0, r5
 80084b2:	4798      	blx	r3
 80084b4:	2800      	cmp	r0, #0
 80084b6:	bfb8      	it	lt
 80084b8:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	061a      	lsls	r2, r3, #24
 80084c0:	d503      	bpl.n	80084ca <_fclose_r+0x86>
 80084c2:	6921      	ldr	r1, [r4, #16]
 80084c4:	4628      	mov	r0, r5
 80084c6:	f000 fcd7 	bl	8008e78 <_free_r>
 80084ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084cc:	b141      	cbz	r1, 80084e0 <_fclose_r+0x9c>
 80084ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084d2:	4299      	cmp	r1, r3
 80084d4:	d002      	beq.n	80084dc <_fclose_r+0x98>
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 fcce 	bl	8008e78 <_free_r>
 80084dc:	2300      	movs	r3, #0
 80084de:	6363      	str	r3, [r4, #52]	; 0x34
 80084e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80084e2:	b121      	cbz	r1, 80084ee <_fclose_r+0xaa>
 80084e4:	4628      	mov	r0, r5
 80084e6:	f000 fcc7 	bl	8008e78 <_free_r>
 80084ea:	2300      	movs	r3, #0
 80084ec:	64a3      	str	r3, [r4, #72]	; 0x48
 80084ee:	f000 f931 	bl	8008754 <__sfp_lock_acquire>
 80084f2:	2300      	movs	r3, #0
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f8:	07db      	lsls	r3, r3, #31
 80084fa:	d402      	bmi.n	8008502 <_fclose_r+0xbe>
 80084fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084fe:	f000 fc2e 	bl	8008d5e <__retarget_lock_release_recursive>
 8008502:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008504:	f000 fc29 	bl	8008d5a <__retarget_lock_close_recursive>
 8008508:	f000 f92a 	bl	8008760 <__sfp_lock_release>
 800850c:	e79f      	b.n	800844e <_fclose_r+0xa>
 800850e:	bf00      	nop
 8008510:	080095e8 	.word	0x080095e8
 8008514:	08009608 	.word	0x08009608
 8008518:	080095c8 	.word	0x080095c8

0800851c <fclose>:
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <fclose+0xc>)
 800851e:	4601      	mov	r1, r0
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	f7ff bf8f 	b.w	8008444 <_fclose_r>
 8008526:	bf00      	nop
 8008528:	2000002c 	.word	0x2000002c

0800852c <__sflush_r>:
 800852c:	898a      	ldrh	r2, [r1, #12]
 800852e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008532:	4605      	mov	r5, r0
 8008534:	0710      	lsls	r0, r2, #28
 8008536:	460c      	mov	r4, r1
 8008538:	d458      	bmi.n	80085ec <__sflush_r+0xc0>
 800853a:	684b      	ldr	r3, [r1, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	dc05      	bgt.n	800854c <__sflush_r+0x20>
 8008540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	dc02      	bgt.n	800854c <__sflush_r+0x20>
 8008546:	2000      	movs	r0, #0
 8008548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800854c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800854e:	2e00      	cmp	r6, #0
 8008550:	d0f9      	beq.n	8008546 <__sflush_r+0x1a>
 8008552:	2300      	movs	r3, #0
 8008554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008558:	682f      	ldr	r7, [r5, #0]
 800855a:	602b      	str	r3, [r5, #0]
 800855c:	d032      	beq.n	80085c4 <__sflush_r+0x98>
 800855e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	075a      	lsls	r2, r3, #29
 8008564:	d505      	bpl.n	8008572 <__sflush_r+0x46>
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	1ac0      	subs	r0, r0, r3
 800856a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800856c:	b10b      	cbz	r3, 8008572 <__sflush_r+0x46>
 800856e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008570:	1ac0      	subs	r0, r0, r3
 8008572:	2300      	movs	r3, #0
 8008574:	4602      	mov	r2, r0
 8008576:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008578:	6a21      	ldr	r1, [r4, #32]
 800857a:	4628      	mov	r0, r5
 800857c:	47b0      	blx	r6
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	d106      	bne.n	8008592 <__sflush_r+0x66>
 8008584:	6829      	ldr	r1, [r5, #0]
 8008586:	291d      	cmp	r1, #29
 8008588:	d82c      	bhi.n	80085e4 <__sflush_r+0xb8>
 800858a:	4a2a      	ldr	r2, [pc, #168]	; (8008634 <__sflush_r+0x108>)
 800858c:	40ca      	lsrs	r2, r1
 800858e:	07d6      	lsls	r6, r2, #31
 8008590:	d528      	bpl.n	80085e4 <__sflush_r+0xb8>
 8008592:	2200      	movs	r2, #0
 8008594:	6062      	str	r2, [r4, #4]
 8008596:	04d9      	lsls	r1, r3, #19
 8008598:	6922      	ldr	r2, [r4, #16]
 800859a:	6022      	str	r2, [r4, #0]
 800859c:	d504      	bpl.n	80085a8 <__sflush_r+0x7c>
 800859e:	1c42      	adds	r2, r0, #1
 80085a0:	d101      	bne.n	80085a6 <__sflush_r+0x7a>
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	b903      	cbnz	r3, 80085a8 <__sflush_r+0x7c>
 80085a6:	6560      	str	r0, [r4, #84]	; 0x54
 80085a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085aa:	602f      	str	r7, [r5, #0]
 80085ac:	2900      	cmp	r1, #0
 80085ae:	d0ca      	beq.n	8008546 <__sflush_r+0x1a>
 80085b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b4:	4299      	cmp	r1, r3
 80085b6:	d002      	beq.n	80085be <__sflush_r+0x92>
 80085b8:	4628      	mov	r0, r5
 80085ba:	f000 fc5d 	bl	8008e78 <_free_r>
 80085be:	2000      	movs	r0, #0
 80085c0:	6360      	str	r0, [r4, #52]	; 0x34
 80085c2:	e7c1      	b.n	8008548 <__sflush_r+0x1c>
 80085c4:	6a21      	ldr	r1, [r4, #32]
 80085c6:	2301      	movs	r3, #1
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b0      	blx	r6
 80085cc:	1c41      	adds	r1, r0, #1
 80085ce:	d1c7      	bne.n	8008560 <__sflush_r+0x34>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0c4      	beq.n	8008560 <__sflush_r+0x34>
 80085d6:	2b1d      	cmp	r3, #29
 80085d8:	d001      	beq.n	80085de <__sflush_r+0xb2>
 80085da:	2b16      	cmp	r3, #22
 80085dc:	d101      	bne.n	80085e2 <__sflush_r+0xb6>
 80085de:	602f      	str	r7, [r5, #0]
 80085e0:	e7b1      	b.n	8008546 <__sflush_r+0x1a>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e8:	81a3      	strh	r3, [r4, #12]
 80085ea:	e7ad      	b.n	8008548 <__sflush_r+0x1c>
 80085ec:	690f      	ldr	r7, [r1, #16]
 80085ee:	2f00      	cmp	r7, #0
 80085f0:	d0a9      	beq.n	8008546 <__sflush_r+0x1a>
 80085f2:	0793      	lsls	r3, r2, #30
 80085f4:	680e      	ldr	r6, [r1, #0]
 80085f6:	bf08      	it	eq
 80085f8:	694b      	ldreq	r3, [r1, #20]
 80085fa:	600f      	str	r7, [r1, #0]
 80085fc:	bf18      	it	ne
 80085fe:	2300      	movne	r3, #0
 8008600:	eba6 0807 	sub.w	r8, r6, r7
 8008604:	608b      	str	r3, [r1, #8]
 8008606:	f1b8 0f00 	cmp.w	r8, #0
 800860a:	dd9c      	ble.n	8008546 <__sflush_r+0x1a>
 800860c:	6a21      	ldr	r1, [r4, #32]
 800860e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008610:	4643      	mov	r3, r8
 8008612:	463a      	mov	r2, r7
 8008614:	4628      	mov	r0, r5
 8008616:	47b0      	blx	r6
 8008618:	2800      	cmp	r0, #0
 800861a:	dc06      	bgt.n	800862a <__sflush_r+0xfe>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008628:	e78e      	b.n	8008548 <__sflush_r+0x1c>
 800862a:	4407      	add	r7, r0
 800862c:	eba8 0800 	sub.w	r8, r8, r0
 8008630:	e7e9      	b.n	8008606 <__sflush_r+0xda>
 8008632:	bf00      	nop
 8008634:	20400001 	.word	0x20400001

08008638 <_fflush_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	690b      	ldr	r3, [r1, #16]
 800863c:	4605      	mov	r5, r0
 800863e:	460c      	mov	r4, r1
 8008640:	b913      	cbnz	r3, 8008648 <_fflush_r+0x10>
 8008642:	2500      	movs	r5, #0
 8008644:	4628      	mov	r0, r5
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	b118      	cbz	r0, 8008652 <_fflush_r+0x1a>
 800864a:	6983      	ldr	r3, [r0, #24]
 800864c:	b90b      	cbnz	r3, 8008652 <_fflush_r+0x1a>
 800864e:	f000 f899 	bl	8008784 <__sinit>
 8008652:	4b14      	ldr	r3, [pc, #80]	; (80086a4 <_fflush_r+0x6c>)
 8008654:	429c      	cmp	r4, r3
 8008656:	d11b      	bne.n	8008690 <_fflush_r+0x58>
 8008658:	686c      	ldr	r4, [r5, #4]
 800865a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0ef      	beq.n	8008642 <_fflush_r+0xa>
 8008662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008664:	07d0      	lsls	r0, r2, #31
 8008666:	d404      	bmi.n	8008672 <_fflush_r+0x3a>
 8008668:	0599      	lsls	r1, r3, #22
 800866a:	d402      	bmi.n	8008672 <_fflush_r+0x3a>
 800866c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800866e:	f000 fb75 	bl	8008d5c <__retarget_lock_acquire_recursive>
 8008672:	4628      	mov	r0, r5
 8008674:	4621      	mov	r1, r4
 8008676:	f7ff ff59 	bl	800852c <__sflush_r>
 800867a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800867c:	07da      	lsls	r2, r3, #31
 800867e:	4605      	mov	r5, r0
 8008680:	d4e0      	bmi.n	8008644 <_fflush_r+0xc>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	059b      	lsls	r3, r3, #22
 8008686:	d4dd      	bmi.n	8008644 <_fflush_r+0xc>
 8008688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800868a:	f000 fb68 	bl	8008d5e <__retarget_lock_release_recursive>
 800868e:	e7d9      	b.n	8008644 <_fflush_r+0xc>
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <_fflush_r+0x70>)
 8008692:	429c      	cmp	r4, r3
 8008694:	d101      	bne.n	800869a <_fflush_r+0x62>
 8008696:	68ac      	ldr	r4, [r5, #8]
 8008698:	e7df      	b.n	800865a <_fflush_r+0x22>
 800869a:	4b04      	ldr	r3, [pc, #16]	; (80086ac <_fflush_r+0x74>)
 800869c:	429c      	cmp	r4, r3
 800869e:	bf08      	it	eq
 80086a0:	68ec      	ldreq	r4, [r5, #12]
 80086a2:	e7da      	b.n	800865a <_fflush_r+0x22>
 80086a4:	080095e8 	.word	0x080095e8
 80086a8:	08009608 	.word	0x08009608
 80086ac:	080095c8 	.word	0x080095c8

080086b0 <fflush>:
 80086b0:	4601      	mov	r1, r0
 80086b2:	b920      	cbnz	r0, 80086be <fflush+0xe>
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <fflush+0x18>)
 80086b6:	4905      	ldr	r1, [pc, #20]	; (80086cc <fflush+0x1c>)
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 ba9c 	b.w	8008bf6 <_fwalk_reent>
 80086be:	4b04      	ldr	r3, [pc, #16]	; (80086d0 <fflush+0x20>)
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f7ff bfb9 	b.w	8008638 <_fflush_r>
 80086c6:	bf00      	nop
 80086c8:	08009628 	.word	0x08009628
 80086cc:	08008639 	.word	0x08008639
 80086d0:	2000002c 	.word	0x2000002c

080086d4 <std>:
 80086d4:	2300      	movs	r3, #0
 80086d6:	b510      	push	{r4, lr}
 80086d8:	4604      	mov	r4, r0
 80086da:	e9c0 3300 	strd	r3, r3, [r0]
 80086de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086e2:	6083      	str	r3, [r0, #8]
 80086e4:	8181      	strh	r1, [r0, #12]
 80086e6:	6643      	str	r3, [r0, #100]	; 0x64
 80086e8:	81c2      	strh	r2, [r0, #14]
 80086ea:	6183      	str	r3, [r0, #24]
 80086ec:	4619      	mov	r1, r3
 80086ee:	2208      	movs	r2, #8
 80086f0:	305c      	adds	r0, #92	; 0x5c
 80086f2:	f000 fbb9 	bl	8008e68 <memset>
 80086f6:	4b05      	ldr	r3, [pc, #20]	; (800870c <std+0x38>)
 80086f8:	6263      	str	r3, [r4, #36]	; 0x24
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <std+0x3c>)
 80086fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80086fe:	4b05      	ldr	r3, [pc, #20]	; (8008714 <std+0x40>)
 8008700:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008702:	4b05      	ldr	r3, [pc, #20]	; (8008718 <std+0x44>)
 8008704:	6224      	str	r4, [r4, #32]
 8008706:	6323      	str	r3, [r4, #48]	; 0x30
 8008708:	bd10      	pop	{r4, pc}
 800870a:	bf00      	nop
 800870c:	080091a5 	.word	0x080091a5
 8008710:	080091c7 	.word	0x080091c7
 8008714:	080091ff 	.word	0x080091ff
 8008718:	08009223 	.word	0x08009223

0800871c <_cleanup_r>:
 800871c:	4901      	ldr	r1, [pc, #4]	; (8008724 <_cleanup_r+0x8>)
 800871e:	f000 ba6a 	b.w	8008bf6 <_fwalk_reent>
 8008722:	bf00      	nop
 8008724:	08008639 	.word	0x08008639

08008728 <__sfmoreglue>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	2268      	movs	r2, #104	; 0x68
 800872c:	1e4d      	subs	r5, r1, #1
 800872e:	4355      	muls	r5, r2
 8008730:	460e      	mov	r6, r1
 8008732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008736:	f000 fc0b 	bl	8008f50 <_malloc_r>
 800873a:	4604      	mov	r4, r0
 800873c:	b140      	cbz	r0, 8008750 <__sfmoreglue+0x28>
 800873e:	2100      	movs	r1, #0
 8008740:	e9c0 1600 	strd	r1, r6, [r0]
 8008744:	300c      	adds	r0, #12
 8008746:	60a0      	str	r0, [r4, #8]
 8008748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800874c:	f000 fb8c 	bl	8008e68 <memset>
 8008750:	4620      	mov	r0, r4
 8008752:	bd70      	pop	{r4, r5, r6, pc}

08008754 <__sfp_lock_acquire>:
 8008754:	4801      	ldr	r0, [pc, #4]	; (800875c <__sfp_lock_acquire+0x8>)
 8008756:	f000 bb01 	b.w	8008d5c <__retarget_lock_acquire_recursive>
 800875a:	bf00      	nop
 800875c:	200008d1 	.word	0x200008d1

08008760 <__sfp_lock_release>:
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <__sfp_lock_release+0x8>)
 8008762:	f000 bafc 	b.w	8008d5e <__retarget_lock_release_recursive>
 8008766:	bf00      	nop
 8008768:	200008d1 	.word	0x200008d1

0800876c <__sinit_lock_acquire>:
 800876c:	4801      	ldr	r0, [pc, #4]	; (8008774 <__sinit_lock_acquire+0x8>)
 800876e:	f000 baf5 	b.w	8008d5c <__retarget_lock_acquire_recursive>
 8008772:	bf00      	nop
 8008774:	200008d2 	.word	0x200008d2

08008778 <__sinit_lock_release>:
 8008778:	4801      	ldr	r0, [pc, #4]	; (8008780 <__sinit_lock_release+0x8>)
 800877a:	f000 baf0 	b.w	8008d5e <__retarget_lock_release_recursive>
 800877e:	bf00      	nop
 8008780:	200008d2 	.word	0x200008d2

08008784 <__sinit>:
 8008784:	b510      	push	{r4, lr}
 8008786:	4604      	mov	r4, r0
 8008788:	f7ff fff0 	bl	800876c <__sinit_lock_acquire>
 800878c:	69a3      	ldr	r3, [r4, #24]
 800878e:	b11b      	cbz	r3, 8008798 <__sinit+0x14>
 8008790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008794:	f7ff bff0 	b.w	8008778 <__sinit_lock_release>
 8008798:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800879c:	6523      	str	r3, [r4, #80]	; 0x50
 800879e:	4b13      	ldr	r3, [pc, #76]	; (80087ec <__sinit+0x68>)
 80087a0:	4a13      	ldr	r2, [pc, #76]	; (80087f0 <__sinit+0x6c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80087a6:	42a3      	cmp	r3, r4
 80087a8:	bf04      	itt	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	61a3      	streq	r3, [r4, #24]
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 f820 	bl	80087f4 <__sfp>
 80087b4:	6060      	str	r0, [r4, #4]
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 f81c 	bl	80087f4 <__sfp>
 80087bc:	60a0      	str	r0, [r4, #8]
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 f818 	bl	80087f4 <__sfp>
 80087c4:	2200      	movs	r2, #0
 80087c6:	60e0      	str	r0, [r4, #12]
 80087c8:	2104      	movs	r1, #4
 80087ca:	6860      	ldr	r0, [r4, #4]
 80087cc:	f7ff ff82 	bl	80086d4 <std>
 80087d0:	68a0      	ldr	r0, [r4, #8]
 80087d2:	2201      	movs	r2, #1
 80087d4:	2109      	movs	r1, #9
 80087d6:	f7ff ff7d 	bl	80086d4 <std>
 80087da:	68e0      	ldr	r0, [r4, #12]
 80087dc:	2202      	movs	r2, #2
 80087de:	2112      	movs	r1, #18
 80087e0:	f7ff ff78 	bl	80086d4 <std>
 80087e4:	2301      	movs	r3, #1
 80087e6:	61a3      	str	r3, [r4, #24]
 80087e8:	e7d2      	b.n	8008790 <__sinit+0xc>
 80087ea:	bf00      	nop
 80087ec:	08009628 	.word	0x08009628
 80087f0:	0800871d 	.word	0x0800871d

080087f4 <__sfp>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	4607      	mov	r7, r0
 80087f8:	f7ff ffac 	bl	8008754 <__sfp_lock_acquire>
 80087fc:	4b1e      	ldr	r3, [pc, #120]	; (8008878 <__sfp+0x84>)
 80087fe:	681e      	ldr	r6, [r3, #0]
 8008800:	69b3      	ldr	r3, [r6, #24]
 8008802:	b913      	cbnz	r3, 800880a <__sfp+0x16>
 8008804:	4630      	mov	r0, r6
 8008806:	f7ff ffbd 	bl	8008784 <__sinit>
 800880a:	3648      	adds	r6, #72	; 0x48
 800880c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008810:	3b01      	subs	r3, #1
 8008812:	d503      	bpl.n	800881c <__sfp+0x28>
 8008814:	6833      	ldr	r3, [r6, #0]
 8008816:	b30b      	cbz	r3, 800885c <__sfp+0x68>
 8008818:	6836      	ldr	r6, [r6, #0]
 800881a:	e7f7      	b.n	800880c <__sfp+0x18>
 800881c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008820:	b9d5      	cbnz	r5, 8008858 <__sfp+0x64>
 8008822:	4b16      	ldr	r3, [pc, #88]	; (800887c <__sfp+0x88>)
 8008824:	60e3      	str	r3, [r4, #12]
 8008826:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800882a:	6665      	str	r5, [r4, #100]	; 0x64
 800882c:	f000 fa94 	bl	8008d58 <__retarget_lock_init_recursive>
 8008830:	f7ff ff96 	bl	8008760 <__sfp_lock_release>
 8008834:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008838:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800883c:	6025      	str	r5, [r4, #0]
 800883e:	61a5      	str	r5, [r4, #24]
 8008840:	2208      	movs	r2, #8
 8008842:	4629      	mov	r1, r5
 8008844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008848:	f000 fb0e 	bl	8008e68 <memset>
 800884c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008854:	4620      	mov	r0, r4
 8008856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008858:	3468      	adds	r4, #104	; 0x68
 800885a:	e7d9      	b.n	8008810 <__sfp+0x1c>
 800885c:	2104      	movs	r1, #4
 800885e:	4638      	mov	r0, r7
 8008860:	f7ff ff62 	bl	8008728 <__sfmoreglue>
 8008864:	4604      	mov	r4, r0
 8008866:	6030      	str	r0, [r6, #0]
 8008868:	2800      	cmp	r0, #0
 800886a:	d1d5      	bne.n	8008818 <__sfp+0x24>
 800886c:	f7ff ff78 	bl	8008760 <__sfp_lock_release>
 8008870:	230c      	movs	r3, #12
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	e7ee      	b.n	8008854 <__sfp+0x60>
 8008876:	bf00      	nop
 8008878:	08009628 	.word	0x08009628
 800887c:	ffff0001 	.word	0xffff0001

08008880 <_fopen_r>:
 8008880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008882:	460f      	mov	r7, r1
 8008884:	4611      	mov	r1, r2
 8008886:	aa01      	add	r2, sp, #4
 8008888:	4605      	mov	r5, r0
 800888a:	f000 fdb1 	bl	80093f0 <__sflags>
 800888e:	4606      	mov	r6, r0
 8008890:	b918      	cbnz	r0, 800889a <_fopen_r+0x1a>
 8008892:	2400      	movs	r4, #0
 8008894:	4620      	mov	r0, r4
 8008896:	b003      	add	sp, #12
 8008898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889a:	4628      	mov	r0, r5
 800889c:	f7ff ffaa 	bl	80087f4 <__sfp>
 80088a0:	4604      	mov	r4, r0
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d0f5      	beq.n	8008892 <_fopen_r+0x12>
 80088a6:	4639      	mov	r1, r7
 80088a8:	9a01      	ldr	r2, [sp, #4]
 80088aa:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 fbc2 	bl	8009038 <_open_r>
 80088b4:	1e07      	subs	r7, r0, #0
 80088b6:	da09      	bge.n	80088cc <_fopen_r+0x4c>
 80088b8:	2500      	movs	r5, #0
 80088ba:	f7ff ff4b 	bl	8008754 <__sfp_lock_acquire>
 80088be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088c0:	81a5      	strh	r5, [r4, #12]
 80088c2:	f000 fa4a 	bl	8008d5a <__retarget_lock_close_recursive>
 80088c6:	f7ff ff4b 	bl	8008760 <__sfp_lock_release>
 80088ca:	e7e2      	b.n	8008892 <_fopen_r+0x12>
 80088cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ce:	07db      	lsls	r3, r3, #31
 80088d0:	d405      	bmi.n	80088de <_fopen_r+0x5e>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	0598      	lsls	r0, r3, #22
 80088d6:	d402      	bmi.n	80088de <_fopen_r+0x5e>
 80088d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088da:	f000 fa3f 	bl	8008d5c <__retarget_lock_acquire_recursive>
 80088de:	4b0e      	ldr	r3, [pc, #56]	; (8008918 <_fopen_r+0x98>)
 80088e0:	6263      	str	r3, [r4, #36]	; 0x24
 80088e2:	4b0e      	ldr	r3, [pc, #56]	; (800891c <_fopen_r+0x9c>)
 80088e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80088e6:	4b0e      	ldr	r3, [pc, #56]	; (8008920 <_fopen_r+0xa0>)
 80088e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088ea:	05f1      	lsls	r1, r6, #23
 80088ec:	4b0d      	ldr	r3, [pc, #52]	; (8008924 <_fopen_r+0xa4>)
 80088ee:	81e7      	strh	r7, [r4, #14]
 80088f0:	81a6      	strh	r6, [r4, #12]
 80088f2:	6224      	str	r4, [r4, #32]
 80088f4:	6323      	str	r3, [r4, #48]	; 0x30
 80088f6:	d505      	bpl.n	8008904 <_fopen_r+0x84>
 80088f8:	2302      	movs	r3, #2
 80088fa:	2200      	movs	r2, #0
 80088fc:	4621      	mov	r1, r4
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 f89c 	bl	8008a3c <_fseek_r>
 8008904:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008906:	07da      	lsls	r2, r3, #31
 8008908:	d4c4      	bmi.n	8008894 <_fopen_r+0x14>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	d4c1      	bmi.n	8008894 <_fopen_r+0x14>
 8008910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008912:	f000 fa24 	bl	8008d5e <__retarget_lock_release_recursive>
 8008916:	e7bd      	b.n	8008894 <_fopen_r+0x14>
 8008918:	080091a5 	.word	0x080091a5
 800891c:	080091c7 	.word	0x080091c7
 8008920:	080091ff 	.word	0x080091ff
 8008924:	08009223 	.word	0x08009223

08008928 <fopen>:
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <fopen+0xc>)
 800892a:	460a      	mov	r2, r1
 800892c:	4601      	mov	r1, r0
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	f7ff bfa6 	b.w	8008880 <_fopen_r>
 8008934:	2000002c 	.word	0x2000002c

08008938 <_fread_r>:
 8008938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	461f      	mov	r7, r3
 800893e:	4613      	mov	r3, r2
 8008940:	437b      	muls	r3, r7
 8008942:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008944:	4606      	mov	r6, r0
 8008946:	468a      	mov	sl, r1
 8008948:	4691      	mov	r9, r2
 800894a:	469b      	mov	fp, r3
 800894c:	d05f      	beq.n	8008a0e <_fread_r+0xd6>
 800894e:	b118      	cbz	r0, 8008958 <_fread_r+0x20>
 8008950:	6983      	ldr	r3, [r0, #24]
 8008952:	b90b      	cbnz	r3, 8008958 <_fread_r+0x20>
 8008954:	f7ff ff16 	bl	8008784 <__sinit>
 8008958:	4b2e      	ldr	r3, [pc, #184]	; (8008a14 <_fread_r+0xdc>)
 800895a:	429c      	cmp	r4, r3
 800895c:	d128      	bne.n	80089b0 <_fread_r+0x78>
 800895e:	6874      	ldr	r4, [r6, #4]
 8008960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008962:	07db      	lsls	r3, r3, #31
 8008964:	d405      	bmi.n	8008972 <_fread_r+0x3a>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	059d      	lsls	r5, r3, #22
 800896a:	d402      	bmi.n	8008972 <_fread_r+0x3a>
 800896c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800896e:	f000 f9f5 	bl	8008d5c <__retarget_lock_acquire_recursive>
 8008972:	6863      	ldr	r3, [r4, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	da01      	bge.n	800897c <_fread_r+0x44>
 8008978:	2300      	movs	r3, #0
 800897a:	6063      	str	r3, [r4, #4]
 800897c:	46d8      	mov	r8, fp
 800897e:	e9d4 1500 	ldrd	r1, r5, [r4]
 8008982:	4545      	cmp	r5, r8
 8008984:	d31e      	bcc.n	80089c4 <_fread_r+0x8c>
 8008986:	4642      	mov	r2, r8
 8008988:	4650      	mov	r0, sl
 800898a:	f000 fa5f 	bl	8008e4c <memcpy>
 800898e:	6862      	ldr	r2, [r4, #4]
 8008990:	6821      	ldr	r1, [r4, #0]
 8008992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008994:	eba2 0208 	sub.w	r2, r2, r8
 8008998:	6062      	str	r2, [r4, #4]
 800899a:	4441      	add	r1, r8
 800899c:	07da      	lsls	r2, r3, #31
 800899e:	6021      	str	r1, [r4, #0]
 80089a0:	d42f      	bmi.n	8008a02 <_fread_r+0xca>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	059b      	lsls	r3, r3, #22
 80089a6:	d42c      	bmi.n	8008a02 <_fread_r+0xca>
 80089a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089aa:	f000 f9d8 	bl	8008d5e <__retarget_lock_release_recursive>
 80089ae:	e028      	b.n	8008a02 <_fread_r+0xca>
 80089b0:	4b19      	ldr	r3, [pc, #100]	; (8008a18 <_fread_r+0xe0>)
 80089b2:	429c      	cmp	r4, r3
 80089b4:	d101      	bne.n	80089ba <_fread_r+0x82>
 80089b6:	68b4      	ldr	r4, [r6, #8]
 80089b8:	e7d2      	b.n	8008960 <_fread_r+0x28>
 80089ba:	4b18      	ldr	r3, [pc, #96]	; (8008a1c <_fread_r+0xe4>)
 80089bc:	429c      	cmp	r4, r3
 80089be:	bf08      	it	eq
 80089c0:	68f4      	ldreq	r4, [r6, #12]
 80089c2:	e7cd      	b.n	8008960 <_fread_r+0x28>
 80089c4:	462a      	mov	r2, r5
 80089c6:	4650      	mov	r0, sl
 80089c8:	f000 fa40 	bl	8008e4c <memcpy>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	442b      	add	r3, r5
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	4621      	mov	r1, r4
 80089d4:	eba8 0305 	sub.w	r3, r8, r5
 80089d8:	4630      	mov	r0, r6
 80089da:	9301      	str	r3, [sp, #4]
 80089dc:	f000 fb48 	bl	8009070 <__srefill_r>
 80089e0:	44aa      	add	sl, r5
 80089e2:	9b01      	ldr	r3, [sp, #4]
 80089e4:	b188      	cbz	r0, 8008a0a <_fread_r+0xd2>
 80089e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089e8:	07d8      	lsls	r0, r3, #31
 80089ea:	d405      	bmi.n	80089f8 <_fread_r+0xc0>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	0599      	lsls	r1, r3, #22
 80089f0:	d402      	bmi.n	80089f8 <_fread_r+0xc0>
 80089f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089f4:	f000 f9b3 	bl	8008d5e <__retarget_lock_release_recursive>
 80089f8:	445d      	add	r5, fp
 80089fa:	eba5 0308 	sub.w	r3, r5, r8
 80089fe:	fbb3 f7f9 	udiv	r7, r3, r9
 8008a02:	4638      	mov	r0, r7
 8008a04:	b003      	add	sp, #12
 8008a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0a:	4698      	mov	r8, r3
 8008a0c:	e7b7      	b.n	800897e <_fread_r+0x46>
 8008a0e:	461f      	mov	r7, r3
 8008a10:	e7f7      	b.n	8008a02 <_fread_r+0xca>
 8008a12:	bf00      	nop
 8008a14:	080095e8 	.word	0x080095e8
 8008a18:	08009608 	.word	0x08009608
 8008a1c:	080095c8 	.word	0x080095c8

08008a20 <fread>:
 8008a20:	b507      	push	{r0, r1, r2, lr}
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	4613      	mov	r3, r2
 8008a26:	460a      	mov	r2, r1
 8008a28:	4601      	mov	r1, r0
 8008a2a:	4803      	ldr	r0, [pc, #12]	; (8008a38 <fread+0x18>)
 8008a2c:	6800      	ldr	r0, [r0, #0]
 8008a2e:	f7ff ff83 	bl	8008938 <_fread_r>
 8008a32:	b003      	add	sp, #12
 8008a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a38:	2000002c 	.word	0x2000002c

08008a3c <_fseek_r>:
 8008a3c:	f000 b80a 	b.w	8008a54 <_fseeko_r>

08008a40 <fseek>:
 8008a40:	4613      	mov	r3, r2
 8008a42:	460a      	mov	r2, r1
 8008a44:	4601      	mov	r1, r0
 8008a46:	4802      	ldr	r0, [pc, #8]	; (8008a50 <fseek+0x10>)
 8008a48:	6800      	ldr	r0, [r0, #0]
 8008a4a:	f000 b803 	b.w	8008a54 <_fseeko_r>
 8008a4e:	bf00      	nop
 8008a50:	2000002c 	.word	0x2000002c

08008a54 <_fseeko_r>:
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a58:	460c      	mov	r4, r1
 8008a5a:	4617      	mov	r7, r2
 8008a5c:	461d      	mov	r5, r3
 8008a5e:	4606      	mov	r6, r0
 8008a60:	b118      	cbz	r0, 8008a6a <_fseeko_r+0x16>
 8008a62:	6983      	ldr	r3, [r0, #24]
 8008a64:	b90b      	cbnz	r3, 8008a6a <_fseeko_r+0x16>
 8008a66:	f7ff fe8d 	bl	8008784 <__sinit>
 8008a6a:	4b51      	ldr	r3, [pc, #324]	; (8008bb0 <_fseeko_r+0x15c>)
 8008a6c:	429c      	cmp	r4, r3
 8008a6e:	d122      	bne.n	8008ab6 <_fseeko_r+0x62>
 8008a70:	6874      	ldr	r4, [r6, #4]
 8008a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a74:	07d9      	lsls	r1, r3, #31
 8008a76:	d405      	bmi.n	8008a84 <_fseeko_r+0x30>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	059a      	lsls	r2, r3, #22
 8008a7c:	d402      	bmi.n	8008a84 <_fseeko_r+0x30>
 8008a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a80:	f000 f96c 	bl	8008d5c <__retarget_lock_acquire_recursive>
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8008a8a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8008a8e:	d103      	bne.n	8008a98 <_fseeko_r+0x44>
 8008a90:	4621      	mov	r1, r4
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7ff fdd0 	bl	8008638 <_fflush_r>
 8008a98:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8008a9c:	f1b8 0f00 	cmp.w	r8, #0
 8008aa0:	d113      	bne.n	8008aca <_fseeko_r+0x76>
 8008aa2:	231d      	movs	r3, #29
 8008aa4:	6033      	str	r3, [r6, #0]
 8008aa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aa8:	07d9      	lsls	r1, r3, #31
 8008aaa:	d578      	bpl.n	8008b9e <_fseeko_r+0x14a>
 8008aac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab6:	4b3f      	ldr	r3, [pc, #252]	; (8008bb4 <_fseeko_r+0x160>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	d101      	bne.n	8008ac0 <_fseeko_r+0x6c>
 8008abc:	68b4      	ldr	r4, [r6, #8]
 8008abe:	e7d8      	b.n	8008a72 <_fseeko_r+0x1e>
 8008ac0:	4b3d      	ldr	r3, [pc, #244]	; (8008bb8 <_fseeko_r+0x164>)
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	bf08      	it	eq
 8008ac6:	68f4      	ldreq	r4, [r6, #12]
 8008ac8:	e7d3      	b.n	8008a72 <_fseeko_r+0x1e>
 8008aca:	2d01      	cmp	r5, #1
 8008acc:	d036      	beq.n	8008b3c <_fseeko_r+0xe8>
 8008ace:	f035 0302 	bics.w	r3, r5, #2
 8008ad2:	d162      	bne.n	8008b9a <_fseeko_r+0x146>
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	b91b      	cbnz	r3, 8008ae0 <_fseeko_r+0x8c>
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4630      	mov	r0, r6
 8008adc:	f000 f966 	bl	8008dac <__smakebuf_r>
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7ff fda8 	bl	8008638 <_fflush_r>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d1dc      	bne.n	8008aa6 <_fseeko_r+0x52>
 8008aec:	6a21      	ldr	r1, [r4, #32]
 8008aee:	462b      	mov	r3, r5
 8008af0:	463a      	mov	r2, r7
 8008af2:	4630      	mov	r0, r6
 8008af4:	47c0      	blx	r8
 8008af6:	3001      	adds	r0, #1
 8008af8:	d0d5      	beq.n	8008aa6 <_fseeko_r+0x52>
 8008afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008afc:	b141      	cbz	r1, 8008b10 <_fseeko_r+0xbc>
 8008afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b02:	4299      	cmp	r1, r3
 8008b04:	d002      	beq.n	8008b0c <_fseeko_r+0xb8>
 8008b06:	4630      	mov	r0, r6
 8008b08:	f000 f9b6 	bl	8008e78 <_free_r>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	6363      	str	r3, [r4, #52]	; 0x34
 8008b10:	6923      	ldr	r3, [r4, #16]
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	2600      	movs	r6, #0
 8008b18:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8008b1c:	6066      	str	r6, [r4, #4]
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	2208      	movs	r2, #8
 8008b22:	4631      	mov	r1, r6
 8008b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b28:	f000 f99e 	bl	8008e68 <memset>
 8008b2c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008b2e:	f015 0501 	ands.w	r5, r5, #1
 8008b32:	d13b      	bne.n	8008bac <_fseeko_r+0x158>
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	059b      	lsls	r3, r3, #22
 8008b38:	d4ba      	bmi.n	8008ab0 <_fseeko_r+0x5c>
 8008b3a:	e021      	b.n	8008b80 <_fseeko_r+0x12c>
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff fd7a 	bl	8008638 <_fflush_r>
 8008b44:	89a2      	ldrh	r2, [r4, #12]
 8008b46:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b4a:	d00c      	beq.n	8008b66 <_fseeko_r+0x112>
 8008b4c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	075a      	lsls	r2, r3, #29
 8008b52:	d519      	bpl.n	8008b88 <_fseeko_r+0x134>
 8008b54:	6863      	ldr	r3, [r4, #4]
 8008b56:	1aed      	subs	r5, r5, r3
 8008b58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b5a:	b10b      	cbz	r3, 8008b60 <_fseeko_r+0x10c>
 8008b5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b5e:	1aed      	subs	r5, r5, r3
 8008b60:	442f      	add	r7, r5
 8008b62:	2500      	movs	r5, #0
 8008b64:	e7b6      	b.n	8008ad4 <_fseeko_r+0x80>
 8008b66:	462b      	mov	r3, r5
 8008b68:	6a21      	ldr	r1, [r4, #32]
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	47c0      	blx	r8
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	4605      	mov	r5, r0
 8008b72:	d1ec      	bne.n	8008b4e <_fseeko_r+0xfa>
 8008b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b76:	07d8      	lsls	r0, r3, #31
 8008b78:	d498      	bmi.n	8008aac <_fseeko_r+0x58>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	0599      	lsls	r1, r3, #22
 8008b7e:	d495      	bmi.n	8008aac <_fseeko_r+0x58>
 8008b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b82:	f000 f8ec 	bl	8008d5e <__retarget_lock_release_recursive>
 8008b86:	e793      	b.n	8008ab0 <_fseeko_r+0x5c>
 8008b88:	0718      	lsls	r0, r3, #28
 8008b8a:	d5e9      	bpl.n	8008b60 <_fseeko_r+0x10c>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	6922      	ldr	r2, [r4, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0e5      	beq.n	8008b60 <_fseeko_r+0x10c>
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	441d      	add	r5, r3
 8008b98:	e7e2      	b.n	8008b60 <_fseeko_r+0x10c>
 8008b9a:	2316      	movs	r3, #22
 8008b9c:	e782      	b.n	8008aa4 <_fseeko_r+0x50>
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	059a      	lsls	r2, r3, #22
 8008ba2:	d483      	bmi.n	8008aac <_fseeko_r+0x58>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ba6:	f000 f8da 	bl	8008d5e <__retarget_lock_release_recursive>
 8008baa:	e77f      	b.n	8008aac <_fseeko_r+0x58>
 8008bac:	4635      	mov	r5, r6
 8008bae:	e77f      	b.n	8008ab0 <_fseeko_r+0x5c>
 8008bb0:	080095e8 	.word	0x080095e8
 8008bb4:	08009608 	.word	0x08009608
 8008bb8:	080095c8 	.word	0x080095c8

08008bbc <_fwalk>:
 8008bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc0:	460f      	mov	r7, r1
 8008bc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bc6:	2600      	movs	r6, #0
 8008bc8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8008bcc:	f1b8 0801 	subs.w	r8, r8, #1
 8008bd0:	d505      	bpl.n	8008bde <_fwalk+0x22>
 8008bd2:	6824      	ldr	r4, [r4, #0]
 8008bd4:	2c00      	cmp	r4, #0
 8008bd6:	d1f7      	bne.n	8008bc8 <_fwalk+0xc>
 8008bd8:	4630      	mov	r0, r6
 8008bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d906      	bls.n	8008bf2 <_fwalk+0x36>
 8008be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008be8:	3301      	adds	r3, #1
 8008bea:	d002      	beq.n	8008bf2 <_fwalk+0x36>
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	4306      	orrs	r6, r0
 8008bf2:	3568      	adds	r5, #104	; 0x68
 8008bf4:	e7ea      	b.n	8008bcc <_fwalk+0x10>

08008bf6 <_fwalk_reent>:
 8008bf6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	4688      	mov	r8, r1
 8008bfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c02:	2700      	movs	r7, #0
 8008c04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c08:	f1b9 0901 	subs.w	r9, r9, #1
 8008c0c:	d505      	bpl.n	8008c1a <_fwalk_reent+0x24>
 8008c0e:	6824      	ldr	r4, [r4, #0]
 8008c10:	2c00      	cmp	r4, #0
 8008c12:	d1f7      	bne.n	8008c04 <_fwalk_reent+0xe>
 8008c14:	4638      	mov	r0, r7
 8008c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d907      	bls.n	8008c30 <_fwalk_reent+0x3a>
 8008c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c24:	3301      	adds	r3, #1
 8008c26:	d003      	beq.n	8008c30 <_fwalk_reent+0x3a>
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	47c0      	blx	r8
 8008c2e:	4307      	orrs	r7, r0
 8008c30:	3568      	adds	r5, #104	; 0x68
 8008c32:	e7e9      	b.n	8008c08 <_fwalk_reent+0x12>

08008c34 <_fwrite_r>:
 8008c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c38:	9c08      	ldr	r4, [sp, #32]
 8008c3a:	468a      	mov	sl, r1
 8008c3c:	4690      	mov	r8, r2
 8008c3e:	fb02 f903 	mul.w	r9, r2, r3
 8008c42:	4605      	mov	r5, r0
 8008c44:	b118      	cbz	r0, 8008c4e <_fwrite_r+0x1a>
 8008c46:	6983      	ldr	r3, [r0, #24]
 8008c48:	b90b      	cbnz	r3, 8008c4e <_fwrite_r+0x1a>
 8008c4a:	f7ff fd9b 	bl	8008784 <__sinit>
 8008c4e:	4b26      	ldr	r3, [pc, #152]	; (8008ce8 <_fwrite_r+0xb4>)
 8008c50:	429c      	cmp	r4, r3
 8008c52:	d123      	bne.n	8008c9c <_fwrite_r+0x68>
 8008c54:	686c      	ldr	r4, [r5, #4]
 8008c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c58:	07de      	lsls	r6, r3, #31
 8008c5a:	d405      	bmi.n	8008c68 <_fwrite_r+0x34>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	0598      	lsls	r0, r3, #22
 8008c60:	d402      	bmi.n	8008c68 <_fwrite_r+0x34>
 8008c62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c64:	f000 f87a 	bl	8008d5c <__retarget_lock_acquire_recursive>
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	0719      	lsls	r1, r3, #28
 8008c6c:	d520      	bpl.n	8008cb0 <_fwrite_r+0x7c>
 8008c6e:	6923      	ldr	r3, [r4, #16]
 8008c70:	b1f3      	cbz	r3, 8008cb0 <_fwrite_r+0x7c>
 8008c72:	2600      	movs	r6, #0
 8008c74:	454e      	cmp	r6, r9
 8008c76:	d029      	beq.n	8008ccc <_fwrite_r+0x98>
 8008c78:	68a7      	ldr	r7, [r4, #8]
 8008c7a:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8008c7e:	3f01      	subs	r7, #1
 8008c80:	2f00      	cmp	r7, #0
 8008c82:	60a7      	str	r7, [r4, #8]
 8008c84:	da04      	bge.n	8008c90 <_fwrite_r+0x5c>
 8008c86:	69a3      	ldr	r3, [r4, #24]
 8008c88:	429f      	cmp	r7, r3
 8008c8a:	db19      	blt.n	8008cc0 <_fwrite_r+0x8c>
 8008c8c:	290a      	cmp	r1, #10
 8008c8e:	d017      	beq.n	8008cc0 <_fwrite_r+0x8c>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	6022      	str	r2, [r4, #0]
 8008c96:	7019      	strb	r1, [r3, #0]
 8008c98:	3601      	adds	r6, #1
 8008c9a:	e7eb      	b.n	8008c74 <_fwrite_r+0x40>
 8008c9c:	4b13      	ldr	r3, [pc, #76]	; (8008cec <_fwrite_r+0xb8>)
 8008c9e:	429c      	cmp	r4, r3
 8008ca0:	d101      	bne.n	8008ca6 <_fwrite_r+0x72>
 8008ca2:	68ac      	ldr	r4, [r5, #8]
 8008ca4:	e7d7      	b.n	8008c56 <_fwrite_r+0x22>
 8008ca6:	4b12      	ldr	r3, [pc, #72]	; (8008cf0 <_fwrite_r+0xbc>)
 8008ca8:	429c      	cmp	r4, r3
 8008caa:	bf08      	it	eq
 8008cac:	68ec      	ldreq	r4, [r5, #12]
 8008cae:	e7d2      	b.n	8008c56 <_fwrite_r+0x22>
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 fb1e 	bl	80092f4 <__swsetup_r>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d0da      	beq.n	8008c72 <_fwrite_r+0x3e>
 8008cbc:	2600      	movs	r6, #0
 8008cbe:	e005      	b.n	8008ccc <_fwrite_r+0x98>
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f000 fab2 	bl	800922c <__swbuf_r>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d1e5      	bne.n	8008c98 <_fwrite_r+0x64>
 8008ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cce:	07da      	lsls	r2, r3, #31
 8008cd0:	d405      	bmi.n	8008cde <_fwrite_r+0xaa>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	059b      	lsls	r3, r3, #22
 8008cd6:	d402      	bmi.n	8008cde <_fwrite_r+0xaa>
 8008cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cda:	f000 f840 	bl	8008d5e <__retarget_lock_release_recursive>
 8008cde:	fbb6 f0f8 	udiv	r0, r6, r8
 8008ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce6:	bf00      	nop
 8008ce8:	080095e8 	.word	0x080095e8
 8008cec:	08009608 	.word	0x08009608
 8008cf0:	080095c8 	.word	0x080095c8

08008cf4 <fwrite>:
 8008cf4:	b507      	push	{r0, r1, r2, lr}
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	460a      	mov	r2, r1
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	4803      	ldr	r0, [pc, #12]	; (8008d0c <fwrite+0x18>)
 8008d00:	6800      	ldr	r0, [r0, #0]
 8008d02:	f7ff ff97 	bl	8008c34 <_fwrite_r>
 8008d06:	b003      	add	sp, #12
 8008d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d0c:	2000002c 	.word	0x2000002c

08008d10 <__libc_init_array>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	4d0d      	ldr	r5, [pc, #52]	; (8008d48 <__libc_init_array+0x38>)
 8008d14:	4c0d      	ldr	r4, [pc, #52]	; (8008d4c <__libc_init_array+0x3c>)
 8008d16:	1b64      	subs	r4, r4, r5
 8008d18:	10a4      	asrs	r4, r4, #2
 8008d1a:	2600      	movs	r6, #0
 8008d1c:	42a6      	cmp	r6, r4
 8008d1e:	d109      	bne.n	8008d34 <__libc_init_array+0x24>
 8008d20:	4d0b      	ldr	r5, [pc, #44]	; (8008d50 <__libc_init_array+0x40>)
 8008d22:	4c0c      	ldr	r4, [pc, #48]	; (8008d54 <__libc_init_array+0x44>)
 8008d24:	f000 fbec 	bl	8009500 <_init>
 8008d28:	1b64      	subs	r4, r4, r5
 8008d2a:	10a4      	asrs	r4, r4, #2
 8008d2c:	2600      	movs	r6, #0
 8008d2e:	42a6      	cmp	r6, r4
 8008d30:	d105      	bne.n	8008d3e <__libc_init_array+0x2e>
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d38:	4798      	blx	r3
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	e7ee      	b.n	8008d1c <__libc_init_array+0xc>
 8008d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d42:	4798      	blx	r3
 8008d44:	3601      	adds	r6, #1
 8008d46:	e7f2      	b.n	8008d2e <__libc_init_array+0x1e>
 8008d48:	08009634 	.word	0x08009634
 8008d4c:	08009634 	.word	0x08009634
 8008d50:	08009634 	.word	0x08009634
 8008d54:	08009638 	.word	0x08009638

08008d58 <__retarget_lock_init_recursive>:
 8008d58:	4770      	bx	lr

08008d5a <__retarget_lock_close_recursive>:
 8008d5a:	4770      	bx	lr

08008d5c <__retarget_lock_acquire_recursive>:
 8008d5c:	4770      	bx	lr

08008d5e <__retarget_lock_release_recursive>:
 8008d5e:	4770      	bx	lr

08008d60 <__swhatbuf_r>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	460e      	mov	r6, r1
 8008d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	b096      	sub	sp, #88	; 0x58
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	461d      	mov	r5, r3
 8008d70:	da08      	bge.n	8008d84 <__swhatbuf_r+0x24>
 8008d72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	061a      	lsls	r2, r3, #24
 8008d7c:	d410      	bmi.n	8008da0 <__swhatbuf_r+0x40>
 8008d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d82:	e00e      	b.n	8008da2 <__swhatbuf_r+0x42>
 8008d84:	466a      	mov	r2, sp
 8008d86:	f000 fb69 	bl	800945c <_fstat_r>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	dbf1      	blt.n	8008d72 <__swhatbuf_r+0x12>
 8008d8e:	9a01      	ldr	r2, [sp, #4]
 8008d90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d98:	425a      	negs	r2, r3
 8008d9a:	415a      	adcs	r2, r3
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	e7ee      	b.n	8008d7e <__swhatbuf_r+0x1e>
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	2000      	movs	r0, #0
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	b016      	add	sp, #88	; 0x58
 8008da8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dac <__smakebuf_r>:
 8008dac:	898b      	ldrh	r3, [r1, #12]
 8008dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008db0:	079d      	lsls	r5, r3, #30
 8008db2:	4606      	mov	r6, r0
 8008db4:	460c      	mov	r4, r1
 8008db6:	d507      	bpl.n	8008dc8 <__smakebuf_r+0x1c>
 8008db8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	6163      	str	r3, [r4, #20]
 8008dc4:	b002      	add	sp, #8
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	ab01      	add	r3, sp, #4
 8008dca:	466a      	mov	r2, sp
 8008dcc:	f7ff ffc8 	bl	8008d60 <__swhatbuf_r>
 8008dd0:	9900      	ldr	r1, [sp, #0]
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f8bb 	bl	8008f50 <_malloc_r>
 8008dda:	b948      	cbnz	r0, 8008df0 <__smakebuf_r+0x44>
 8008ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008de0:	059a      	lsls	r2, r3, #22
 8008de2:	d4ef      	bmi.n	8008dc4 <__smakebuf_r+0x18>
 8008de4:	f023 0303 	bic.w	r3, r3, #3
 8008de8:	f043 0302 	orr.w	r3, r3, #2
 8008dec:	81a3      	strh	r3, [r4, #12]
 8008dee:	e7e3      	b.n	8008db8 <__smakebuf_r+0xc>
 8008df0:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <__smakebuf_r+0x7c>)
 8008df2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	6020      	str	r0, [r4, #0]
 8008df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfc:	81a3      	strh	r3, [r4, #12]
 8008dfe:	9b00      	ldr	r3, [sp, #0]
 8008e00:	6163      	str	r3, [r4, #20]
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	6120      	str	r0, [r4, #16]
 8008e06:	b15b      	cbz	r3, 8008e20 <__smakebuf_r+0x74>
 8008e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f000 fb37 	bl	8009480 <_isatty_r>
 8008e12:	b128      	cbz	r0, 8008e20 <__smakebuf_r+0x74>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	f043 0301 	orr.w	r3, r3, #1
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	89a0      	ldrh	r0, [r4, #12]
 8008e22:	4305      	orrs	r5, r0
 8008e24:	81a5      	strh	r5, [r4, #12]
 8008e26:	e7cd      	b.n	8008dc4 <__smakebuf_r+0x18>
 8008e28:	0800871d 	.word	0x0800871d

08008e2c <malloc>:
 8008e2c:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <malloc+0xc>)
 8008e2e:	4601      	mov	r1, r0
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	f000 b88d 	b.w	8008f50 <_malloc_r>
 8008e36:	bf00      	nop
 8008e38:	2000002c 	.word	0x2000002c

08008e3c <free>:
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <free+0xc>)
 8008e3e:	4601      	mov	r1, r0
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f000 b819 	b.w	8008e78 <_free_r>
 8008e46:	bf00      	nop
 8008e48:	2000002c 	.word	0x2000002c

08008e4c <memcpy>:
 8008e4c:	440a      	add	r2, r1
 8008e4e:	4291      	cmp	r1, r2
 8008e50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e54:	d100      	bne.n	8008e58 <memcpy+0xc>
 8008e56:	4770      	bx	lr
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e62:	4291      	cmp	r1, r2
 8008e64:	d1f9      	bne.n	8008e5a <memcpy+0xe>
 8008e66:	bd10      	pop	{r4, pc}

08008e68 <memset>:
 8008e68:	4402      	add	r2, r0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d100      	bne.n	8008e72 <memset+0xa>
 8008e70:	4770      	bx	lr
 8008e72:	f803 1b01 	strb.w	r1, [r3], #1
 8008e76:	e7f9      	b.n	8008e6c <memset+0x4>

08008e78 <_free_r>:
 8008e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e7a:	2900      	cmp	r1, #0
 8008e7c:	d044      	beq.n	8008f08 <_free_r+0x90>
 8008e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e82:	9001      	str	r0, [sp, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f1a1 0404 	sub.w	r4, r1, #4
 8008e8a:	bfb8      	it	lt
 8008e8c:	18e4      	addlt	r4, r4, r3
 8008e8e:	f000 fb19 	bl	80094c4 <__malloc_lock>
 8008e92:	4a1e      	ldr	r2, [pc, #120]	; (8008f0c <_free_r+0x94>)
 8008e94:	9801      	ldr	r0, [sp, #4]
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	b933      	cbnz	r3, 8008ea8 <_free_r+0x30>
 8008e9a:	6063      	str	r3, [r4, #4]
 8008e9c:	6014      	str	r4, [r2, #0]
 8008e9e:	b003      	add	sp, #12
 8008ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea4:	f000 bb14 	b.w	80094d0 <__malloc_unlock>
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	d908      	bls.n	8008ebe <_free_r+0x46>
 8008eac:	6825      	ldr	r5, [r4, #0]
 8008eae:	1961      	adds	r1, r4, r5
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	bf01      	itttt	eq
 8008eb4:	6819      	ldreq	r1, [r3, #0]
 8008eb6:	685b      	ldreq	r3, [r3, #4]
 8008eb8:	1949      	addeq	r1, r1, r5
 8008eba:	6021      	streq	r1, [r4, #0]
 8008ebc:	e7ed      	b.n	8008e9a <_free_r+0x22>
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	b10b      	cbz	r3, 8008ec8 <_free_r+0x50>
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	d9fa      	bls.n	8008ebe <_free_r+0x46>
 8008ec8:	6811      	ldr	r1, [r2, #0]
 8008eca:	1855      	adds	r5, r2, r1
 8008ecc:	42a5      	cmp	r5, r4
 8008ece:	d10b      	bne.n	8008ee8 <_free_r+0x70>
 8008ed0:	6824      	ldr	r4, [r4, #0]
 8008ed2:	4421      	add	r1, r4
 8008ed4:	1854      	adds	r4, r2, r1
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	6011      	str	r1, [r2, #0]
 8008eda:	d1e0      	bne.n	8008e9e <_free_r+0x26>
 8008edc:	681c      	ldr	r4, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	6053      	str	r3, [r2, #4]
 8008ee2:	4421      	add	r1, r4
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	e7da      	b.n	8008e9e <_free_r+0x26>
 8008ee8:	d902      	bls.n	8008ef0 <_free_r+0x78>
 8008eea:	230c      	movs	r3, #12
 8008eec:	6003      	str	r3, [r0, #0]
 8008eee:	e7d6      	b.n	8008e9e <_free_r+0x26>
 8008ef0:	6825      	ldr	r5, [r4, #0]
 8008ef2:	1961      	adds	r1, r4, r5
 8008ef4:	428b      	cmp	r3, r1
 8008ef6:	bf04      	itt	eq
 8008ef8:	6819      	ldreq	r1, [r3, #0]
 8008efa:	685b      	ldreq	r3, [r3, #4]
 8008efc:	6063      	str	r3, [r4, #4]
 8008efe:	bf04      	itt	eq
 8008f00:	1949      	addeq	r1, r1, r5
 8008f02:	6021      	streq	r1, [r4, #0]
 8008f04:	6054      	str	r4, [r2, #4]
 8008f06:	e7ca      	b.n	8008e9e <_free_r+0x26>
 8008f08:	b003      	add	sp, #12
 8008f0a:	bd30      	pop	{r4, r5, pc}
 8008f0c:	200008d4 	.word	0x200008d4

08008f10 <sbrk_aligned>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4e0e      	ldr	r6, [pc, #56]	; (8008f4c <sbrk_aligned+0x3c>)
 8008f14:	460c      	mov	r4, r1
 8008f16:	6831      	ldr	r1, [r6, #0]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b911      	cbnz	r1, 8008f22 <sbrk_aligned+0x12>
 8008f1c:	f000 f932 	bl	8009184 <_sbrk_r>
 8008f20:	6030      	str	r0, [r6, #0]
 8008f22:	4621      	mov	r1, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f000 f92d 	bl	8009184 <_sbrk_r>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	d00a      	beq.n	8008f44 <sbrk_aligned+0x34>
 8008f2e:	1cc4      	adds	r4, r0, #3
 8008f30:	f024 0403 	bic.w	r4, r4, #3
 8008f34:	42a0      	cmp	r0, r4
 8008f36:	d007      	beq.n	8008f48 <sbrk_aligned+0x38>
 8008f38:	1a21      	subs	r1, r4, r0
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f000 f922 	bl	8009184 <_sbrk_r>
 8008f40:	3001      	adds	r0, #1
 8008f42:	d101      	bne.n	8008f48 <sbrk_aligned+0x38>
 8008f44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	200008d8 	.word	0x200008d8

08008f50 <_malloc_r>:
 8008f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f54:	1ccd      	adds	r5, r1, #3
 8008f56:	f025 0503 	bic.w	r5, r5, #3
 8008f5a:	3508      	adds	r5, #8
 8008f5c:	2d0c      	cmp	r5, #12
 8008f5e:	bf38      	it	cc
 8008f60:	250c      	movcc	r5, #12
 8008f62:	2d00      	cmp	r5, #0
 8008f64:	4607      	mov	r7, r0
 8008f66:	db01      	blt.n	8008f6c <_malloc_r+0x1c>
 8008f68:	42a9      	cmp	r1, r5
 8008f6a:	d905      	bls.n	8008f78 <_malloc_r+0x28>
 8008f6c:	230c      	movs	r3, #12
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	2600      	movs	r6, #0
 8008f72:	4630      	mov	r0, r6
 8008f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f78:	4e2e      	ldr	r6, [pc, #184]	; (8009034 <_malloc_r+0xe4>)
 8008f7a:	f000 faa3 	bl	80094c4 <__malloc_lock>
 8008f7e:	6833      	ldr	r3, [r6, #0]
 8008f80:	461c      	mov	r4, r3
 8008f82:	bb34      	cbnz	r4, 8008fd2 <_malloc_r+0x82>
 8008f84:	4629      	mov	r1, r5
 8008f86:	4638      	mov	r0, r7
 8008f88:	f7ff ffc2 	bl	8008f10 <sbrk_aligned>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	4604      	mov	r4, r0
 8008f90:	d14d      	bne.n	800902e <_malloc_r+0xde>
 8008f92:	6834      	ldr	r4, [r6, #0]
 8008f94:	4626      	mov	r6, r4
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	d140      	bne.n	800901c <_malloc_r+0xcc>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	eb04 0803 	add.w	r8, r4, r3
 8008fa4:	f000 f8ee 	bl	8009184 <_sbrk_r>
 8008fa8:	4580      	cmp	r8, r0
 8008faa:	d13a      	bne.n	8009022 <_malloc_r+0xd2>
 8008fac:	6821      	ldr	r1, [r4, #0]
 8008fae:	3503      	adds	r5, #3
 8008fb0:	1a6d      	subs	r5, r5, r1
 8008fb2:	f025 0503 	bic.w	r5, r5, #3
 8008fb6:	3508      	adds	r5, #8
 8008fb8:	2d0c      	cmp	r5, #12
 8008fba:	bf38      	it	cc
 8008fbc:	250c      	movcc	r5, #12
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7ff ffa5 	bl	8008f10 <sbrk_aligned>
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d02b      	beq.n	8009022 <_malloc_r+0xd2>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	442b      	add	r3, r5
 8008fce:	6023      	str	r3, [r4, #0]
 8008fd0:	e00e      	b.n	8008ff0 <_malloc_r+0xa0>
 8008fd2:	6822      	ldr	r2, [r4, #0]
 8008fd4:	1b52      	subs	r2, r2, r5
 8008fd6:	d41e      	bmi.n	8009016 <_malloc_r+0xc6>
 8008fd8:	2a0b      	cmp	r2, #11
 8008fda:	d916      	bls.n	800900a <_malloc_r+0xba>
 8008fdc:	1961      	adds	r1, r4, r5
 8008fde:	42a3      	cmp	r3, r4
 8008fe0:	6025      	str	r5, [r4, #0]
 8008fe2:	bf18      	it	ne
 8008fe4:	6059      	strne	r1, [r3, #4]
 8008fe6:	6863      	ldr	r3, [r4, #4]
 8008fe8:	bf08      	it	eq
 8008fea:	6031      	streq	r1, [r6, #0]
 8008fec:	5162      	str	r2, [r4, r5]
 8008fee:	604b      	str	r3, [r1, #4]
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f104 060b 	add.w	r6, r4, #11
 8008ff6:	f000 fa6b 	bl	80094d0 <__malloc_unlock>
 8008ffa:	f026 0607 	bic.w	r6, r6, #7
 8008ffe:	1d23      	adds	r3, r4, #4
 8009000:	1af2      	subs	r2, r6, r3
 8009002:	d0b6      	beq.n	8008f72 <_malloc_r+0x22>
 8009004:	1b9b      	subs	r3, r3, r6
 8009006:	50a3      	str	r3, [r4, r2]
 8009008:	e7b3      	b.n	8008f72 <_malloc_r+0x22>
 800900a:	6862      	ldr	r2, [r4, #4]
 800900c:	42a3      	cmp	r3, r4
 800900e:	bf0c      	ite	eq
 8009010:	6032      	streq	r2, [r6, #0]
 8009012:	605a      	strne	r2, [r3, #4]
 8009014:	e7ec      	b.n	8008ff0 <_malloc_r+0xa0>
 8009016:	4623      	mov	r3, r4
 8009018:	6864      	ldr	r4, [r4, #4]
 800901a:	e7b2      	b.n	8008f82 <_malloc_r+0x32>
 800901c:	4634      	mov	r4, r6
 800901e:	6876      	ldr	r6, [r6, #4]
 8009020:	e7b9      	b.n	8008f96 <_malloc_r+0x46>
 8009022:	230c      	movs	r3, #12
 8009024:	603b      	str	r3, [r7, #0]
 8009026:	4638      	mov	r0, r7
 8009028:	f000 fa52 	bl	80094d0 <__malloc_unlock>
 800902c:	e7a1      	b.n	8008f72 <_malloc_r+0x22>
 800902e:	6025      	str	r5, [r4, #0]
 8009030:	e7de      	b.n	8008ff0 <_malloc_r+0xa0>
 8009032:	bf00      	nop
 8009034:	200008d4 	.word	0x200008d4

08009038 <_open_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4d07      	ldr	r5, [pc, #28]	; (8009058 <_open_r+0x20>)
 800903c:	4604      	mov	r4, r0
 800903e:	4608      	mov	r0, r1
 8009040:	4611      	mov	r1, r2
 8009042:	2200      	movs	r2, #0
 8009044:	602a      	str	r2, [r5, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	f7f7 feeb 	bl	8000e22 <_open>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_open_r+0x1e>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_open_r+0x1e>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	200008dc 	.word	0x200008dc

0800905c <lflush>:
 800905c:	8983      	ldrh	r3, [r0, #12]
 800905e:	f003 0309 	and.w	r3, r3, #9
 8009062:	2b09      	cmp	r3, #9
 8009064:	d101      	bne.n	800906a <lflush+0xe>
 8009066:	f7ff bb23 	b.w	80086b0 <fflush>
 800906a:	2000      	movs	r0, #0
 800906c:	4770      	bx	lr
	...

08009070 <__srefill_r>:
 8009070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	4605      	mov	r5, r0
 8009076:	b118      	cbz	r0, 8009080 <__srefill_r+0x10>
 8009078:	6983      	ldr	r3, [r0, #24]
 800907a:	b90b      	cbnz	r3, 8009080 <__srefill_r+0x10>
 800907c:	f7ff fb82 	bl	8008784 <__sinit>
 8009080:	4b3b      	ldr	r3, [pc, #236]	; (8009170 <__srefill_r+0x100>)
 8009082:	429c      	cmp	r4, r3
 8009084:	d10a      	bne.n	800909c <__srefill_r+0x2c>
 8009086:	686c      	ldr	r4, [r5, #4]
 8009088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800908c:	2300      	movs	r3, #0
 800908e:	6063      	str	r3, [r4, #4]
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	069e      	lsls	r6, r3, #26
 8009094:	d50c      	bpl.n	80090b0 <__srefill_r+0x40>
 8009096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800909a:	e066      	b.n	800916a <__srefill_r+0xfa>
 800909c:	4b35      	ldr	r3, [pc, #212]	; (8009174 <__srefill_r+0x104>)
 800909e:	429c      	cmp	r4, r3
 80090a0:	d101      	bne.n	80090a6 <__srefill_r+0x36>
 80090a2:	68ac      	ldr	r4, [r5, #8]
 80090a4:	e7f0      	b.n	8009088 <__srefill_r+0x18>
 80090a6:	4b34      	ldr	r3, [pc, #208]	; (8009178 <__srefill_r+0x108>)
 80090a8:	429c      	cmp	r4, r3
 80090aa:	bf08      	it	eq
 80090ac:	68ec      	ldreq	r4, [r5, #12]
 80090ae:	e7eb      	b.n	8009088 <__srefill_r+0x18>
 80090b0:	0758      	lsls	r0, r3, #29
 80090b2:	d448      	bmi.n	8009146 <__srefill_r+0xd6>
 80090b4:	06d9      	lsls	r1, r3, #27
 80090b6:	d405      	bmi.n	80090c4 <__srefill_r+0x54>
 80090b8:	2309      	movs	r3, #9
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090c0:	81a3      	strh	r3, [r4, #12]
 80090c2:	e7e8      	b.n	8009096 <__srefill_r+0x26>
 80090c4:	071a      	lsls	r2, r3, #28
 80090c6:	d50b      	bpl.n	80090e0 <__srefill_r+0x70>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7ff fab4 	bl	8008638 <_fflush_r>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1e0      	bne.n	8009096 <__srefill_r+0x26>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	60a0      	str	r0, [r4, #8]
 80090d8:	f023 0308 	bic.w	r3, r3, #8
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	61a0      	str	r0, [r4, #24]
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f043 0304 	orr.w	r3, r3, #4
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	b91b      	cbnz	r3, 80090f4 <__srefill_r+0x84>
 80090ec:	4621      	mov	r1, r4
 80090ee:	4628      	mov	r0, r5
 80090f0:	f7ff fe5c 	bl	8008dac <__smakebuf_r>
 80090f4:	89a6      	ldrh	r6, [r4, #12]
 80090f6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80090fa:	07b3      	lsls	r3, r6, #30
 80090fc:	d00f      	beq.n	800911e <__srefill_r+0xae>
 80090fe:	2301      	movs	r3, #1
 8009100:	81a3      	strh	r3, [r4, #12]
 8009102:	4b1e      	ldr	r3, [pc, #120]	; (800917c <__srefill_r+0x10c>)
 8009104:	491e      	ldr	r1, [pc, #120]	; (8009180 <__srefill_r+0x110>)
 8009106:	6818      	ldr	r0, [r3, #0]
 8009108:	f006 0609 	and.w	r6, r6, #9
 800910c:	f7ff fd56 	bl	8008bbc <_fwalk>
 8009110:	2e09      	cmp	r6, #9
 8009112:	81a7      	strh	r7, [r4, #12]
 8009114:	d103      	bne.n	800911e <__srefill_r+0xae>
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f7ff fa07 	bl	800852c <__sflush_r>
 800911e:	6922      	ldr	r2, [r4, #16]
 8009120:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009122:	6963      	ldr	r3, [r4, #20]
 8009124:	6a21      	ldr	r1, [r4, #32]
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	4628      	mov	r0, r5
 800912a:	47b0      	blx	r6
 800912c:	2800      	cmp	r0, #0
 800912e:	6060      	str	r0, [r4, #4]
 8009130:	dc1c      	bgt.n	800916c <__srefill_r+0xfc>
 8009132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009136:	bf17      	itett	ne
 8009138:	2200      	movne	r2, #0
 800913a:	f043 0320 	orreq.w	r3, r3, #32
 800913e:	6062      	strne	r2, [r4, #4]
 8009140:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009144:	e7bc      	b.n	80090c0 <__srefill_r+0x50>
 8009146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009148:	2900      	cmp	r1, #0
 800914a:	d0cd      	beq.n	80090e8 <__srefill_r+0x78>
 800914c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009150:	4299      	cmp	r1, r3
 8009152:	d002      	beq.n	800915a <__srefill_r+0xea>
 8009154:	4628      	mov	r0, r5
 8009156:	f7ff fe8f 	bl	8008e78 <_free_r>
 800915a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800915c:	6063      	str	r3, [r4, #4]
 800915e:	2000      	movs	r0, #0
 8009160:	6360      	str	r0, [r4, #52]	; 0x34
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0c0      	beq.n	80090e8 <__srefill_r+0x78>
 8009166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800916c:	2000      	movs	r0, #0
 800916e:	e7fc      	b.n	800916a <__srefill_r+0xfa>
 8009170:	080095e8 	.word	0x080095e8
 8009174:	08009608 	.word	0x08009608
 8009178:	080095c8 	.word	0x080095c8
 800917c:	08009628 	.word	0x08009628
 8009180:	0800905d 	.word	0x0800905d

08009184 <_sbrk_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4d06      	ldr	r5, [pc, #24]	; (80091a0 <_sbrk_r+0x1c>)
 8009188:	2300      	movs	r3, #0
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	602b      	str	r3, [r5, #0]
 8009190:	f7f7 fe56 	bl	8000e40 <_sbrk>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_sbrk_r+0x1a>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_sbrk_r+0x1a>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	200008dc 	.word	0x200008dc

080091a4 <__sread>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ac:	f000 f996 	bl	80094dc <_read_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	bfab      	itete	ge
 80091b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091b6:	89a3      	ldrhlt	r3, [r4, #12]
 80091b8:	181b      	addge	r3, r3, r0
 80091ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091be:	bfac      	ite	ge
 80091c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80091c2:	81a3      	strhlt	r3, [r4, #12]
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <__swrite>:
 80091c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ca:	461f      	mov	r7, r3
 80091cc:	898b      	ldrh	r3, [r1, #12]
 80091ce:	05db      	lsls	r3, r3, #23
 80091d0:	4605      	mov	r5, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	4616      	mov	r6, r2
 80091d6:	d505      	bpl.n	80091e4 <__swrite+0x1e>
 80091d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091dc:	2302      	movs	r3, #2
 80091de:	2200      	movs	r2, #0
 80091e0:	f000 f95e 	bl	80094a0 <_lseek_r>
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	4632      	mov	r2, r6
 80091f2:	463b      	mov	r3, r7
 80091f4:	4628      	mov	r0, r5
 80091f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091fa:	f000 b869 	b.w	80092d0 <_write_r>

080091fe <__sseek>:
 80091fe:	b510      	push	{r4, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009206:	f000 f94b 	bl	80094a0 <_lseek_r>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	bf15      	itete	ne
 8009210:	6560      	strne	r0, [r4, #84]	; 0x54
 8009212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800921a:	81a3      	strheq	r3, [r4, #12]
 800921c:	bf18      	it	ne
 800921e:	81a3      	strhne	r3, [r4, #12]
 8009220:	bd10      	pop	{r4, pc}

08009222 <__sclose>:
 8009222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009226:	f000 b8d3 	b.w	80093d0 <_close_r>
	...

0800922c <__swbuf_r>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	460e      	mov	r6, r1
 8009230:	4614      	mov	r4, r2
 8009232:	4605      	mov	r5, r0
 8009234:	b118      	cbz	r0, 800923e <__swbuf_r+0x12>
 8009236:	6983      	ldr	r3, [r0, #24]
 8009238:	b90b      	cbnz	r3, 800923e <__swbuf_r+0x12>
 800923a:	f7ff faa3 	bl	8008784 <__sinit>
 800923e:	4b21      	ldr	r3, [pc, #132]	; (80092c4 <__swbuf_r+0x98>)
 8009240:	429c      	cmp	r4, r3
 8009242:	d12b      	bne.n	800929c <__swbuf_r+0x70>
 8009244:	686c      	ldr	r4, [r5, #4]
 8009246:	69a3      	ldr	r3, [r4, #24]
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	071a      	lsls	r2, r3, #28
 800924e:	d52f      	bpl.n	80092b0 <__swbuf_r+0x84>
 8009250:	6923      	ldr	r3, [r4, #16]
 8009252:	b36b      	cbz	r3, 80092b0 <__swbuf_r+0x84>
 8009254:	6923      	ldr	r3, [r4, #16]
 8009256:	6820      	ldr	r0, [r4, #0]
 8009258:	1ac0      	subs	r0, r0, r3
 800925a:	6963      	ldr	r3, [r4, #20]
 800925c:	b2f6      	uxtb	r6, r6
 800925e:	4283      	cmp	r3, r0
 8009260:	4637      	mov	r7, r6
 8009262:	dc04      	bgt.n	800926e <__swbuf_r+0x42>
 8009264:	4621      	mov	r1, r4
 8009266:	4628      	mov	r0, r5
 8009268:	f7ff f9e6 	bl	8008638 <_fflush_r>
 800926c:	bb30      	cbnz	r0, 80092bc <__swbuf_r+0x90>
 800926e:	68a3      	ldr	r3, [r4, #8]
 8009270:	3b01      	subs	r3, #1
 8009272:	60a3      	str	r3, [r4, #8]
 8009274:	6823      	ldr	r3, [r4, #0]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	6022      	str	r2, [r4, #0]
 800927a:	701e      	strb	r6, [r3, #0]
 800927c:	6963      	ldr	r3, [r4, #20]
 800927e:	3001      	adds	r0, #1
 8009280:	4283      	cmp	r3, r0
 8009282:	d004      	beq.n	800928e <__swbuf_r+0x62>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	07db      	lsls	r3, r3, #31
 8009288:	d506      	bpl.n	8009298 <__swbuf_r+0x6c>
 800928a:	2e0a      	cmp	r6, #10
 800928c:	d104      	bne.n	8009298 <__swbuf_r+0x6c>
 800928e:	4621      	mov	r1, r4
 8009290:	4628      	mov	r0, r5
 8009292:	f7ff f9d1 	bl	8008638 <_fflush_r>
 8009296:	b988      	cbnz	r0, 80092bc <__swbuf_r+0x90>
 8009298:	4638      	mov	r0, r7
 800929a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800929c:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <__swbuf_r+0x9c>)
 800929e:	429c      	cmp	r4, r3
 80092a0:	d101      	bne.n	80092a6 <__swbuf_r+0x7a>
 80092a2:	68ac      	ldr	r4, [r5, #8]
 80092a4:	e7cf      	b.n	8009246 <__swbuf_r+0x1a>
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <__swbuf_r+0xa0>)
 80092a8:	429c      	cmp	r4, r3
 80092aa:	bf08      	it	eq
 80092ac:	68ec      	ldreq	r4, [r5, #12]
 80092ae:	e7ca      	b.n	8009246 <__swbuf_r+0x1a>
 80092b0:	4621      	mov	r1, r4
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 f81e 	bl	80092f4 <__swsetup_r>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d0cb      	beq.n	8009254 <__swbuf_r+0x28>
 80092bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80092c0:	e7ea      	b.n	8009298 <__swbuf_r+0x6c>
 80092c2:	bf00      	nop
 80092c4:	080095e8 	.word	0x080095e8
 80092c8:	08009608 	.word	0x08009608
 80092cc:	080095c8 	.word	0x080095c8

080092d0 <_write_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	; (80092f0 <_write_r+0x20>)
 80092d4:	4604      	mov	r4, r0
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7f7 fd4f 	bl	8000d82 <_write>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_write_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_write_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	200008dc 	.word	0x200008dc

080092f4 <__swsetup_r>:
 80092f4:	4b32      	ldr	r3, [pc, #200]	; (80093c0 <__swsetup_r+0xcc>)
 80092f6:	b570      	push	{r4, r5, r6, lr}
 80092f8:	681d      	ldr	r5, [r3, #0]
 80092fa:	4606      	mov	r6, r0
 80092fc:	460c      	mov	r4, r1
 80092fe:	b125      	cbz	r5, 800930a <__swsetup_r+0x16>
 8009300:	69ab      	ldr	r3, [r5, #24]
 8009302:	b913      	cbnz	r3, 800930a <__swsetup_r+0x16>
 8009304:	4628      	mov	r0, r5
 8009306:	f7ff fa3d 	bl	8008784 <__sinit>
 800930a:	4b2e      	ldr	r3, [pc, #184]	; (80093c4 <__swsetup_r+0xd0>)
 800930c:	429c      	cmp	r4, r3
 800930e:	d10f      	bne.n	8009330 <__swsetup_r+0x3c>
 8009310:	686c      	ldr	r4, [r5, #4]
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009318:	0719      	lsls	r1, r3, #28
 800931a:	d42c      	bmi.n	8009376 <__swsetup_r+0x82>
 800931c:	06dd      	lsls	r5, r3, #27
 800931e:	d411      	bmi.n	8009344 <__swsetup_r+0x50>
 8009320:	2309      	movs	r3, #9
 8009322:	6033      	str	r3, [r6, #0]
 8009324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009328:	81a3      	strh	r3, [r4, #12]
 800932a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800932e:	e03e      	b.n	80093ae <__swsetup_r+0xba>
 8009330:	4b25      	ldr	r3, [pc, #148]	; (80093c8 <__swsetup_r+0xd4>)
 8009332:	429c      	cmp	r4, r3
 8009334:	d101      	bne.n	800933a <__swsetup_r+0x46>
 8009336:	68ac      	ldr	r4, [r5, #8]
 8009338:	e7eb      	b.n	8009312 <__swsetup_r+0x1e>
 800933a:	4b24      	ldr	r3, [pc, #144]	; (80093cc <__swsetup_r+0xd8>)
 800933c:	429c      	cmp	r4, r3
 800933e:	bf08      	it	eq
 8009340:	68ec      	ldreq	r4, [r5, #12]
 8009342:	e7e6      	b.n	8009312 <__swsetup_r+0x1e>
 8009344:	0758      	lsls	r0, r3, #29
 8009346:	d512      	bpl.n	800936e <__swsetup_r+0x7a>
 8009348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800934a:	b141      	cbz	r1, 800935e <__swsetup_r+0x6a>
 800934c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009350:	4299      	cmp	r1, r3
 8009352:	d002      	beq.n	800935a <__swsetup_r+0x66>
 8009354:	4630      	mov	r0, r6
 8009356:	f7ff fd8f 	bl	8008e78 <_free_r>
 800935a:	2300      	movs	r3, #0
 800935c:	6363      	str	r3, [r4, #52]	; 0x34
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	2300      	movs	r3, #0
 8009368:	6063      	str	r3, [r4, #4]
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f043 0308 	orr.w	r3, r3, #8
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	6923      	ldr	r3, [r4, #16]
 8009378:	b94b      	cbnz	r3, 800938e <__swsetup_r+0x9a>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009384:	d003      	beq.n	800938e <__swsetup_r+0x9a>
 8009386:	4621      	mov	r1, r4
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff fd0f 	bl	8008dac <__smakebuf_r>
 800938e:	89a0      	ldrh	r0, [r4, #12]
 8009390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009394:	f010 0301 	ands.w	r3, r0, #1
 8009398:	d00a      	beq.n	80093b0 <__swsetup_r+0xbc>
 800939a:	2300      	movs	r3, #0
 800939c:	60a3      	str	r3, [r4, #8]
 800939e:	6963      	ldr	r3, [r4, #20]
 80093a0:	425b      	negs	r3, r3
 80093a2:	61a3      	str	r3, [r4, #24]
 80093a4:	6923      	ldr	r3, [r4, #16]
 80093a6:	b943      	cbnz	r3, 80093ba <__swsetup_r+0xc6>
 80093a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093ac:	d1ba      	bne.n	8009324 <__swsetup_r+0x30>
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	0781      	lsls	r1, r0, #30
 80093b2:	bf58      	it	pl
 80093b4:	6963      	ldrpl	r3, [r4, #20]
 80093b6:	60a3      	str	r3, [r4, #8]
 80093b8:	e7f4      	b.n	80093a4 <__swsetup_r+0xb0>
 80093ba:	2000      	movs	r0, #0
 80093bc:	e7f7      	b.n	80093ae <__swsetup_r+0xba>
 80093be:	bf00      	nop
 80093c0:	2000002c 	.word	0x2000002c
 80093c4:	080095e8 	.word	0x080095e8
 80093c8:	08009608 	.word	0x08009608
 80093cc:	080095c8 	.word	0x080095c8

080093d0 <_close_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d06      	ldr	r5, [pc, #24]	; (80093ec <_close_r+0x1c>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	602b      	str	r3, [r5, #0]
 80093dc:	f7f7 fced 	bl	8000dba <_close>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_close_r+0x1a>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_close_r+0x1a>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	200008dc 	.word	0x200008dc

080093f0 <__sflags>:
 80093f0:	780b      	ldrb	r3, [r1, #0]
 80093f2:	2b72      	cmp	r3, #114	; 0x72
 80093f4:	b530      	push	{r4, r5, lr}
 80093f6:	d022      	beq.n	800943e <__sflags+0x4e>
 80093f8:	2b77      	cmp	r3, #119	; 0x77
 80093fa:	d024      	beq.n	8009446 <__sflags+0x56>
 80093fc:	2b61      	cmp	r3, #97	; 0x61
 80093fe:	d027      	beq.n	8009450 <__sflags+0x60>
 8009400:	2316      	movs	r3, #22
 8009402:	6003      	str	r3, [r0, #0]
 8009404:	2000      	movs	r0, #0
 8009406:	bd30      	pop	{r4, r5, pc}
 8009408:	2d62      	cmp	r5, #98	; 0x62
 800940a:	d012      	beq.n	8009432 <__sflags+0x42>
 800940c:	2d78      	cmp	r5, #120	; 0x78
 800940e:	d013      	beq.n	8009438 <__sflags+0x48>
 8009410:	2d2b      	cmp	r5, #43	; 0x2b
 8009412:	d107      	bne.n	8009424 <__sflags+0x34>
 8009414:	f020 001c 	bic.w	r0, r0, #28
 8009418:	f023 0303 	bic.w	r3, r3, #3
 800941c:	f040 0010 	orr.w	r0, r0, #16
 8009420:	f043 0302 	orr.w	r3, r3, #2
 8009424:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009428:	2d00      	cmp	r5, #0
 800942a:	d1ed      	bne.n	8009408 <__sflags+0x18>
 800942c:	4323      	orrs	r3, r4
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	e7e9      	b.n	8009406 <__sflags+0x16>
 8009432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009436:	e7f5      	b.n	8009424 <__sflags+0x34>
 8009438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800943c:	e7f2      	b.n	8009424 <__sflags+0x34>
 800943e:	2400      	movs	r4, #0
 8009440:	4623      	mov	r3, r4
 8009442:	2004      	movs	r0, #4
 8009444:	e7ee      	b.n	8009424 <__sflags+0x34>
 8009446:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800944a:	2301      	movs	r3, #1
 800944c:	2008      	movs	r0, #8
 800944e:	e7e9      	b.n	8009424 <__sflags+0x34>
 8009450:	f44f 7402 	mov.w	r4, #520	; 0x208
 8009454:	2301      	movs	r3, #1
 8009456:	f44f 7084 	mov.w	r0, #264	; 0x108
 800945a:	e7e3      	b.n	8009424 <__sflags+0x34>

0800945c <_fstat_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4d07      	ldr	r5, [pc, #28]	; (800947c <_fstat_r+0x20>)
 8009460:	2300      	movs	r3, #0
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	602b      	str	r3, [r5, #0]
 800946a:	f7f7 fcb2 	bl	8000dd2 <_fstat>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d102      	bne.n	8009478 <_fstat_r+0x1c>
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	b103      	cbz	r3, 8009478 <_fstat_r+0x1c>
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	bd38      	pop	{r3, r4, r5, pc}
 800947a:	bf00      	nop
 800947c:	200008dc 	.word	0x200008dc

08009480 <_isatty_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d06      	ldr	r5, [pc, #24]	; (800949c <_isatty_r+0x1c>)
 8009484:	2300      	movs	r3, #0
 8009486:	4604      	mov	r4, r0
 8009488:	4608      	mov	r0, r1
 800948a:	602b      	str	r3, [r5, #0]
 800948c:	f7f7 fcb1 	bl	8000df2 <_isatty>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_isatty_r+0x1a>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_isatty_r+0x1a>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	200008dc 	.word	0x200008dc

080094a0 <_lseek_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d07      	ldr	r5, [pc, #28]	; (80094c0 <_lseek_r+0x20>)
 80094a4:	4604      	mov	r4, r0
 80094a6:	4608      	mov	r0, r1
 80094a8:	4611      	mov	r1, r2
 80094aa:	2200      	movs	r2, #0
 80094ac:	602a      	str	r2, [r5, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	f7f7 fcaa 	bl	8000e08 <_lseek>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d102      	bne.n	80094be <_lseek_r+0x1e>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	b103      	cbz	r3, 80094be <_lseek_r+0x1e>
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	200008dc 	.word	0x200008dc

080094c4 <__malloc_lock>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__malloc_lock+0x8>)
 80094c6:	f7ff bc49 	b.w	8008d5c <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	200008d0 	.word	0x200008d0

080094d0 <__malloc_unlock>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__malloc_unlock+0x8>)
 80094d2:	f7ff bc44 	b.w	8008d5e <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	200008d0 	.word	0x200008d0

080094dc <_read_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4d07      	ldr	r5, [pc, #28]	; (80094fc <_read_r+0x20>)
 80094e0:	4604      	mov	r4, r0
 80094e2:	4608      	mov	r0, r1
 80094e4:	4611      	mov	r1, r2
 80094e6:	2200      	movs	r2, #0
 80094e8:	602a      	str	r2, [r5, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	f7f7 fc2c 	bl	8000d48 <_read>
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	d102      	bne.n	80094fa <_read_r+0x1e>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	b103      	cbz	r3, 80094fa <_read_r+0x1e>
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
 80094fc:	200008dc 	.word	0x200008dc

08009500 <_init>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr

0800950c <_fini>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr
